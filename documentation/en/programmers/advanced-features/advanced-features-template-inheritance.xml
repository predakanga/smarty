<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 2972 $ -->
<sect1 id="advanced.features.template.inheritance">
 <title>Template Inheritance</title>
 <para>
  Inheritance brings the concept of Object Oriented Programming to templates, allowing you to define
  one (or more) base templates that can be extended by child templates. Extending means that the child
  template can override all or some of the parent named block areas.
 </para>

  <itemizedlist>
    <listitem><para>
      The inheritance tree can be as big as you want (meaning you can extend a file that extends another 
      one that extends another one and so on..), but be aware that all files have to be checked for modifications 
      at runtime so the more inheritance the more overhead you add.    
    </para></listitem>
    <listitem><para>
      The child templates can not define any content besides what's inside <link linkend="language.function.block"><varname>{block}</varname></link>
      tags they override, anything outside of <link linkend="language.function.block"><varname>{block}</varname></link> tags will be removed.
    </para></listitem>
    <listitem><para>
      The content of <link linkend="language.function.block"><varname>{block}</varname></link> tags from child and parent templates can be merged by 
      the <literal>append</literal> or <literal>prepend</literal> <link linkend="language.function.block"><varname>{block}</varname></link>
      tag option flags and <literal>{$smarty.block.parent}</literal> or <literal>{$smarty.block.child}</literal> placeholders.
    </para></listitem>
    <listitem><para>
      Template inheritance is a compile time process which does create a single compiled template file. Compared to corresponding 
      solutions based on subtemplates included with the <link linkend="language.function.include"><varname>{include}</varname></link>
      tag it does have much better performance when redering.
    </para></listitem>
    <listitem><para>
      The child template does extend its parent defined with the <link linkend="language.function.extends"><varname>{extends}</varname></link> tag, 
      which must be the first line in the child template. Instead of using the <link linkend="language.function.extends"><varname>{extends}</varname></link>
      tags in the template files you can define the whole template inheritance tree in the PHP script when you are calling <link linkend="api.fetch"><varname>fetch()</varname></link>
      or <link linkend="api.display"><varname>display()</varname></link> with the <literal>extends:</literal> template resource type. The later provides even more flexibillity.
    </para></listitem>
  </itemizedlist>
  <note><para>
    If you have a subtemplate which is included with <link linkend="language.function.include"><varname>{include}</varname></link> and it does contain 
    <link linkend="language.function.block"><varname>{block}</varname></link> areas it does work only if the <link linkend="language.function.include"><varname>{include}</varname></link>
    itself is called from within a surrounding  <link linkend="language.function.block"><varname>{block}</varname></link>. In the final parent template you may need a dummy <link linkend="language.function.block"><varname>{block}</varname></link> for it.
  </para></note>
  
 <example>
  <title>Template inheritance example</title>
  <para>layout.tpl (parent)</para>
  <programlisting>
<![CDATA[
<html>
<head>
  <title>{block name=title}Default Page Title{/block}</title>
  <span style="color: blue">{block name=head}{/block}</span>
</head>
<body>
{block name=body}{/block}
</body>
</html>
]]>
  </programlisting>
   <para>myproject.tpl (child)</para>
   <programlisting>
<![CDATA[
{extends file=layout.tpl}
{block name=head}
  <link href="/css/mypage.css" rel="stylesheet" type="text/css"/>
  <script src="/js/mypage.js"></script>
{/block}
]]>

  </programlisting>
   <para>myproject.tpl (grandchild)</para>
   <programlisting>
<![CDATA[
{extends file=project.tpl}
{block name=title}My Page Title{/block}
{block name=head}
  <link href="/css/mypage.css" rel="stylesheet" type="text/css"/>
  <script src="/js/mypage.js"></script>
{/block}
{block name=body}My HTML Page Body goes here{/block}
]]>
  </programlisting>
   <para>To render the above use</para>
<programlisting role="php">
<![CDATA[
 $smarty->display('mypage.tpl');
]]>
</programlisting> 
  <para>The resulting output is</para>
  <programlisting>
<![CDATA[
<html>
<head>
  <title>My Page Title</title>
  <link href="/css/mypage.css" rel="stylesheet" type="text/css"/>
  <script src="/js/mypage.js"></script>
</head>
<body>
My HTML Page Body goes here
</body>
</html>]]>
</programlisting> 
</example>

  <example>
    <title>Template inheritance by template resource <literal>extends:</literal></title>
    <para>
      Instead of using <link linkend="language.function.extends"><varname>{extends}</varname></link> tags in the template
      files you can define the inheritance tree in your PHP script by using the  <literal>extends:</literal> resource type.
    </para>
    <para>
      The code below will return same result as the example above.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$smarty->display('extends:layout.tpl|myproject.tpl|mypage.tpl'); 
?>
]]>
   </programlisting>
  </example>
 <para>
  See also
  <link linkend="language.function.block"><varname>{block}</varname></link>,
   <link linkend="language.function.extends"><varname>{extends}</varname></link>
   and  <link linkend="extends.resource"><literal>extends:</literal> resource</link>
 </para> 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
