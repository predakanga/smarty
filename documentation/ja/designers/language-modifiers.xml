<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 3158 $ -->
<!-- EN-Revision: 2972 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
<chapter id="language.modifiers">
 <title>変数の修飾子</title>
 <para>
  変数の修飾子は、
  <link linkend="language.syntax.variables">変数</link> や
  <link linkend="language.custom.functions">カスタム関数</link>
  や文字列を修飾して出力することができます。修飾子を適用するには、
  変数名の後に <literal>|</literal> (パイプ) と修飾子の名前を指定します。
  また、修飾子はその動作に影響を及ぼす追加のパラメータを受け入れる場合もあります。
  そのパラメータは修飾子の後に続き、<literal>:</literal> (コロン) によって区切られます。
  また、<emphasis>すべての PHP 関数は、暗黙的に修飾子として使用でき</emphasis>
  (あとで説明します)、修飾子は <link linkend="language.combining.modifiers">組み合わせる</link>
  こともできます。
 </para>
 <example>
  <title>修飾子の例</title>
  <programlisting>
<![CDATA[
{* 変数に修飾子を適用 *}
{$title|upper}

{* パラメータを持つ修飾子 *}
{$title|truncate:40:'...'}

{* テンプレート関数のパラメータに修飾子を適用 *}
{html_table loop=$myvar|upper}

{* パラメータ付き *}
{html_table loop=$myvar|truncate:40:'...'}

{* リテラル文字列に修飾子を適用 *}
{'foobar'|upper}

{* 現在の日付を整形するために date_format を使用 *}
{$smarty.now|date_format:"%Y/%m/%d"}

{* カスタム関数に修飾子を適用 *}
{mailto|upper address='smarty@example.com'}

{* php の str_repeat を使用 *}
{'='|str_repeat:80}

{* php の count *}
{$myArray|@count}

{* php の shuffle をサーバの ip に対して使用 *}
{$smarty.server.SERVER_ADDR|shuffle}

(* 配列全体の大文字変換と切り詰め *}
<select name="name_id">
{html_options output=$myArray|upper|truncate:20}
</select>
]]>
  </programlisting>
 </example>
 <itemizedlist>

 <listitem><para>
  配列に対して修飾子を用いた場合は、その配列に格納された全ての値に影響を及ぼします。
  配列全体を１つの値として作用させるには修飾子の先頭に <literal>@</literal>
  記号をつける必要があります。
  <note>
  <title>例</title>
  <para><literal>{$articleTitle|@count}</literal> - これは、
  配列 <parameter>$articleTitle</parameter> の要素数を、php の
  <ulink url="&url.php-manual;count"><varname>count()</varname></ulink>
  関数を修飾子として用いて出力します。
  </para></note>
  </para> </listitem>

 <listitem><para>
  修飾子は <link
  linkend="variable.plugins.dir"><parameter>$plugins_dir</parameter></link>
  から自動的に読み込むか、明示的に <link
  linkend="api.register.modifier"><varname>register_modifier()</varname></link>
  関数で登録します。２つ目の方法は、PHP スクリプトと Smarty テンプレートで
  関数を共有する場合などに有用です。
  </para></listitem>

  <listitem><para>
  先ほどの例で示したように、全ての PHP 関数は暗黙で修飾子として使用する事ができます。
  しかし、修飾子としてPHP関数を使うには２つの小さな落とし穴があります。
   <itemizedlist>
  <listitem><para>第１に、 たまに関数のパラメータの順序が望ましいものではなくります。
   <literal>$foo</literal> を
   <literal>{"%2.f"|sprintf:$foo}</literal> でフォーマットすることはできますが、
   Smarty が提供する方式である <literal>{$foo|string_format:"%2.f"}</literal>
   のほうがより直感的です。
  </para></listitem>
   <listitem><para>
   第２に、<link linkend="variable.security">
   <parameter>$security</parameter></link> が有効な場合、
   修飾子として使用される全ての PHP 関数は
   <link linkend="variable.security.settings">
   <parameter>$security_settings</parameter></link> 配列の
   <literal>MODIFIER_FUNCS</literal> 要素で
   信頼できるものとして定義される必要があります。
  </para></listitem>
   </itemizedlist>
 </para></listitem>
  </itemizedlist>

 <para>
  <link linkend="api.register.modifier"><varname>register_modifier()</varname></link>、
  <link linkend="language.combining.modifiers">修飾子の連結</link>
  および
  <link linkend="plugins">プラグインによる Smarty の拡張</link>
  も参照してください。
 </para>

 &designers.language-modifiers.language-modifier-capitalize;
 &designers.language-modifiers.language-modifier-cat;
 &designers.language-modifiers.language-modifier-count-characters;
 &designers.language-modifiers.language-modifier-count-paragraphs;
 &designers.language-modifiers.language-modifier-count-sentences;
 &designers.language-modifiers.language-modifier-count-words;
 &designers.language-modifiers.language-modifier-date-format;
 &designers.language-modifiers.language-modifier-default;
 &designers.language-modifiers.language-modifier-escape;
 &designers.language-modifiers.language-modifier-indent;
 &designers.language-modifiers.language-modifier-lower;
 &designers.language-modifiers.language-modifier-nl2br;
 &designers.language-modifiers.language-modifier-regex-replace;
 &designers.language-modifiers.language-modifier-replace;
 &designers.language-modifiers.language-modifier-spacify;
 &designers.language-modifiers.language-modifier-string-format;
 &designers.language-modifiers.language-modifier-strip;
 &designers.language-modifiers.language-modifier-strip-tags;
 &designers.language-modifiers.language-modifier-truncate;
 &designers.language-modifiers.language-modifier-upper;
 &designers.language-modifiers.language-modifier-wordwrap;

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
