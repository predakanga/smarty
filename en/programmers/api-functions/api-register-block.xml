<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<refentry id="api.register.block">
 <refnamediv>
  <refname>register_block()</refname>
  <refpurpose>dynamically register block functions plugins</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>void</type><methodname>register_block</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>impl</parameter></methodparam>
   <methodparam><type>bool</type><parameter>cacheable</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>cache_attrs</parameter></methodparam>
  </methodsynopsis>
  <para>
   Use this to dynamically register
   <link linkend="plugins.block.functions">block functions plugins</link>.
   Pass in the block function name, followed by the PHP
   function callback that implements it.
  </para>
  <para>
   The php-function callback <parameter>impl</parameter> can be either (a) a string
   containing the function name or (b) an array of the form
   <literal>array(&amp;$object, $method)</literal> with
   <literal>&amp;$object</literal> being a reference to an
   object and <literal>$method</literal> being a string
   containing the method-name or (c) an array of the form
   <literal>array(&amp;$class, $method)</literal> with
   <literal>$class</literal> being a classname and
   <literal>$method</literal> being a class method of that
   class.
  </para>
  <para>
   <parameter>cacheable</parameter> and <parameter>cache_attrs</parameter>
   can be omitted in most cases. See <link
   linkend="caching.cacheable">Controlling Cacheability of Plugins' Output</link>
   on how to use them properly.
  </para>
  <example>
   <title>register_block()</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->register_block('translate', 'do_translation');

function do_translation ($params, $content, &$smarty, &$repeat)
{
  if (isset($content)) {
    $lang = $params['lang'];
    // do some translation with $content
    return $translation;
  }
}
?>
]]>
   </programlisting>
   <para>
    where the template is:
   </para>
   <programlisting>
<![CDATA[
{* template *}
{translate lang="br"}
Hello, world!
{/translate}
]]>
   </programlisting>
  </example>

    <para>
    See also
    <link linkend="api.unregister.block">unregister_block()</link>
    and
    <link linkend="plugins.block.functions">Plugin Block Functions</link>.
  </para>

 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
