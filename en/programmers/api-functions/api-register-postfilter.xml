<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<refentry id="api.register.postfilter">
 <refnamediv>
  <refname>register_postfilter()</refname>
  <refpurpose>dynamically register postfilters</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>void</type><methodname>register_postfilter</methodname>
   <methodparam><type>mixed</type><parameter>function</parameter></methodparam>
  </methodsynopsis>
  <para>
   Use this to dynamically register
   <link linkend="advanced.features.postfilters">postfilters</link> to run templates
   through after they are compiled. See <link
   linkend="advanced.features.postfilters">template postfilters</link> for
   more information on how to setup a postfiltering function.
  </para>
   &api.register.snippet;
   &note.parameter.function;
  <para>
  See also
  <link linkend="api.unregister.postfilter">
  <varname>unregister_postfilter()</varname></link>,
  <link linkend="api.register.prefilter">
  <varname>register_prefilter()</varname></link>,
  <link linkend="api.load.filter"><varname>load_filter()</varname></link>,
  <link linkend="variable.autoload.filters">
  <parameter>$autoload_filters</parameter></link>
  and the
  <link linkend="advanced.features.outputfilters">template output filters</link>
  section.
</para>

 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
