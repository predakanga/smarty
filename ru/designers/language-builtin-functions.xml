<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
    <chapter id="language.builtin.functions">
     <title>Встроенные функции</title>
     <para>
     В smarty включены несколько встроенных функций. Встроенные функции
     интегрированы в язык шаблонов. Нельзя создавать пользовательские 
     функции с такими же названиями или как-либо модифицировать 
     встроенные функции..
     </para>
     <sect1 id="language.function.capture">
      <title>capture</title>
      <para>
       capture используется, чтобы присвоить вывод шаблона какой-либо 
       переменной вместо его вывода. Любое содержание между {capture
       name="foo"} и {/capture} сохраняется в переменную, указанную в 
       атрибуте name. Затем его можно использовать в шаблоне с помощью
       специальной переменной $smarty.capture.foo, где foo - значение, 
       переданное атрибуту name. Если аттрибут name не указан, то 
       используется default. Каждая комманда {capture} должна иметь пару
       {/capture}. capture поддерживает вложение.
      </para>
	  <note>
	  <title>Техническое замечание</title>
      <para>
       Smarty 1.4.0 - 1.4.4 помещало захваченный вывод в переменную $return.
       С версии 1.4.5 поведение было изменено на использование атрибута name, 
       так что обновите ваши шаблоны соответственно.
      </para>
	  </note>
      <caution>
       <para>
        Будте осторожны, сохраняя вывод комманды <command>insert</command>. 
        Есил вы используете кэширование и встречаются комманды
        <command>insert</command> в области кэированния, то
        не сохраняйте данный вывод.
       </para>
      </caution>
      <para>
       <example>
        <title>Сохранение вывода шаблона</title>
        <programlisting>
{* we don't want to print a table row unless content is displayed *}
{capture name=banner}
{include file="get_banner.tpl"}
{/capture}
{if $smarty.capture.banner ne ""}
	&lt;tr&gt;
		&lt;td&gt;
			{$smarty.capture.banner}
		&lt;/td&gt;
	&lt;/tr&gt;
{/if}</programlisting>
       </example>
      </para>
     </sect1>
		<sect1 id="language.function.config.load">
			<title>config_load</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>file</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя config файла для загрузки</entry>
                    </row>
                    <row>
                        <entry>section</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя секции для загрузки</entry>
                    </row>
                    <row>
                        <entry>scope</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>local</emphasis></entry>
                        <entry>
						Способ обработки области видимости загруженных
						переменных. Должен быть одинм из local, parent 
						или global. local означает, что переменные загружены 
						в контекст локального шаблона. parent означает, что 
						переменные загружены в контекст как локального, так 
						и родительского шаблона. global означает, что 
						переменные доступны из любого шаблона.
						</entry>
                    </row>
                    <row>
                        <entry>global</entry>
                        <entry>логический (boolean)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>No</emphasis></entry>
                        <entry>
                        Доступны ли переменные из родительского шаблона.
                        Аналогичен scope=parent. ЗАМЕЧАНИЕ: Этот аттрибут 
                        перекрывается аттрибутом scope, но все еще 
                        поддерживается. Если scope указан, то это значение 
                        игнорируется.
						</entry>
                    </row>
                </tbody>
               </tgroup>
            </informaltable>
			<para>
			Эта функция используется для загрузки переменных в 
			шаблон из файлов конфигруации. Смотри 
			<link linkend="config.files">Файлы конфигурации</link> 
			для дополнительной информации.
			</para>
<example>
<title>функция config_load</title>

<programlisting>
{config_load file="colors.conf"}

&lt;html&gt;
&lt;title&gt;{#pageTitle#}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
	&lt;tr bgcolor="{#rowBgColor#}"&gt;
		&lt;td&gt;First&lt;/td&gt;
		&lt;td&gt;Last&lt;/td&gt;
		&lt;td&gt;Address&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</example>
			<para>
			Файлы конфигурации также могут содержать секции. Можно загрузить
			переменные из определенной секции, указав аттрибут 
			<emphasis>section</emphasis>.
			</para>
            <para>
            ЗАМЕЧАНИЕ: <emphasis>Секции файлов конфигурации</emphasis> и встроенная 
            функция <emphasis>section</emphasis> не имеют ничего общего, кроме 
            схожего названия.
            </para>
<example>
<title>функция config_load с указанием секции</title>
<programlisting>
{config_load file="colors.conf" section="Customer"}

&lt;html&gt;
&lt;title&gt;{#pageTitle#}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
	&lt;tr bgcolor="{#rowBgColor#}"&gt;
		&lt;td&gt;First&lt;/td&gt;
		&lt;td&gt;Last&lt;/td&gt;
		&lt;td&gt;Address&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.foreach">
			<title>foreach,foreachelse</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>from</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя массива, по которому надо пройтись</entry>
                    </row>
                    <row>
                        <entry>item</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя переменной, которая будет выступать в 
                        качестве значения текущего елемента</entry>
                    </row>
                    <row>
                        <entry>key</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
						<entry><emphasis>n/a</emphasis></entry>
						<entry>Имя переменной, которая будет выступать в 
                        качестве ключа текущего елемента</entry>
                    </row>
                    <row>
                        <entry>name</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
						<entry>Название цикла foreach для доступа к его 
						свойствам</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
			Циклы <emphasis>foreach</emphasis> являются альтернативой
			циклам <emphasis>section</emphasis>. Циклы 
			<emphasis>foreach</emphasis> используются для прохождения 
			по одному массиву. Синтаксис <emphasis>foreach</emphasis> 
			намного проще, чем <emphasis>section</emphasis>, но его 
			можно использовать только для одного массива.
			Тэг <emphasis>foreach</emphasis> должен иметь в пару тэг 
			<emphasis>/foreach</emphasis>. Обязательные параметры - 
			<emphasis>from</emphasis> и <emphasis>item</emphasis>. Название
			цикла foreach может быть любой последовательностью букв, цифр 
			и знаков подчеркиваний _. Циклы <emphasis>foreach</emphasis>
			могут быть вложенные, и имена вложенных циклов должны быть 
			уникальные. Переменная <emphasis>from</emphasis> (обычно
			массив значений) указывает количество итераций цикла.
			<emphasis>foreachelse</emphasis> выполняется, если нету значений
			в переменной <emphasis>from</emphasis>.
			</para>
<example>
<title>foreach</title>
<programlisting>

{* выводятся все значния массива $custid *}
{foreach from=$custid item=curr_id}
	id: {$curr_id}&lt;br&gt;
{/foreach}

OUTPUT:

id: 1000&lt;br&gt;
id: 1001&lt;br&gt;
id: 1002&lt;br&gt;</programlisting>
</example>

<example>
<title>foreach key</title>
<programlisting>
{* The key contains the key for each looped value

assignment looks like this:

$smarty->assign("contacts", array(array("phone" =&gt; "1", "fax" =&gt; "2", "cell" =&gt; "3"),
      array("phone" =&gt; "555-4444", "fax" =&gt; "555-3333", "cell" =&gt; "760-1234")));

*}

{foreach name=outer item=contact from=$contacts}
  {foreach key=key item=item from=$contact}
    {$key}: {$item}&lt;br&gt;
  {/foreach}
{/foreach}

OUTPUT:

phone: 1&lt;br&gt;
fax: 2&lt;br&gt;
cell: 3&lt;br&gt;
phone: 555-4444&lt;br&gt;
fax: 555-3333&lt;br&gt;
cell: 760-1234&lt;br&gt;</programlisting>
</example>

		<para>
		Циклы foreach имеют свои свойства, доступ к которым реализуется через
		{$smarty.foreach.foreachname.varname}, где foreachname это название цикла
		(значение аттрибута <emphasis>name</emphasis>), а varname - имя свойства.
		</para>


			<sect2 id="foreach.property.iteration">
			<title>iteration</title>
			<para>
        	Количество отработанных итераций.
			</para>
			<para>
			Отсчет начинается с 1 и увеличивается на единицу на каждой итерации.
			</para>
			</sect2>

			<sect2 id="foreach.property.first">
			<title>first</title>
			<para>
        	<emphasis>first</emphasis> устанавливается в true, если текущая итерация первая.
			</para>
			</sect2>

			<sect2 id="foreach.property.last">
			<title>last</title>
			<para>
        	<emphasis>last</emphasis> устанавливается в true, если текущая итерация последняя.
			</para>
			</sect2>

			<sect2 id="foreach.property.show">	
			<title>show</title>
			<para>
        	Аттрибут <emphasis>show</emphasis> может принимать логические 
        	значения (истина или ложь). Если ложь, то цикл foreach не будет
        	отображаться. Если присутствует тэг foreachelse, то он будет
        	отображен.
			</para>

			</sect2>
			<sect2 id="foreach.property.total">	
			<title>total</title>
			<para>
			<emphasis>total</emphasis> хранит количество итераций цикла. 
			Может быть использовано как в цикле, так и вне его..
			</para>
			</sect2>


		</sect1>
		<sect1 id="language.function.include">
			<title>include</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>file</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя файла шаблона для включения</entry>
                    </row>
                    <row>
                        <entry>assign</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя переменной, которой присвоится вывод
                        шаблона</entry>
                    </row>
                    <row>
                        <entry>[var ...]</entry>
                        <entry>[var type]</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Переменные, переданные в локальную область
                        включаемого шаблона</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
			Тэги include используются для включения других шаблонов в текущий.
            Любые переменные, доступные в текущем шаблоне, доступны и во 
            включаемом. Тэг include должен иметь аттрибут "file", который 
            указывает имя ресурса шаблона.
			</para>
			<para>
			Опциональный аттрибут <emphasis>assign</emphasis> указывает, что 
			вывод шаблона будет присвоен переменной вместо отображения.
			</para>
<example>
<title>функция include</title>
<programlisting>
{include file="header.tpl"}

{* тело шаблона *}

{include file="footer.tpl"}</programlisting>
</example>
			<para>
			Вы также можете передать переменные в подключаемый шаблон в 
			виде атрибутов. Любая переменная, переданная в подключаемый 
			шаблон, доступны только в области видимости подключаемого 
			файла. Переданные переменные имеют преимущество перед 
			существующими переменными с аналогичными именами.
			</para>
<example>
<title>функция include: передача переменных</title>
<programlisting>
{include file="header.tpl" title="Main Menu" table_bgcolor="#c0c0c0"}

{* тело шаблона *}

{include file="footer.tpl" logo="http://my.domain.com/logo.gif"}</programlisting>
</example>
			<para>
			Для подключения файлов вне папки $template_dir можно
			указывать файл с помощью <link 
			linkend="template.resources">ресурсов</link>.
			</para>
<example>
<title>функция include: пример использвоания ресурсов</title>
<programlisting>
{* абсолютный путь к файлу *}
{include file="/usr/local/include/templates/header.tpl"}

{* абсолютный путь к файлу (аналогично) *}
{include file="file:/usr/local/include/templates/header.tpl"}

{* абсолютный путь к файлу в стиле windows (НЕОБХОДИМО использвоать превикс "file:") *}
{include file="file:C:/www/pub/templates/header.tpl"}

{* подключить шаблон из ресурса "db" *}
{include file="db:header.tpl"}</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.include.php">
			<title>include_php</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>file</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя подключаемого php файла</entry>
                    </row>
                    <row>
                        <entry>once</entry>
                        <entry>логический (boolean)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>true</emphasis></entry>
                        <entry>Укзаывает подключать файл или нет, 
                        если он уже был однажды подключен</entry>
                    </row>
                    <row>
                        <entry>assign</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Название переменной, которой будет 
                        присвоен вывод include_php</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
			Тэг include_php используется для подключения php скрипта в шаблон.
			Если security включен, то php скрипт должен быть расположен в папке
			$trusted_dir. Тэг include_php должен иметь атрибут "file", который 
			указывает путь подключаемого php файла (относительный к 
			$trusted_dir или абсолютный путь).
			</para>
			<para>
			include_php это хороший путь для управления компонентными шаблонами,
			держать PHP код вне файлов шаблонов. Допустим у вас есть шаблон,
			который выводит навигацию сайта, информация о которой динамически
			загружается из базы данных. Вы можете хранить php файл, который
			получает данные из базы данных, в отдельной папке, и подключать его
			в начале шаблона. Теперь можно подключать этот файл шаблона в любом
			месте, не волнуясь о происхождении информации (база данных или нет).
			</para>
			<para>
			По умолчанию, php файлы подключаются только один раз, даже если 
			вызываются несколько раз в шаблоне. Можно указать, что файл должен
			быть подключен каждый раз, указав атрибут <emphasis>once</emphasis>.
			Установив once в ложь (false) указывает, что файл должен быть
			подключен вне зависимости от того, был ли он подключен раньше.
			</para>
			<para>
			Можно указать опциональный атрибут <emphasis>assign</emphasis>,
			который указывает имя переменной, которой будет присвоен вывод 
			<emphasis>include_php</emphasis> вместо отображения.
			</para>
			<para>
			Объект smarty доступен в подключаемом php файле как $this.
			</para>
<example>
<title>функция include_php</title>
<programlisting>
load_nav.php
-------------

&lt;?php

	// Загрузка переменных из базы данных mysql и передача их в шаблон
	require_once("MySQL.class.php");
	$sql = new MySQL;
	$sql->query("select * from site_nav_sections order by name",SQL_ALL);
	$this->assign('sections',$sql->record);

?&gt;


index.tpl
---------

{* абсолютный путь или относительный относительно $trusted_dir *}
{include_php file="/path/to/load_nav.php"}

{foreach item="curr_section" from=$sections}
	&lt;a href="{$curr_section.url}"&gt;{$curr_section.name}&lt;/a&gt;&lt;br&gt;
{/foreach}</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.insert">
			<title>insert</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>name</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя функции вставки (insert_name)</entry>
                    </row>
                    <row>
                        <entry>assign</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя переменной, которой будет 
                        присвоен вывод</entry>
                    </row>
                    <row>
                        <entry>script</entry>
                        <entry>строка (string)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Bмя php файла, который будет подключен
                        перед вызовом функции вставки</entry>
                    </row>
                    <row>
                        <entry>[var ...]</entry>
                        <entry>[var type]</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Переменные, передаваемые в 
                        функцию вставки</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
			Тэг insert очень похож на тэг include, кроме случая, когда
			<link linkend="caching">кэширование</link> включено. Insert 
			тэг не кешируется. Он будет выполнен каждый раз, при обращении
			к шаблону.
			</para>
            <para>
            Допустим вы имеете шаблон с баннером вверху страницы.
            Баннер может содержать любую смесь HTML, исзображенй,
            flash и т.д., то есть нельзя использовать просто 
            статическую ссылку, и мы не хотим, чтобы код баннера
            кэшировался с остальной страницей. Тогда используем
            тэг insert: шаблон знает значения #banner_location_id# и
            #site_id# (взяты из файла конфигурации) и должен вызвать
            функцию, чтобы получить код баннера.
			</para>
<example>
<title>функция insert</title>
<programlisting>
{* пример установки баннера *}
{insert name="getBanner" lid=#banner_location_id# sid=#site_id#}</programlisting>
</example>
			<para>
			В этом примере мы используем имя "getBanner" и передаем параметры
			#banner_location_id# и #site_id#. Smarty попробует вызывать
			функцию insert_getBanner() в вашей PHP программе, передав
			значения #banner_location_id# и #site_id# первым параметром в виде 
			ассоциативного массива. Все имена функций вставки должны начинаться
			с "insert_" для предотвращения возможных конфликтов имен. Функция
			insert_getBanner() должна обработать переданные переменные и 
			вернуть	результат. Он будет отображен в шаблоне вместо тэга insert.
			В данном случае Smarty вызовет функцию insert_getBanner(array("lid"
			=> "12345","sid" => "67890")); и выведет результат на месте тэга
			insert.
			</para>
			<para>
			Если указан аттрибут "assign", то вывод функции вставки будет 
			присвоен указанной переменной вместо отображения. ЗАМЕЧАНИЕ:
			присвоение вывода тэга insert переменной шаблона не очень 
			полезно, когда кеширование включено.
			</para>
			<para>
			Если указан аттрибут "script", то указанный php файл будет
			подключен (только однажды) перед вызовом функции вставки. 
			Это удобно, когда функция может не сущетсвовать, и должен быть
			подключен php файл, чтобы определить функцию. Путь к файлу
			должен быть либо абслотныю, либо относительным относительно
			$trusted_dir. Когда security активирована, то php файл должен 
			быть в папке $trusted_dir.
			</para>
			<para>
			Обьект Smarty передается в функцию как второй параметр. 
			Так вы можете использовать и модифицировать информацию
			из объекта Smarty в функциях вставки.
			</para>
			<note>
			<title>Техническое Замечание</title>
			<para>
            Возможно иметь части шаблона не кешированными.
            Если активировано <link linkend="caching">кэширование</link>,
            то тэг insert все равно не будет кэширован. Он будет вызван
            каждый раз при генерации страницы, даже из кешированных
            страниц. Это полезно для таких вещей, как баннеры, опросы,
            прогнозы погоды, результаты поиска, области обратной связи
            и т.д.
			</para>
			</note>
		</sect1>
		<sect1 id="language.function.if">
			<title>if,elseif,else</title>
			<para>
			Конструкция if в Smarty такая же гибкая, как и аналогичная
			конструкциия в php, только с несколько расширенными 
			возможностями.
			with a few added features for the template engine.
			Каждый тэг <emphasis>if</emphasis> должен иметь пару
			<emphasis>/if</emphasis>. <emphasis>else</emphasis> и
			<emphasis>elseif</emphasis> так же допустимы. "eq", "ne",
			"neq", "gt", "lt", "lte", "le", "gte" "ge", "is even", 
			"is odd", "is not even", "is not odd", "not", "mod", 
			"div by", "even by", "odd by", "==", "!=", ">", "<", "<=",
			">=" -- допустимые квалификаторы условий. Они должны быть 
			отделены от окружающих елементов пробелами.
			</para>
<example>
<title>кострукция if</title>
<programlisting>
{if $name eq "Fred"}
	Welcome Sir.
{elseif $name eq "Wilma"}
	Welcome Ma'am.
{else}
	Welcome, whatever you are.
{/if}

{* пример с логикой ИЛИ ("or") *}
{if $name eq "Fred" or $name eq "Wilma"}
	...
{/if}

{* аналогичен предыдущему *}
{if $name == "Fred" || $name == "Wilma"}
	...
{/if}

{* следующий синтаксис не будет работать. квалификаторы условий должны 
   быть отделены от окружающих элементов пробелами *}
{if $name=="Fred" || $name=="Wilma"}
	...
{/if}


{* допускаются скобки *}
{if ( $amount < 0 or $amount > 1000 ) and $volume >= #minVolAmt#}
	...
{/if}

{* можно также вызывать встроенные функции php *}
{if count($var) gt 0}
	...
{/if}

{* проверка значения на четность *}
{if $var is even}
	...
{/if}
{if $var is odd}
	...
{/if}
{if $var is not odd}
	...
{/if}

{* проверка на делимость на 4 *}
{if $var is div by 4}
	...
{/if}

{* проверка на "четность" групируя по 2. т.е.,
0=четно, 1=четно, 2=нечетно, 3=нечетно, 4=четно, 5=четно, и т.д. *}
{if $var is even by 2}
	...
{/if}

{* 0=четно, 1=четно, 2=четно, 3=нечетно, 4=нечетно, 5=нечетно, и т.д. *}
{if $var is even by 3}
	...
{/if}</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.ldelim">
			<title>ldelim,rdelim</title>
			<para>
			ldelim и rdelim используются для отображения разделителей. 
			В нашем случае это "{" и "}". Smarty всегда пытаеться 
			интерпретировать разделители, то есть это это единственный
			способ вывнсти их.
			</para>
<example>
<title>ldelim, rdelim</title>
<programlisting>
{* будут выведены разделители в шаблона *}

{ldelim}funcname{rdelim} is how functions look in Smarty!


OUTPUT:

{funcname} is how functions look in Smarty!</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.literal">
			<title>literal</title>
			<para>
			Тэг Literal позволяет указать блок данных, который не должен
			быть обработан Smarty. Это удобно для вывода javascript кода,
			когда символы { и } могут быть не правильно поняты парсером
			шаблонов. Все, что окружено тэгами {literal} и {/literal} 
			не обрабатывается и просто отображается как есть.
			</para>
<example>
<title>тэг literal</title>
<programlisting>
{literal}
	&lt;script language=javascript&gt;

        	&lt;!--
                	function isblank(field) {
                	if (field.value == '') 
                        	{ return false; }
                	else
                        	{
                        	document.loginform.submit();
                        	return true;
                        	}
                	}
        	// --&gt;

	&lt;/script&gt;
{/literal}</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.php">
			<title>php</title>
			<para>
			Тэг php позволяет вставлять php код прямо в шаблон. Он не 
			будет как-либо изменен, независимо от <link
			linkend="variable.php.handling">$php_handling</link> настроек. 
			Этот тэг тко для продвинутых пользователей, так как обычно
			не требуется.
			</para>
<example>
<title>тэг php</title>
<programlisting>
{php}
		// подключение php скрипта прямо
		// из шаблона
		include("/path/to/display_weather.php");
{/php}</programlisting>
</example>
		</sect1>
		<sect1 id="language.function.section">
			<title>section,sectionelse</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Имя аттрибута</entry>
                        <entry>Тип</entry>
                        <entry>Обязателен</entry>       
                        <entry>По умолчанию</entry>
                        <entry>Описание</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>name</entry>
                        <entry>строка (string)</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Название секции</entry>
                    </row>
                    <row>
                        <entry>loop</entry>
                        <entry>[$variable_name]</entry>
                        <entry>Да</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Имя переменной цикла, для определения 
                        количества итераций цикла.</entry>
                    </row>
                    <row>
                        <entry>start</entry>
                        <entry>целое (integer)</entry>
                        <entry>Нет</entry>
						<entry><emphasis>0</emphasis></entry> 
						<entry>Индекс позиции, с которой будет начинаться
						цикл. Если значение отрицательное, то начальная позиция
						вычисляется от конца массива. Например, если в переменной 
						цикла 7 элементов и значение атрибута start равно -2, то
						начальный индекс будет 5. Неверные значения (значения, вне
						массива) автоматически обрезаются до ближайшего верного 
						значения.</entry>
                    </row>
                    <row>
                        <entry>step</entry>
                        <entry>целое (integer)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>1</emphasis></entry>
						<entry>Значение шага, которое используется для прохода по
						массиву. Например, step=2 указывает обход массива 
						по элементам 0,2,4... Если шаг отрицателен, то обход 
						массива будет производится в обратном направлении.</entry>
                    </row>
                    <row>
                        <entry>max</entry>
                        <entry>целое (integer)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>1</emphasis></entry>
						<entry>Максимальное количество итераций цикла.</entry>
                    </row>
                    <row>
                        <entry>show</entry>
                        <entry>логический (boolean)</entry>
                        <entry>Нет</entry>
                        <entry><emphasis>true</emphasis></entry>
                        <entry>Указывает, показывать или нет эту секцию</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
			Секции используются для обхода массива данных. Все тэги
            <emphasis>section</emphasis> должны иметь в пару тэг
            <emphasis>/section</emphasis>. Обязательные параметры:
            <emphasis>name</emphasis> и <emphasis>loop</emphasis>. Имя
            секции может быть какой угодно последовательностью букв, 
            цифр и знаков подчеркиваний. Секции могут быть вложенными. 
            Имена вложенных секций должны отличаться друг от друга. 
            Переменная цикла (обычно массив) определяет количество итериций 
            цикла. Когда отображаем переменную цикла, имя секции должно 
            быть указана после имени переменной в квадратных скобках [].
            Тэг <emphasis>sectionelse</emphasis> выполняется, когда
            переменная цикла пуста.
			</para>
<example>
<title>section</title>
<programlisting>

{* этот пример выведет все значения массива $custid *}
{section name=customer loop=$custid}
	id: {$custid[customer]}&lt;br&gt;
{/section}

OUTPUT:

id: 1000&lt;br&gt;
id: 1001&lt;br&gt;
id: 1002&lt;br&gt;</programlisting>
</example>

<example>
<title>section loop variable</title>
<programlisting>
{* Переменная цикла определяет только количество итераций цикла.
   Вы имеете доступ к любой переменной шаблона в секции.
   Этот пример подразумевает, что каждый из массивов $custid, $name и $address 
   содержат одинаковое количество значений *}
{section name=customer loop=$custid}
	id: {$custid[customer]}&lt;br&gt;
	name: {$name[customer]}&lt;br&gt;
	address: {$address[customer]}&lt;br&gt;
	&lt;p&gt;
{/section}


OUTPUT:

id: 1000&lt;br&gt;
name: John Smith&lt;br&gt;
address: 253 N 45th&lt;br&gt;
&lt;p&gt;
id: 1001&lt;br&gt;
name: Jack Jones&lt;br&gt;
address: 417 Mulberry ln&lt;br&gt;
&lt;p&gt;
id: 1002&lt;br&gt;
name: Jane Munson&lt;br&gt;
address: 5605 apple st&lt;br&gt;
&lt;p&gt;</programlisting>
</example>

<example>
<title>имена секций</title>
<programlisting>
{* имя секции может быть любым и используется для указания 
   данных в секции *}
{section name=mydata loop=$custid}
	id: {$custid[mydata]}&lt;br&gt;
	name: {$name[mydata]}&lt;br&gt;
	address: {$address[mydata]}&lt;br&gt;
	&lt;p&gt;
{/section}</programlisting>
</example>

<example>
<title>вложенные секции</title>
<programlisting>
{* секции могут быть неограничено вложеннымиas. С помощью вложенных секций
   вы можете организовать доступ к комплексным стрктурам информации, таким 
   как многомерные массивы. В данном примере $contact_type[customer] является
   массивом, где содержатся типа контактов данного клиент. *}
{section name=customer loop=$custid}
	id: {$custid[customer]}&lt;br&gt;
	name: {$name[customer]}&lt;br&gt;
	address: {$address[customer]}&lt;br&gt;
	{section name=contact loop=$contact_type[customer]}
		{$contact_type[customer][contact]}: {$contact_info[customer][contact]}&lt;br&gt;
	{/section}
	&lt;p&gt;
{/section}


OUTPUT:

id: 1000&lt;br&gt;
name: John Smith&lt;br&gt;
address: 253 N 45th&lt;br&gt;
home phone: 555-555-5555&lt;br&gt;
cell phone: 555-555-5555&lt;br&gt;
e-mail: john@mydomain.com&lt;br&gt;
&lt;p&gt;
id: 1001&lt;br&gt;
name: Jack Jones&lt;br&gt;
address: 417 Mulberry ln&lt;br&gt;
home phone: 555-555-5555&lt;br&gt;
cell phone: 555-555-5555&lt;br&gt;
e-mail: jack@mydomain.com&lt;br&gt;
&lt;p&gt;
id: 1002&lt;br&gt;
name: Jane Munson&lt;br&gt;
address: 5605 apple st&lt;br&gt;
home phone: 555-555-5555&lt;br&gt;
cell phone: 555-555-5555&lt;br&gt;
e-mail: jane@mydomain.com&lt;br&gt;
&lt;p&gt;</programlisting>
</example>

<example>
<title>секции и ассоциативные массивы</title>
<programlisting>
{* Пример вывода ассоциативного массива. *}
{section name=customer loop=$contacts}
	name: {$contacts[customer].name}&lt;br&gt;
	home: {$contacts[customer].home}&lt;br&gt;
	cell: {$contacts[customer].cell}&lt;br&gt;
	e-mail: {$contacts[customer].email}&lt;p&gt;
{/section}


OUTPUT:

name: John Smith&lt;br&gt;
home: 555-555-5555&lt;br&gt;
cell: 555-555-5555&lt;br&gt;
e-mail: john@mydomain.com&lt;p&gt;
name: Jack Jones&lt;br&gt;
home phone: 555-555-5555&lt;br&gt;
cell phone: 555-555-5555&lt;br&gt;
e-mail: jack@mydomain.com&lt;p&gt;
name: Jane Munson&lt;br&gt;
home phone: 555-555-5555&lt;br&gt;
cell phone: 555-555-5555&lt;br&gt;
e-mail: jane@mydomain.com&lt;p&gt;</programlisting>
</example>



<example>
<title>sectionelse</title>
<programlisting>
{* sectionelse обработается, когда $custid не содержит значений *}
{section name=customer loop=$custid}
	id: {$custid[customer]}&lt;br&gt;
{sectionelse}
	there are no values in $custid.
{/section}</programlisting>
</example>
		<para>
		Секции также имеют свои собственные аттрибуты, которые определяют 
		определенные настройки секции. Они указываются примерно так: 
		{$smarty.section.sectionname.varname}
		</para>
		<para>
		ЗАМЕЧАНИЕ: Начиная со Smarty версии 1.5.0, синтаксис аттрибутов секций 
		изменился с {%sectionname.varname%} на {$smarty.section.sectionname.varname}. 
		Старый синтаксис пока поддерживается, но вы встретите только новый стиль в
		прмиерах данного руководства.
		</para>
			<sect2 id="section.property.index">	
			<title>index</title>
			<para>
			index хранит текущий индекс цикла, начиная с 0 (или значения аттрибута 
			start), и увеличивается на единицу (или на значение аттрибута step).
			</para>
			<note>
				<title>Техническое Замечание</title>
				<para>
				Если аттрибуты step и start не указаны, то index 
				аналогичен аттрибуту секции iteration, кроме того, 
				что начинается с 0, а не с 1.				
				</para>
			</note>
	<example>
	<title>аттрибут секции index</title>
	<programlisting>
	{section name=customer loop=$custid}
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{/section}


	OUTPUT:

	0 id: 1000&lt;br&gt;
	1 id: 1001&lt;br&gt;
	2 id: 1002&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.index.prev">	
			<title>index_prev</title>
			<para>
			index_prev хранит предыдущий индекс цикла.
        	На первой итерации устанавливается в -1.
			</para>
	<example>
	<title>аттрибут секции index_prev</title>
	<programlisting>
	{section name=customer loop=$custid}
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{* FYI, $custid[customer.index] and $custid[customer] are identical in meaning *}
	{if $custid[customer.index_prev] ne $custid[customer.index]}
    	The customer id changed&lt;br&gt;
	{/if}
	{/section}


	OUTPUT:

	0 id: 1000&lt;br&gt;
    	The customer id changed&lt;br&gt;
	1 id: 1001&lt;br&gt;
    	The customer id changed&lt;br&gt;
	2 id: 1002&lt;br&gt;
    	The customer id changed&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.index.next">
			<title>index_next</title>
			<para>
        	index_next хранит следующий индекс цикла. На последней итерации цикла
        	будет иметь значение на единицу больше текущего индекса (или на другое
        	значение, если указан аттрибут step).
			</para>
	<example>
	<title>аттрибут секции index_next</title>
	<programlisting>
	{section name=customer loop=$custid}
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{* FYI, $custid[customer.index] and $custid[customer] are identical in meaning *}
	{if $custid[customer.index_next] ne $custid[customer.index]}
    	The customer id will change&lt;br&gt;
	{/if}
	{/section}


	OUTPUT:

	0 id: 1000&lt;br&gt;
    	The customer id will change&lt;br&gt;
	1 id: 1001&lt;br&gt;
    	The customer id will change&lt;br&gt;
	2 id: 1002&lt;br&gt;
    	The customer id will change&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.iteration">
			<title>iteration</title>
			<para>
        	iteration хранит текущую итерацию цикла.
			</para>
			<para>
			ЗАМЕЧАНИЕ: Значение не зависит от аттрибутов start, step и max, в отличии
			аттрибута index. Итерации также начинаются с 1, а не с 0, как index.
			rownum является синонимом для iteration.
			</para>
	<example>
	<title>аттрибут секции iteration</title>
	<programlisting>
	{section name=customer loop=$custid start=5 step=2}
	current loop iteration: {$smarty.section.customer.iteration}&lt;br&gt;
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{* FYI, $custid[customer.index] and $custid[customer] are identical in meaning *}
	{if $custid[customer.index_next] ne $custid[customer.index]}
    	The customer id will change&lt;br&gt;
	{/if}
	{/section}


	OUTPUT:

	current loop iteration: 1
	5 id: 1000&lt;br&gt;
    	The customer id will change&lt;br&gt;
	current loop iteration: 2
	7 id: 1001&lt;br&gt;
    	The customer id will change&lt;br&gt;
	current loop iteration: 3
	9 id: 1002&lt;br&gt;
    	The customer id will change&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.first">
			<title>first</title>
			<para>
        	first имеет значение истина, если текущая итерация цикла - первая.
			</para>
	<example>
	<title>аттрибут секции first</title>
	<programlisting>
	{section name=customer loop=$custid}
	{if $smarty.section.customer.first}
    	&lt;table&gt;
	{/if}

	&lt;tr&gt;&lt;td&gt;{$smarty.section.customer.index} id:
        	{$custid[customer]}&lt;/td&gt;&lt;/tr&gt;

	{if $smarty.section.customer.last}
    	&lt;/table&gt;
	{/if}
	{/section}


	OUTPUT:

	&lt;table&gt;
	&lt;tr&gt;&lt;td&gt;0 id: 1000&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;1 id: 1001&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;2 id: 1002&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.last">
			<title>last</title>
			<para>
        	last имеет значение истина, если текущая итерация цикла - последняя.
        	one.
			</para>
	<example>
	<title>аттрибут секции last</title>
	<programlisting>
	{section name=customer loop=$custid}
	{if $smarty.section.customer.first}
    	&lt;table&gt;
	{/if}

	&lt;tr&gt;&lt;td&gt;{$smarty.section.customer.index} id:
        	{$custid[customer]}&lt;/td&gt;&lt;/tr&gt;

	{if $smarty.section.customer.last}
    	&lt;/table&gt;
	{/if}
	{/section}


	OUTPUT:

	&lt;table&gt;
	&lt;tr&gt;&lt;td&gt;0 id: 1000&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;1 id: 1001&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;2 id: 1002&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.rownum">	
			<title>rownum</title>
			<para>
			rownum хранит текущую итерацию цикла, начиная с 1.
			rownum - синоним для iteration.
			</para>
	<example>
	<title>аттрибут секции rownum</title>
	<programlisting>
	{section name=customer loop=$custid}
	{$smarty.section.customer.rownum} id: {$custid[customer]}&lt;br&gt;
	{/section}


	OUTPUT:

	1 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	3 id: 1002&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.loop">	
			<title>loop</title>
			<para>
			loop хранит последний отработанный индекс цикла. Может быть использован 
			как внутри секции, так и после нее.
			</para>
	<example>
	<title>аттрбут секции index</title>
	<programlisting>
	{section name=customer loop=$custid}
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{/section}

	There were {$smarty.section.customer.loop} customers shown above.

	OUTPUT:

	0 id: 1000&lt;br&gt;
	1 id: 1001&lt;br&gt;
	2 id: 1002&lt;br&gt;

	There were 3 customers shown above.
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.show">	
			<title>show</title>
			<para>
        	Аттрибут <emphasis>show</emphasis> может принимать логические 
        	значения (истина или ложь). Если ложь, то цикл foreach не будет
        	отображаться. Если присутствует тэг foreachelse, то он будет
        	отображен.
			</para>
	<example>
	<title>аттрибут секции show</title>
	<programlisting>
	{* $show_customer_info может быть передана из PHP программы
	укаызвая, показывать или нет эту секцию *}
	{section name=customer loop=$custid show=$show_customer_info}
	{$smarty.section.customer.rownum} id: {$custid[customer]}&lt;br&gt;
	{/section}

	{if $smarty.section.customer.show}
	the section was shown.
	{else}
	the section was not shown.
	{/if}


	OUTPUT:

	1 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	3 id: 1002&lt;br&gt;

	the section was shown.
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.total">	
			<title>total</title>
			<para>
			total хранит количество всех итераций цикла. Может быть использвован
			как в секции, так и после нее.
			</para>
	<example>
	<title>аттрибут секции total</title>
	<programlisting>
	{section name=customer loop=$custid step=2}	
	{$smarty.section.customer.index} id: {$custid[customer]}&lt;br&gt;
	{/section}

	There were {$smarty.section.customer.total} customers shown above.

	OUTPUT:

	0 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	4 id: 1002&lt;br&gt;

	There were 3 customers shown above.
</programlisting>
	</example>
			</sect2>
		</sect1>
		<sect1 id="language.function.strip">
			<title>strip</title>
			<para>
			Часто вебдизайнеры сталкиваются с проблемой, что пробелы и переносы
			строк влияют на отображение HTML в броузере ("фишки" броузера), то 
			есть может понадобится склеить все теги в шаблоне вместе, чтобы получить
			желаемый результат. Но в результате получается нечитаемый или 
			трудноредактируемый шаблон.
			</para>
			<para>
			В выводимом тексте, заключенном между тэгами {strip} и {/strip}, 
			удаляются повторные пробелы и переносы строк, перед отображением.
			Так вы можете сохранив шаблон читаемым не волноваться насчет
			лишних пробелов.
			</para>
			<note>
			<title>Техническое Замечание</title>
			<para>
			{strip}{/strip} не влияет на содержимое переменных шаблона.
			См. <link linkend="language.modifier.strip">модификатор strip</link>.
			</para>
			</note>
<example>
<title>тэг strip</title>
<programlisting>
{* следующее будет выведено в виде одной строки *}
{strip}
&lt;table border=0&gt;
	&lt;tr&gt;
		&lt;td&gt;
			&lt;A HREF="{$url}"&gt;
			&lt;font color="red"&gt;This is a test&lt;/font&gt;
			&lt;/A&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
{/strip}


OUTPUT:

&lt;table border=0&gt;&lt;tr&gt;&lt;td&gt;&lt;A HREF="http://my.domain.com"&gt;&lt;font color="red"&gt;This is a test&lt;/font&gt;&lt;/A&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</programlisting>
</example>
		<para>
		Заметте, что в данном примере все строки начинаются и заканчиваются HTML
		тэгами. Notice that in the above example, all the lines begin and end
		with HTML tags. Учтите, что все строки склеиваются вместе. Если есть 
		обычный текст в начале строки, то может не получиться желаемый результат.
		</para>
		</sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
