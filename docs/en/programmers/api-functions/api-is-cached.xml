<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<refentry id="api.is.cached">
 <refnamediv>
  <refname>is_cached</refname>
  <refpurpose></refpurpose>
 </refnamediv>
 <refsect1>
  <title />
  <methodsynopsis>
   <type>bool</type><methodname>is_cached</methodname>
   <methodparam><type>string</type><parameter>template</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>cache_id</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>compile_id</parameter></methodparam>
  </methodsynopsis>
  <para>
   This returns &true; if there is a valid cache for this template.
   This only works if <link
   linkend="variable.caching">caching</link> is set to true.
  </para>
  <example>
   <title>is_cached</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

if(!$smarty->is_cached("index.tpl")) {
// do database calls, assign vars here
}

$smarty->display("index.tpl");
?>
]]>
   </programlisting>
  </example>
  <para>
   You can also pass a cache id as an optional second parameter
   in case you want multiple caches for the given template.
  </para>
  <para>
   You can supply a compile id as an optional third parameter.
   If you omit that parameter the persistent 
   <link linkend="variable.compile.id">$compile_id</link> is used.
  </para>
  <para>
   If you do not want to pass a cache id but want to pass a compile
   id you have to pass <literal>null</literal> as cache id.
  </para>
  <example>
   <title>is_cached with multiple-cache template</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

if(!$smarty->is_cached("index.tpl", "FrontPage")) {
  // do database calls, assign vars here
}

$smarty->display("index.tpl", "FrontPage");
?>
]]>
   </programlisting>
  </example>


  <note>
  <title>Technical Note</title>
  <para>
   If <literal>is_cached</literal> returns true it actually loads the
   cached output and stores it internally. Any subsequent call to
   <link linkend="api.display">display()</link> or
   <link linkend="api.fetch">fetch()</link>
   will return this internally stored output and does not try to reload
   the cache file. This prevents a race condition that may occur when a
   second process clears the cache between the calls to is_cached and to
   display in the example above. This also means calls to
   <link linkend="api.clear.cache">clear_cache()</link>
   and other changes of the cache-settings may have no effect after
   <literal>is_cached</literal> returned true.
  </para>
  </note>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
