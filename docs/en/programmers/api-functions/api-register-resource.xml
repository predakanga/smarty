<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
        <sect1 id="api.register.resource">
         <title>register_resource</title>
         <funcsynopsis>
          <funcprototype>
           <funcdef>void <function>register_resource</function></funcdef>
           <paramdef>string <parameter>name</parameter></paramdef>
           <paramdef>array <parameter>resource_funcs</parameter></paramdef>
          </funcprototype>
         </funcsynopsis>
         <para>
          Use this to dynamically register a resource plugin with Smarty.
          Pass in the name of the resource and the array of PHP functions
          implementing it. See
          <link linkend="template.resources">template resources</link>
          for more information on how to setup a function for fetching
          templates.
         </para>
		 <note>
		 <title>Technical Note</title>
		 <para>
		 A resource name must be at least two characters in length. One
		 character resource names will be ignored and used as part of the file
		 path, such as $smarty->display('c:/path/to/index.tpl');
		 </para>
		 </note>
         <para>
          The php-function-array <parameter>resource_funcs</parameter>
          must have 4 or 5 elements. With 4 elements the elements are
          the functions-callbacks for the respective "source",
          "timestamp", "secure" and "trusted" functions of the
          resource. With 5 elements the first element has to be an
          object reference or a class name of the object or class
          implementing the resource and the 4 following elements have
          to be the method names implementing "source", "timestamp",
          "secure" and "trusted".
         </para>
<example>
<title>register_resource</title>
<programlisting role="php">
<![CDATA[
<?php
$smarty->register_resource("db", array("db_get_template",
                                       "db_get_timestamp",
                                       "db_get_secure",
                                       "db_get_trusted"));
?>
]]>
</programlisting>
</example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->