<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2594 Maintainer: takagi Status: ready -->
<!-- CREDITS: mat-sh,daichi,joe -->
 <sect1 id="caching.cacheable">
  <title>キャッシュ可能なプラグインの出力の制御</title>
  <para>
   Smarty 2.6.0 から、プラグインを登録する際にキャッシュ可能なプラグインを宣言する事が出来ます。 
   <link linkend="api.register.block"><varname>register_block()</varname></link>、
   <link linkend="api.register.compiler.function">
   <varname>register_compiler_function()</varname></link> および
   <link linkend="api.register.function"><varname>register_function()</varname></link>
   の第３パラメータは <parameter>$cacheable</parameter> と呼ばれ、デフォルトは
   &true; です。この時、Smarty 2.6.0 以前のプラグインの振る舞いになります。
  </para>
  <para>
   <literal>$cacheable=false</literal> であるプラグインが登録された時、
   プラグインはページがキャッシュから読まれる場合でもページを表示する度に呼ばれます。
   プラグイン関数は
   <link linkend="plugins.inserts"><varname>{insert}</varname></link>
   関数に少し似た振る舞いをします。
  </para>
  <para>
   <link linkend="plugins.inserts"><varname>{insert}</varname></link>
   とは対照的に、プラグインの属性はデフォルトではキャッシュされません。
   キャッシュするためには第４パラメータ <parameter>$cache_attrs</parameter>
   によって宣言します。<parameter>$cache_attrs</parameter>
   はキャッシュされるべき属性の名前を格納した配列であり、
   プラグイン関数はページがキャッシュから取り出される度に
   属性はキャッシュに記述されていたものとして値を取得します。
  </para>

  <example>
   <title>プラグインの出力がキャッシュされるのを防ぐ</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

function remaining_seconds($params, &$smarty) {
    $remain = $params['endtime'] - time();
    if($remain >= 0){
        return $remain . ' second(s)';
    }else{
        return 'done';
    }
}

$smarty->register_function('remaining', 'remaining_seconds', false, array('endtime'));

if (!$smarty->is_cached('index.tpl')) {
    // データベースから $obj を取り出して割り当てる
    $smarty->assign_by_ref('obj', $obj);
}

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    <filename>index.tpl</filename> は次のようになります。
   </para>
   <programlisting>
<![CDATA[
Time Remaining: {remaining endtime=$obj->endtime}
]]>
   </programlisting>
   <para>
    たとえページがキャッシュされていても <literal>$obj</literal>
    の endtime の秒数までは各ページの表示は変更されていきます。
    その後のリクエストでページがキャッシュに書かれている時、
    endtime 属性がキャッシュされたのでオブジェクトをデータベースから取り出す必要があるだけです。
   </para>
  </example>

  <example>
   <title>テンプレートの一節がキャッシュされるのを防ぐ</title>
   <programlisting role="php">
<![CDATA[
index.php:

<?php
$smarty->caching = 1;

function smarty_block_dynamic($param, $content, &$smarty) {
    return $content;
}
$smarty->register_block('dynamic', 'smarty_block_dynamic', false);

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    <filename>index.tpl</filename> は次のようになります。
   </para>
   <programlisting>
<![CDATA[
Page created: {'0'|date_format:'%D %H:%M:%S'}

{dynamic}

Now is: {'0'|date_format:'%D %H:%M:%S'}

... 他にも何か ...

{/dynamic}
]]>
   </programlisting>
  </example>

  <para>
   ページをリロードした時に、両方の日付が異なる点に注意して下さい。
   一つは <quote>dynamic</quote> であり、もう一つは <quote>static</quote> です。
   <literal>{dynamic}...{/dynamic}</literal> 間に含まれるコンテンツ全てを動的に生成する事ができ、
   残るコンテンツはキャッシュされない事を確認して下さい。
  </para>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
