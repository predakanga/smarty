<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
  <chapter id="language.basic.syntax">
   <title>Базовый синтаксис</title>
   <para>
    Все тэги шаблонов Smarty располагаются между специальными 
    разделителями. По умолчанию это <literal>{</literal> и
    <literal>}</literal>, но они могут быть изменены.
   </para>
   <para>
    Для наших примеров мы будем использовать стандартные разделители.
    Smarty все содержимое вне разделителей отображает как статическое 
    содержание, без изменений. Когда Smarty встречает тэги, то пытается
    интерпретировать их и вывести вместо них соответствующий результат.
   </para>

   <sect1 id="language.syntax.comments">
    <title>Комментарии</title>
    <para>
     Комментарии в шаблонах заключаются в звездочки(*) окруженные . 
     разделителями, например: {* это комментарий *}. Комментарии не 
     отображаются в выводе шаблона. Они используются для внутренних 
     примечаний в шаблонах.
    </para>
    <example>
     <title>Комментарии</title>
     <programlisting>
{* шаблон Smarty *}

{* подключаем шапку шаблона *}
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{* выпадающий список *}
&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
    </example>
   </sect1>

   <sect1 id="language.syntax.functions">
    <title>Функции</title>
    <para>
	 Каждый тэг Smarty либо выводит значение <link
	 linkend="language.variables">переменной</link>, либо вызывает 
	 некоторую функцию. Для вызова функции надо название функции и ее 
	 параметры заключить в разделители, например: {funcname attr1="val" 
	 attr2="val"}.
    </para>
    <example>
     <title>Синтаксис функций</title>
     <programlisting>
{config_load file="colors.conf"}

{include file="header.tpl"}

{if $highlight_name}
	Welcome, &lt;font color="{#fontColor#}"&gt;{$name}!&lt;/font&gt;	
{else}
	Welcome, {$name}!
{/if}

{include file="footer.tpl"}</programlisting>
    </example>
    <para>
     И встроенные, и пользовательские функции используются с одинаковым 
     синтаксисом. Встроенные функции реализованы внутри Smarty и не 
     могут быть изменены или переопределены. Это такие функции, как
     <command>if</command>, <command>section</command>,
     <command>strip</command>. Пользовательские функции реализуются через 
     плагины. Они могут быть изменены по вашему желанию, также вы можете 
     написать новые. Примеры пользовательских функций:
     <command>html_options</command>, <command>html_select_date</command>.
    </para>
   </sect1>

   <sect1 id="language.syntax.attributes">
    <title>Параметры</title>
    <para>
     Большинство функций принимает параметры, которые уточняют или
     изменяют ее поведение. Параметры в Smarty очень похожи на 
     параметры в HTML. Не обязательно заключать статические значения 
     в кавычки, хотя текст рекомендуется заключать в кавычки. Переменные 
     также могут быть использованы в качестве параметров, и не должны 
     заключаться в кавычки.
    </para>
    <para>
     Некоторые параметры принимают логические значения (правда или ложь).
     Они могут быть указаны словами <literal>true</literal>,
     <literal>on</literal>, и <literal>yes</literal>, или
     <literal>false</literal>, <literal>off</literal>, и
     <literal>no</literal> без кавычек.
    </para>
    <example>
     <title>Синтаксис параметров функции</title>
     <programlisting>
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{html_select_date display_days=yes}

&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
</example>
		</sect1>
   <sect1 id="language.syntax.quotes">
    <title>Внедренные переменные в двойных кавычках</title>
    <para>
    Smarty распознает переменные, если они встречаются в строках, 
    заключенных в двойные кавычки. Распознаются переменные,
    состоящие из чисел, букв, символов _,[,]. Если надо использовать 
    другие символы для указания переменной (точка или -&gt; (ссылка в 
    объект)), то переменная необходимо заключить в обратные кавычки ``.
    </para>
    <example>
     <title>Синтаксис внедренных переменных</title>
     <programlisting>
Пример синтаксиса:
{func var="test $foo test"}       &lt;-- ищет $foo
{func var="test $foo_bar test"}   &lt;-- ищет $foo_bar
{func var="test $foo[0] test"}    &lt;-- ищет $foo[0]
{func var="test $foo[bar] test"}  &lt;-- ищет $foo[bar]
{func var="test $foo.bar test"}   &lt;-- ищет $foo (не $foo.bar)
{func var="test `$foo.bar` test"} &lt;-- ищет $foo.bar

Практические примеры:
{include file="subdir/$tpl_name.tpl"} &lt;-- заменит $tpl_name на ее значение
{cycle values="one,two,`$smarty.config.myval`"} &lt;-- надо заключать в обратные кавычки</programlisting>
</example>
		</sect1>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
