<?xml version="1.0" encoding="windows-1251"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.10 Maintainer: freespace Status: ready -->
<sect1 id="language.function.capture">
 <title>capture</title>
 <para>
  {capture} используется для того, чтобы собрать результат работы шаблона
  в какую-то переменную, вместо того, чтобы вывести результат браузеру.
  Любое содержимое между {capture name="foo"} и {/capture} сохраняется в
  переменную, указанную в атрибуте name. Затем его можно использовать в
  шаблоне при помощи специальной переменной $smarty.capture.foo,
  где "foo" - значение, переданное атрибуту name. Если атрибут name не указан,
  то используется "default". Каждая комманда {capture} должна иметь пару
  {/capture}. Команда capture поддерживает вложенность.
 </para>

 <caution>
  <para>
   Будте осторожны, сохраняя вывод команды <link
   linkend="language.function.insert">{insert}</link>.
   Если вы используете <link linkend="caching">кэширование</link>
   и в области кэширования встречаются команды
   <command>insert</command>, то не сохраняйте данный вывод.
  </para>
 </caution>
 <para>
  <example>
   <title>Сохранение вывода шаблона</title>
   <programlisting>
<![CDATA[
{* мы не хотим выводить строку таблицы, если содержимое не отображается *}
{capture name=banner}
  {include file='get_banner.tpl'}
{/capture}
{if $smarty.capture.banner ne ''}
<table>
    <tr>
        <td>
 			        {$smarty.capture.banner}
		      </td>
	   </tr>
</table>
{/if}
]]>
   </programlisting>
  </example>
  
  <example>
   <title>сохранение содержимого в переменную</title>
   <para>
    Этот пример также демонстрирует функцию
    <link linkend="language.function.popup">{popup}</link>
   </para>
   <programlisting>
<![CDATA[
{capture name=some_content assign=popText}
    .... some content ....
{/capture}

<a href="#" {popup caption='Help' text=$popText}>help</a>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  См. также
  <link linkend="language.variables.smarty.capture">$smarty.capture</link>,
  <link linkend="language.function.eval">{eval}</link>,
  <link linkend="language.function.fetch">{fetch}</link>,
  <link linkend="api.fetch">fetch()</link>
  и <link linkend="language.function.assign">{assign}</link>.
 </para>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

