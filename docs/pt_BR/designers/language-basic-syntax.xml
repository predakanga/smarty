<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
  <chapter id="language.basic.syntax">
   <title>Sintaxe Básica</title>
   <para>
    Todas as tags de template do Smarty estão fechadas com delimitadores.
    Por padrão, estes delimitadores são <literal>{</literal> e
    <literal>}</literal>, mas eles podem ser mudados.
   </para>
   <para>
    Para estes exemplos, nós iremos assumir que você está usando os
    delimitadores padrão. No Smarty, todo o conteúdo fora dos delimitadores é
    mostrado como conteúdo estatico, ou sem modificações. Quando o Smarty encontra
    tags de template, ele tenta interpreta-las, e então mostra a saída
    apropriada em seu lugar.
   </para>

   <sect1 id="language.syntax.comments">
    <title>Comentários</title>
    <para>
     Comentários de template são cercados por asteriscos, e são cercados por
     delimitadores, assim: {* este é um comentário *}.
     Comentários Smarty não são mostrado na saída final do template.
     Eles são usados para fazer notas internas nos templates.
    </para>
    <example>
     <title>Comentários</title>
     <programlisting>
{* Smarty *}

{* inclui o arquivo header aqui *}
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{* Mostra listas dropdown *}
&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
    </example>
   </sect1>

   <sect1 id="language.syntax.functions">
    <title>Funções</title>
    <para>
     Cada tag Smarty mostra uma
     <link linkend="language.variables">variável</link> ou utiliza algum tipo de
     função. Funções são processadas e mostradas colocando-se a função e seus
     atributos entre delimitadores, assim: {funcname
     attr1="val" attr2="val"}.
    </para>
    <example>
     <title>Sintaxe de funções</title>
     <programlisting>
{config_load file="colors.conf"}

{include file="header.tpl"}

{if $highlight_name}
	Welcome, &lt;font color="{#fontColor#}"&gt;{$name}!&lt;/font&gt;
{else}
	Welcome, {$name}!
{/if}

{include file="footer.tpl"}</programlisting>
    </example>
    <para>
     Ambas as funções internas e as funções customizadas tem a mesma sintaxe nos
     templates. Funções internas são o funcionamento do Smarty,
     assim como <command>if</command>, <command>section</command> e
     <command>strip</command>. Elas não podem ser modificadas. Funções customizadas
     são funções adicionais implementadas por plugins. Elas podem ser modificadas
     como você quiser, ou você pode adionar novas. <command>html_options</command> e
     <command>html_select_date</command> são exemplos de funções customizadas.
    </para>
   </sect1>

   <sect1 id="language.syntax.attributes">
    <title>Atributos</title>
    <para>
     A maioria das funções levam atributos que especificam ou modificam o seu
     funcionamento. Atributos para funções Smarty são muito parecidos como
     atributos HTML. Valores estáticos são precisam estar entre aspas,
     mas é recomendados para strings literais. Variáveis também podem ser
     usadas, e não precisam estar entre aspas.
    </para>
    <para>
     Alguns atributos requerem valores booleanos (true ou false). Estes podem
     ser especificados sem aspas <literal>true</literal>,
     <literal>on</literal>, e <literal>yes</literal>, ou
     <literal>false</literal>, <literal>off</literal>, e
     <literal>no</literal>.
    </para>
    <example>
     <title>Sintaxe de atributos de funções</title>
     <programlisting>
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{html_select_date display_days=yes}

&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
</example>
	</sect1>
   <sect1 id="language.syntax.quotes">
    <title>Colocando Variáveis em Aspas Duplas</title>
    <para>
    Smarty irá reconhecer variáveis entre aspas duplas enquanto
    as variáveis conterem apenas números, letras, sublinhados e conchetes
    []. Com qualquer outro caractere (pontos, referencia de objetos, etc.) as variáveis
    devem estar entre apóstrofos.
    </para>
    <example>
     <title>Sintaxe entre aspas</title>
     <programlisting>
EXEMPLOS DE SINTAXE:
{func var="test $foo test"}       &lt;-- vê $foo
{func var="test $foo_bar test"}   &lt;-- vê $foo_bar
{func var="test $foo[0] test"}    &lt;-- vê $foo[0]
{func var="test $foo[bar] test"}  &lt;-- vê $foo[bar]
{func var="test $foo.bar test"}   &lt;-- vê $foo (not $foo.bar)
{func var="test `$foo.bar` test"} &lt;-- vê $foo.bar

EXEMPLOS PRATICOS:
{include file="subdir/$tpl_name.tpl"} &lt;-- irá substituir $tpl_name com o valor
{cycle values="one,two,`$smarty.config.myval`"} &lt;-- deve ter apóstrofos</programlisting>
</example>
		</sect1>
   <sect1 id="language.math">
    <title>Matemática</title>
    <para>
    Matemática pode ser aplicada diretamente em valores de variáveis.
    </para>
    <example>
     <title>Exemplos de matemática</title>
     <programlisting>
{$foo+1}

{$foo*$bar}

{* alguns exemplos mais complicados *}

{$foo-&gt;bar-$bar[1]*$baz-&gt;foo-&gt;bar()-3*7}

{if ($foo+$bar.test%$baz*134232+10+$b+10)}

{$foo|truncate:"`$fooTruncCount/$barTruncFactor-1`"}

{assign var="foo" value="`$foo+$bar`"}</programlisting>
</example>
	</sect1>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->