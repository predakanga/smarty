<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.3 Maintainer: gerald Status: partial -->
<sect1 id="api.is.cached">
 <title>is_cached</title>
 <funcsynopsis>
  <funcprototype>
   <funcdef>void <function>is_cached</function></funcdef>
   <paramdef>string <parameter>template</parameter></paramdef>
   <paramdef>[string <parameter>cache_id</parameter>]</paramdef>
  </funcprototype>
 </funcsynopsis>
 <para>
  Retourne vrai s'il y a un fichier de cache valide pour ce template.
  Cela fonctionne seulement si <link
  linkend="variable.caching">caching</link> est a vrai.
 </para>
 <example>
  <title>is_cached</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

if(!$smarty->is_cached("index.tpl")) {
//aucun appel à la base de donnée
}

$smarty->display("index.tpl");
?>
]]>
   </programlisting>
 </example>
  <para>
  Vous pouvez aussi passer en second paramètre un identifiant
  de cache au cas oú vous voudriez plusieurs fichiers de cache
  pour ce template.
  </para>
  <para>
   Vous pouvez donner un identifiant de compilation en tant que troisième paramètre.
   Si vous ne spécifiez pas ce paramètre, le <link linkend="variable.compile.id">$compile_id</link>
   persistant sera utilisé.
  </para>
  <para>
   Si vous voulez utiliser un identifiant de compilation sans utilisez d'identifiant de cache, 
   mettez <literal>null</literal> pour l'identifiant de cache.
  </para>
 <example>
   <title>is_cached avec plusieurs templates</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

if(!$smarty->is_cached("index.tpl", "FrontPage")) {
  //appel de la base de données, assignation des variables
}

$smarty->display("index.tpl", "FrontPage");
?>
]]>
   </programlisting>
 </example>
  <note>
  <title>Note technique</title>
  <para>
   Si <literal>is_cached</literal> retourne vrai, il charge en fait le cache existant et 
   le stocke en interne.  Tout appel supplémentaire à  <link linkend="api.display">display()</link> ou
   <link linkend="api.fetch">fetch()</link> retournera ce contenu stocké en interne
   sans tenter de recharger le fichier en cache. Cela évite des problématiques d'accès concurents, 
   lorsqu'un second processus efface le cache entre l'appel de is_cached et l'appel à display dans 
   l'un de nos exemples ci-dessus. Cela signifie également que les appels à <link linkend="api.clear.cache">clear_cache()</link>
   et les changements de paramètres du cache peuvent n'avoir aucun effet alors que <literal>is_cached</literal> 
   à retourné vrai.
  </para>
  </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
