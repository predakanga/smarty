<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.16 Maintainer: gerald Status: ready -->
<chapter id="language.modifiers">
 <title>Modificateurs de variables</title>
 <para>
  Les modificateurs de variables peuvent être appliqués aux variables,
  fonctions utilisateurs ou chaînes de caractères. Pour appliquer un modificateur
  de variable, tappez une valeure suivie de <literal>|</literal>
  (pipe) et du nom du modificateur. Un modificateur de variable
  est succeptible d'accepter des paramètres additionnels, qui en affectent
  le comportement. Ces paramètres suivent le nom du modificateur et
  sont séparés par un <literal>:</literal> (deux points).
 </para>
 <example>
  <title>Exemple de modificateur</title>
  <programlisting>
<![CDATA[
{* applique un modificateur à une variable *}
{$titre|upper}

{* modificateur avec paramètres *}
{$titre|truncate:40:"..."}

{* applique un modificateur à un paramètre de fonction *}
{html_table loop=$mavariable|upper}
{* avec paramètres *}
{html_table loop=$mavariable|truncate:40:"..."}

{* applique un modificateur à une chaine de caractères *}
{"foobar"|upper}

{* utilise date_format pour mettre en forme la date *}
{$smarty.now|date_format:"%d/%m/%Y"}

{* applique un modificateur à une fonction utilisateur *}
{mailto|upper address="moi@domaine.dom"}
]]>
  </programlisting>
 </example>
 <para>
  Si vous appliquez un modificateur de variable à un tableau plutôt qu'à une
  variable simple, le modificateur sera appliqué à chaque valeur du tableau.
  Si vous souhaitez que le modificateur travaille réellement avec le tableau
  en tant que tel, vous devez préfixer le nom du modificateur avec un symbole
  <literal>@</literal> comme ceci: <literal>{$titreArticle|@count}</literal>
  (Affiche le nombre d'élements du tableau $titreArticle.)
 </para>
  <para>
  Les modificateurs sont chargés automatiquement depuis votre répertoire 
  de plugin <link linkend="variable.plugins.dir">$plugins_dir</link> (voir aussi:
  <link linkend="plugins.naming.conventions">convention de nommage</link>) 
  ou peuvent être enregistrés explicitement (voir: <link
  linkend="api.register.modifier">register_modifier</link>). 
  De même, toutes les fonction php peuvent être utilisées comme modificateur, 
  sans autre déclaration. (L'exemple avec 
  <literal>@count</literal> ci dessus utilise la fonction count, et non un modificateur
  Smarty. Utiliser des fonctions PHP en tant que modificateur comporte deux 
  risques: Premièrement: il arrive que l'ordre des paramètres ne soit pas
  celui attendu (<literal>{"%2.f"|sprintf:$float}</literal> fonctionne,
  mais demande une syntaxe plus naturelle, par exemple<literal>{$float|string_format:"%2.f"}</literal>
  fourni dans la distribution Smarty). Deuxièmement : lorsque <link
  linkend="variable.security">$security</link> est activé, les fonctions php
  utilisées en tant que modificateur doivent être explicitement déclarées 
  comme connues dans le tableau <link linkend="variable.security.settings">
  $security_settings['MODIFIER_FUNCS']</link>.
 </para>

 &designers.language-modifiers.language-modifier-cat;
 &designers.language-modifiers.language-modifier-capitalize;
 &designers.language-modifiers.language-modifier-count-characters;
 &designers.language-modifiers.language-modifier-count-paragraphs;
 &designers.language-modifiers.language-modifier-count-sentences;
 &designers.language-modifiers.language-modifier-count-words;
 &designers.language-modifiers.language-modifier-date-format;
 &designers.language-modifiers.language-modifier-default;
 &designers.language-modifiers.language-modifier-escape;
 &designers.language-modifiers.language-modifier-indent;
 &designers.language-modifiers.language-modifier-lower;
 &designers.language-modifiers.language-modifier-nl2br;
 &designers.language-modifiers.language-modifier-regex-replace;
 &designers.language-modifiers.language-modifier-replace;
 &designers.language-modifiers.language-modifier-spacify;
 &designers.language-modifiers.language-modifier-string-format;
 &designers.language-modifiers.language-modifier-strip;
 &designers.language-modifiers.language-modifier-strip-tags;
 &designers.language-modifiers.language-modifier-truncate;
 &designers.language-modifiers.language-modifier-upper;
 &designers.language-modifiers.language-modifier-wordwrap;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
