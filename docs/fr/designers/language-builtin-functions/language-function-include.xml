<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.2 Maintainer: gerald Status: ready -->
<sect1 id="language.function.include">
 <title>include</title>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>file</entry>
     <entry>chaîne de caractères</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom du template à inclure</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>chaîne de caractères</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la variable dans laquelle sera assignée
     la sortie de include</entry>
    </row>
    <row>
     <entry>[var ...]</entry>
     <entry>[type de variable]</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Variables à passer au template</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Les balises "include" sont utilisées pour inclure des templates à
  l'intérieur d'autres templates. Toutes les variables disponibles
  dans le template réalisant l'inclusion sont disponibles dans le
  template inclus. La balise include doit disposer de l'attribut
  "file", qui contient le chemin de la ressource template.
 </para>
 <para>
  Vous pouvez spécifier un attribut optionnel <emphasis>assign</emphasis>
  qui définit une variable de template dans laquelle la sortie de
  <emphasis>include</emphasis> sera stockée plutôt qu'affichée.
 </para>
 <example>
  <title>fonction include</title>
<programlisting>
{include file="header.tpl"}

{* Le corp du template va ici *}

{include file="footer.tpl"}</programlisting>
 </example>
 <para>
  Vous pouvez également passer des variables au template inclus
  sous forme d'attributs. Les variables passées au template par ce moyen
  ne sont accessibles que dans la portée de ce dernier. Les variables
  passées en tant qu'attribut remplacent les variables déjà définies,
  qui auraient le même nom.
 </para>
 <example>
  <title>fonction include, passage de variables</title>
<programlisting>
{include file="header.tpl" title="Menu principal" table_bgcolor="#c0c0c0"}

{* Le corps du template vient ici *}

{include file="footer.tpl" logo="http://mon.example.com/logo.gif"}</programlisting>
 </example>
 <para>
  Utilisez la syntaxe <link
  linkend="template.resources">ressource template</link> pour inclure
  des fichiers situés en dehors du répertoire $template_dir.
 </para>
 <example>
  <title>fonction include, exemple de ressource template</title>
<programlisting>
{* chemin absolu *}
{include file="/usr/local/include/templates/header.tpl"}

{* chemin absolu (même chose) *}
{include file="file:/usr/local/include/templates/header.tpl"}

{* chemin absolu windows (DOIT utiliser le préfixe "file:") *}
{include file="file:C:/www/pub/templates/header.tpl"}

{* inclusion d'une ressource template "db" *}
{include file="db:header.tpl"}</programlisting>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
