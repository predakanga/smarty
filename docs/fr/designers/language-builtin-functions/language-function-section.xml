<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
		<sect1 id="language.function.section">
			<title>section,sectionelse</title>
            <informaltable frame="all">
                <tgroup cols="5">
                <colspec colname="param" align="center" />
                <colspec colname="type" align="center" />
                <colspec colname="required" align="center" />
                <colspec colname="default" align="center" />
                <colspec colname="desc" />
                <thead>
                    <row>
                        <entry>Nom attribut</entry>
                        <entry>Type</entry>
                        <entry>Requis</entry>
                        <entry>Defaut</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>name</entry>
                        <entry>chaîne de caractère</entry>
                        <entry>Oui</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>Le nom de la section</entry>
                    </row>
                    <row>
                        <entry>loop</entry>
                        <entry>[$nom_variable]</entry>
                        <entry>Oui</entry>
                        <entry><emphasis>n/a</emphasis></entry>
                        <entry>le nom de la variable qui détermine le nombre de
                        fois que la boucle sera exécutée.
                        </entry>
                    </row>
                    <row>
                        <entry>start</entry>
                        <entry>entier</entry>
                        <entry>Non</entry>
						<entry><emphasis>0</emphasis></entry>
                  <entry>La position de l'index ou la section commencera son
                  parcours. Si la valeur donnée est négative, la position de
                  départ est calculée depuis la fin du tableau. Par exemple,
                  s'il existe 7 valeurs dans le tableau à parcourir et que start
                  est à -2, l'index de départ sera 5. Les valeurs incorrectes
                  (en dehors de la portée du tableau) sont automatiquements
                  tronquées à la valeur correcte la plus proche.</entry>
                    </row>
                    <row>
                        <entry>step</entry>
                        <entry>entier</entry>
                        <entry>Non</entry>
                        <entry><emphasis>1</emphasis></entry>
						<entry>La valeur du pas qui sera utilisé pour parcourir le
                  tableau.Par exemple, step=2 parcourera les indices
						0,2,4, etc. Si step est négatif, le tableau sera parcouru en sens
                  inverse.</entry>
                    </row>
                    <row>
                        <entry>max</entry>
                        <entry>entier</entry>
                        <entry>Non</entry>
                        <entry><emphasis>1</emphasis></entry>
						<entry>Définit le nombre maximum de fois que le tableau sera
                  parcouru.</entry>
                    </row>
                    <row>
                        <entry>show</entry>
                        <entry>booléen</entry>
                        <entry>Non</entry>
                        <entry><emphasis>true</emphasis></entry>
                        <entry>Détermine s'il est nécessaire d'afficher la
                        section ou non.</entry>
                    </row>
                </tbody>
                </tgroup>
            </informaltable>
			<para>
            Les balises <emphasis>section</emphasis> sont utilisées pour
            parcourir un tableau de données. Toutes les balises
            <emphasis>section</emphasis> doivent être utilisées de paire avec
            les balises <emphasis>/section</emphasis>. Les paramètres requis
            sont <emphasis>name</emphasis> et <emphasis>loop</emphasis>.
            Le nom de la section est, selon votre choix, composé de lettres,
            chiffres et underscores. Les sections peuvent être imbriquées,
            mais leurs noms doivent être uniques. La variable de parcours
            (généralement un tableau de données) détermine le nombre de fois
            que la section sera parcourue. Lorsque l'on affiche une variable
            dans une section, le nom de la section doit précéder
            la variable entre crochets. <emphasis>sectionelse</emphasis>
            est exécuté lorsqu'aucune valeur n'est trouvée dans la variable à
            parcourir.
			</para>
<example>
<title>section</title>
<programlisting>

{* Cet exemple va afficher toutes les valeurs du tableau $custid *}
{section name=client loop=$custid}
	id: {$custid[client]}&lt;br&gt;
{/section}

SORTIE:

id: 1000&lt;br&gt;
id: 1001&lt;br&gt;
id: 1002&lt;br&gt;</programlisting>
</example>

<example>
<title>section, variable de parcours</title>
<programlisting>
{* La variable de parcours détermine uniquement le nombre de fois que nous allons
   rentrer dans la boucle. Vous pouvez accéder à toutes les variables du template
   lorsque vous êtes dans une section. Cet exemple part du principe que
   $idClient, $noms et $adresses sont tous des tableaux qui contiennent
   autant de valeurs les uns que les autres.*}
{section name=client loop=$custid}
	id: {$idClient[client]}&lt;br&gt;
	nom: {$noms[client]}&lt;br&gt;
	addresse: {$addresses[client]}&lt;br&gt;
	&lt;p&gt;
{/section}


SORTIE:

id: 1000&lt;br&gt;
nom: John Smith&lt;br&gt;
addresse: 253 N 45th&lt;br&gt;
&lt;p&gt;
id: 1001&lt;br&gt;
nom: Jack Jones&lt;br&gt;
addresse: 417 Mulberry ln&lt;br&gt;
&lt;p&gt;
id: 1002&lt;br&gt;
nom: Jane Munson&lt;br&gt;
addresse: 5605 apple st&lt;br&gt;
&lt;p&gt;</programlisting>
</example>

<example>
<title>nom de section</title>
<programlisting>
{* Le nom de la section peut être ce que vous voulez,
   et est utilisé pour référencer les données depuis la section. *}
{section name=monTableau loop=$idClient}
	id: {$idCLient[monTableau]}&lt;br&gt;
	name: {$noms[monTableau]}&lt;br&gt;
	address: {$addresses[monTableau]}&lt;br&gt;
	&lt;p&gt;
{/section}</programlisting>
</example>

<example>
<title>sections imbriquées</title>
<programlisting>
{* Les sections peuvent être imbriquées à un nombre de niveaux illimité.
   Grâce aux sections imbriquées, vous pouvez accéder à des structures de données
   complexes, comme des tableaux multi-dimentionnels. Dans cet exemple,
   $type_contact[client] est un tableau de type de contact pour le client
   courant. *}
{section name=client loop=$custid}
	id: {$idClient[client]}&lt;br&gt;
	nom: {$nom[client]}&lt;br&gt;
	addresse: {$addresse[client]}&lt;br&gt;
	{section name=contact loop=$type_contact[client]}
		{$type_contact[client][contact]}: {$info_contact[client][contact]}&lt;br&gt;
	{/section}
	&lt;p&gt;
{/section}


SORTIE:

id: 1000&lt;br&gt;
nom: John Smith&lt;br&gt;
addresse: 253 N 45th&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
telephone portable: 555-555-5555&lt;br&gt;
e-mail: john@mydomain.com&lt;br&gt;
&lt;p&gt;
id: 1001&lt;br&gt;
nom: Jack Jones&lt;br&gt;
addresse: 417 Mulberry ln&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
telephone portable: 555-555-5555&lt;br&gt;
e-mail: jack@mydomain.com&lt;br&gt;
&lt;p&gt;
id: 1002&lt;br&gt;
nom: Jane Munson&lt;br&gt;
addresse: 5605 apple st&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
telephone portable: 555-555-5555&lt;br&gt;
e-mail: jane@mydomain.com&lt;br&gt;
&lt;p&gt;</programlisting>
</example>

<example>
<title>Sections et tableaux associatifs</title>
<programlisting>
{* Exemple d'affichage d'un tableau associatif dans une section *}
{section name=client loop=$contacts}
	nom: {$contacts[client].name}&lt;br&gt;
	telephone: {$contacts[client].home}&lt;br&gt;
	portable: {$contacts[client].cell}&lt;br&gt;
	e-mail: {$contacts[client].email}&lt;p&gt;
{/section}


SORTIE:

nom: John Smith&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
portable: 555-555-5555&lt;br&gt;
e-mail: john@mydomain.com&lt;p&gt;
nom: Jack Jones&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
portable: 555-555-5555&lt;br&gt;
e-mail: jack@mydomain.com&lt;p&gt;
nom: Jane Munson&lt;br&gt;
telephone: 555-555-5555&lt;br&gt;
portable: 555-555-5555&lt;br&gt;
e-mail: jane@mydomain.com&lt;p&gt;</programlisting>
</example>



<example>
<title>sectionelse</title>
<programlisting>
{* sectionelse est exécuté s'il n'existe aucune valeur dans idClient *}
{section name=client loop=$idClient}
	id: {$idClient[client]}&lt;br&gt;
{sectionelse}
	Aucune valeur dans $idClient.
{/section}</programlisting>
</example>
		<para>
		Les sections ont leur propre variable de gestion des propriétés.
		Elles sont de la forme: {$smarty.section.nomSection.nomVariable}
		</para>
		<para>
		NOTE: Depuis Smarty 1.5.0, la syntaxe pour les propiétés des sections
      a été changée de {%sectionname.varname%} à
      {$smarty.section.nomSection.nomVariable}. L'ancienne syntaxe est toujours
      supportée, mais vous ne verrez que des exemples avec la nouvelle syntaxe
      dans le manuel.
		</para>
			<sect2 id="section.property.index">	
			<title>index</title>
			<para>
			Index est utilisé pour afficher l'index de parcours courant, commence par
			0 (ou l'attribut start), et s'incrémente de 1 (ou de la valeur
         de l'attribut step).
			</para>
			<note>
				<title>Note technique</title>
				<para>
				Si les attributs step et start ne sont pas modifiés, alors index
            fonctionne de la même façon que iteration, à l'exception qu'il commence
            par 0 plutôt que par 1.
				</para>
			</note>
	<example>
	<title>propriété de section index</title>
	<programlisting>
	{section name=client loop=$idClient}
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{/section}


	SORTIE:

	0 id: 1000&lt;br&gt;
	1 id: 1001&lt;br&gt;
	2 id: 1002&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.index.prev">	
			<title>index_prev</title>
			<para>
			index_prev est utilisé pour afficher l'index de parcours
         précédent de la boucle. Au premier passage, il vaut -1.
			</para>
	<example>
	<title>propriété de section index_prev</title>
	<programlisting>
	{section name=client loop=$custid}
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{* Pour votre information, $idClient[client.index] and $idClient[client] sont identiques *}
	{if $idClient[client.index_prev] ne $idClient[client.index]}
    	L'id du client à été modifié&lt;br&gt;
	{/if}
	{/section}


	SORTIE:

	0 id: 1000&lt;br&gt;
    	L'id du client à été modifié&lt;br&gt;
	1 id: 1001&lt;br&gt;
    	L'id du client à été modifié&lt;br&gt;
	2 id: 1002&lt;br&gt;
    	L'id du client à été modifié&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.index.next">
			<title>index_next</title>
			<para>
			index_next est utilisé pour afficher la valeur théorique suivante de
			index. Dans la dernière boucle, cela reste la valeur incrémentée,
			qui respecte l'attribut step si donné.
			</para>
	<example>
	<title>propriété de section index_next</title>
	<programlisting>
	{section name=client loop=$idClient}
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{* Pour votre information, $idClient[client.index] and $idClient[client] sont identiques *}
	{if $idClient[client.index_next] ne $idClient[client.index]}
    	L'id du client va changer&lt;br&gt;
	{/if}
	{/section}


	SORTIE:

	0 id: 1000&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
	1 id: 1001&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
	2 id: 1002&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.iteration">
			<title>iteration</title>
			<para>
			iteration est utilisé pour afficher la valeur courante de l'iteration.
			</para>
			<para>
			NOTE: Cette valeur n'est pas affectée par les attributs start, step et
			max, à l'inverse de la propriété index. L'itération commence par
			1 et non par 0 (comme le fait index). rownum est un alias de iteration,
			ils fonctionnent de la même façon.
			</para>
	<example>
	<title>propriété iteration de section</title>
	<programlisting>
	{section name=client loop=$idClient start=5 step=2}
	Iteration courante: {$smarty.section.client.iteration}&lt;br&gt;
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{* Pour votre information, $idClient[client.index] and $idClient[client] sont identiques *}
	{if $idCLient[client.index_next] ne $idClient[client.index]}
    	L'id du client va changer&lt;br&gt;
	{/if}
	{/section}


	SORTIE:

	Iteration courante: 1
	5 id: 1000&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
	Iteration courante: 2
	7 id: 1001&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
	Iteration courante: 3
	9 id: 1002&lt;br&gt;
    	L'id du client va changer&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.first">
			<title>first</title>
			<para>
			first est à true lorsque la section est parcouru pour la première fois.
			</para>
	<example>
	<title>propriété first de la section</title>
	<programlisting>
	{section name=client loop=$idClient}
	{if $smarty.section.client.first}
    	&lt;table&gt;
	{/if}

	&lt;tr&gt;&lt;td&gt;{$smarty.section.client.index} id:
        	{$idClient[client]}&lt;/td&gt;&lt;/tr&gt;

	{if $smarty.section.client.last}
    	&lt;/table&gt;
	{/if}
	{/section}


	SORTIE:

	&lt;table&gt;
	&lt;tr&gt;&lt;td&gt;0 id: 1000&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;1 id: 1001&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;2 id: 1002&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.last">
			<title>last</title>
			<para>
			last est à true lorsque la section est parcourue pour la dernière fois.
			</para>
	<example>
	<title>Propriété last de section</title>
	<programlisting>
	{section name=client loop=$idClient}
	{if $smarty.section.client.first}
    	&lt;table&gt;
	{/if}

	&lt;tr&gt;&lt;td&gt;{$smarty.section.client.index} id:
        	{$idClient[client]}&lt;/td&gt;&lt;/tr&gt;

	{if $smarty.section.client.last}
    	&lt;/table&gt;
	{/if}
	{/section}


	SORTIE:

	&lt;table&gt;
	&lt;tr&gt;&lt;td&gt;0 id: 1000&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;1 id: 1001&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;2 id: 1002&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.rownum">	
			<title>rownum</title>
			<para>
			rownum, utilisé pour afficher la valeur courante de l'itération,
			commence par 1. C'est un alias de iteration, ils fonctionnent de façon
			identique.
			</para>
	<example>
	<title>propriété rownum de section</title>
	<programlisting>
	{section name=client loop=$idClient}
	{$smarty.section.client.rownum} id: {$idClient[client]}&lt;br&gt;
	{/section}


	SORTIE:

	1 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	3 id: 1002&lt;br&gt;
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.loop">	
			<title>loop</title>
			<para>
			loop est utilisé pour afficher la dernière valeur de index que cette
         section a utilisé. Peut être utilisé dans ou en dehors de la section.
			</para>
	<example>
	<title>Propriété de section index</title>
	<programlisting>
	{section name=client loop=$idClient}
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{/section}

	Il y eu {$smarty.section.client.loop} clients d'affichés.

	SORTIE:

	0 id: 1000&lt;br&gt;
	1 id: 1001&lt;br&gt;
	2 id: 1002&lt;br&gt;

	il y eu 3 clients d'affichés.
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.show">	
			<title>show</title>
			<para>
        	<emphasis>show</emphasis> est utilisé comme paramètre de section.
        	<emphasis>show</emphasis> est une valeur booléenne, true ou false.
          Si show est à "false", la section ne sera pas affichée. Si un
          sectionelse est présent, elle sera affiché.
			</para>
	<example>
	<title>section, attribut show</title>
	<programlisting>
	{* $show_client_info a pu être passé par le script PHP,
	 pour déterminer si oui ou non on souhaite afficher la section *}
	{section name=client loop=$idClient show=$show_client_info}
	{$smarty.section.client.rownum} id: {$idClient[client]}&lt;br&gt;
	{/section}

	{if $smarty.section.client.show}
	la section à été affichée.
	{else}
	la section n'a pas été affichée.
	{/if}


	SORTIE:

	1 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	3 id: 1002&lt;br&gt;

	la section à été affichée.
</programlisting>
	</example>
			</sect2>
			<sect2 id="section.property.total">	
			<title>total</title>
			<para>
			total est utilisé pour afficher le nombre d'itération que la section
			va exécuter. Peut être utilisé dans ou en dehors de la section.
			</para>
	<example>
	<title>section, propriété total</title>
	<programlisting>
	{section name=client loop=$idClient step=2}
	{$smarty.section.client.index} id: {$idClient[client]}&lt;br&gt;
	{/section}

	Il y eu {$smarty.section.client.total} clients affichés.

	SORTIE:

	0 id: 1000&lt;br&gt;
	2 id: 1001&lt;br&gt;
	4 id: 1002&lt;br&gt;

	Il y eu 3 clients affichés.
</programlisting>
	</example>
			</sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->