<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.10 Maintainer: gerald Status: ready -->

<sect1 id="language.function.capture">
 <title>{capture}</title>

 <para>
  {capture} est utilisé pour récupérer la sortie d'éléments dans une variable
  au lieu de les afficher. Tout contenu situé entre {capture
  name="foo"} et {/capture} est intercepté dans une variable dont le nom est
  spécifié dans l'attribut name. Le contenu capturé peut être utilisé dans
  le template par l'intermédiaire de la variable spéciale
  <link linkend="language.variables.smarty.capture">$smarty.capture.foo</link>
  où "foo" est la valeur de l'attribut name. Si vous ne donnez pas de valeur
  à l'attribut name, alors "default" est utilisé. Toutes les commandes
  {capture} doivent être utilisées de paire avec {/capture}. Vous pouvez
  imbriquer les demandes de captures.
 </para>

 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>name</entry>
     <entry>string</entry>
     <entry>non</entry>
     <entry><emphasis>default</emphasis></entry>
     <entry>Le nom du bloc capturé</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>string</entry>
     <entry>non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la variable à laquelle la sortie sera assignée</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <caution>
  <para>
   Faîtes attention lorsque vous interceptez la sortie de commandes <link
   linkend="language.function.insert">{insert}</link>.
   Si vous avez configuré le <link linkend="caching">cache</link> pour que ce
   dernier soit actif, et que vous avez des commandes <link
   linkend="language.function.insert">{insert}</link>
   supposées s'exécuter dans un contenu en cache, ne tentez pas de capturer
   ce contenu.
  </para>
 </caution>
 <para>
  <example>
   <title>Capturer le contenu d'un template.</title>
   <programlisting>
<![CDATA[
{* nous ne voulons afficher une ligne que si cette dernière est activé. *}
{capture name=banner}
  {include file='get_banner.tpl'}
{/capture}
{if $smarty.capture.banner ne ""}
<table>
<tr>
 <td>
  {$smarty.capture.banner}
 </td>
</tr>
</table>
{/if}
]]>
   </programlisting>
  </example>

  <example>
   <title>Capturer le contenu dans une variable</title>
   <para>Cet exemple démontre également la fonction
    <link linkend="language.function.popup">{popup}</link>
   </para>
   <programlisting>
<![CDATA[
{capture name=some_content assign=popText}
.... du contenu ....
{/capture}

<a href="#" {popup caption='Help' text=$popText}>help</a>
]]>
   </programlisting>
  </example>

 </para>
 <para>
  Voir aussi
  <link
   linkend="language.variables.smarty.capture">$smarty.capture</link>,
  <link linkend="language.function.eval">{eval}</link>,
  <link linkend="language.function.fetch">{fetch}</link>,
  <link linkend="api.fetch">fetch()</link> et
  <link linkend="language.function.assign">{assign}</link>.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->