<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.4 Maintainer: gerald Status: ready -->
<sect1 id="language.function.foreach">
 <title>foreach,foreachelse</title>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>from</entry>
     <entry>tableau</entry>
     <entry>oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le tableau à parcourir</entry>
    </row>
    <row>
     <entry>item</entry>
     <entry>chaîne de caractère</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la variable "élément courant"</entry>
    </row>
    <row>
     <entry>key</entry>
     <entry>chaîne de caractère</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la variable représentant la clef courante.</entry>
    </row>
    <row>
     <entry>name</entry>
     <entry>chaîne de caractère</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la boucle foreach, qui nous permettra
     d'accéder à ses propriétés.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Les boucles <emphasis>foreach</emphasis> sont une alternative aux boucles
  <link linkend="language.function.section"><emphasis>section</emphasis></link>.
  Les boucles <emphasis>foreach</emphasis>
  sont utilisées pour parcourir des tableaux associatifs simples.
  La syntaxe des boucles <emphasis>foreach</emphasis> est bien plus simple
  que celle des boucles <emphasis>section</emphasis>, mais en contrepartie,
  elles ne peuvent être utilisées que pour des tableaux associatifs simples.
  La balise <emphasis>foreach</emphasis> doit toujours être accompagnée
  de la balise <emphasis>/foreach</emphasis>. Les paramètres requis sont
  <emphasis>from</emphasis> et <emphasis>item</emphasis>. Le nom des boucles
  foreach doit être composés exclusivement de lettres,
  chiffres et underscores, selon vos préférences. Les boucles
  <emphasis>foreach</emphasis> peuvent être imbriquées.
  La variable <emphasis>from</emphasis> (généralement le tableau à
  parcourir) détermine le nombre de fois que <emphasis>foreach</emphasis>
  sera exécuté. <emphasis>foreachelse</emphasis> est exécuté si aucune
  valeur n'est présente dans la variable donnée à l'attribut
  <emphasis>from</emphasis>.
 </para>
 <example>
  <title>foreach</title>
  <programlisting>
<![CDATA[
{* Cet exemple affiche toutes les valeurs du tableau $custid *}
{foreach from=$custid item=curr_id}
  id: {$curr_id}<br />
{/foreach}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[

id: 1000<br />
id: 1001<br />
id: 1002<br />
]]>
  </screen>
 </example>

 <example>
  <title>foreach key</title>
  <programlisting>
<![CDATA[
{* key contient la clef de chaque élément parcouru

l'attribution des élément est de la forme:

$smarty->assign("contacts", array(array("tel" => "1", "fax" => "2", "portable" => "3"),
      array("tel" => "555-4444", "fax" => "555-3333", "portable" => "760-1234")));

*}

{foreach name=outer item=contact from=$contacts}
  {foreach key=key item=item from=$contact}
    {$key}: {$item}<br />
  {/foreach}
{/foreach}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
tel: 1<br />
fax: 2<br />
portable: 3<br />
tel: 555-4444<br />
fax: 555-3333<br />
portable: 760-1234<br />
]]>
  </screen>
 </example>

 <para>
  Les boucles Foreach ont également leurs propres variables qui gèrent les propriétés
  de foreach. Elles sont indiquées par : {$smarty.foreach.foreachname.varname} 
  où foreachname est le nom spécifié par l'attribut <emphasis>name</emphasis>
  de foreach.
 </para>

 <sect2 id="foreach.property.iteration">
  <title>iteration</title>
  <para>
   <emphasis>iteration</emphasis> est utilisé pour afficher l'itération de la boucle courante.
  </para>
  <para>
   <emphasis>iteration</emphasis> commence toujours par 1 et est incrémenté
   à chaque itération.
  </para>
 </sect2>

 <sect2 id="foreach.property.first">
  <title>first</title>
  <para>
   <emphasis>first</emphasis> est défini à true si l'itération courante de foreach est la première.
  </para>
 </sect2>

 <sect2 id="foreach.property.last">
  <title>last</title>
  <para>
   <emphasis>last</emphasis> est défini à true si l'itération courante de foreach est la dernière.
  </para>
 </sect2>

 <sect2 id="foreach.property.show">
  <title>show</title>
  <para>
   <emphasis>show</emphasis> est utilisé en tant que paramètre de foreach.
   <emphasis>show</emphasis> est un booléen (true ou false). 
   S'il vaut false, foreach ne sera pas affiché. Si foreachelse est présent,
   il sera affiché alternativement.
  </para>
  
 </sect2>
 <sect2 id="foreach.property.total">
  <title>total</title>
  <para>
   <emphasis>total</emphasis> est utilisé pour afficher le nombre d'itérations
   bouclées par ce foreach. Il peut être utilisé dans ou après le foreach.
  </para>
  <para>
   Voir aussi 
   <link linkend="language.function.section">{section}</link> et
   <link linkend="language.variables.smarty.loops">$smarty.foreach</link>.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
