<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
  <chapter id="language.variables">
   <title>Variables</title>
   <para>
   Smarty possède différents types de variables. Le type de ces variables dépend
   du symbole qui les préfixe, ou des symboles qui les entourent.
   </para>
   
   <para>
    Les variables de Smarty peuvent être soit affichées directement, soit utilisées
    comme arguments pour les fonctions et modificateurs, à l'intérieur d'expressions
    conditionnelles, etc.
    Pour afficher une variable, il suffit de l'entourer par des délimiteurs de
    telle sorte qu'elle soit la seule chose qu'ils contiennent. Exemple :
    <programlisting>
{$Nom}

{$Contacts[enreg].Telephone}

&lt;body bgcolor="{#bgcolor#}"&gt;</programlisting>
   </para>

   <sect1 id="language.assigned.variables">
    <title>Variables assignées depuis PHP</title>
    <para>
    Pour utiliser une variables assignées depuis PHP, il faut la préfixer par le
    symbole dollar <literal>$</literal>. Les variables asignées depuis un
    template grâce à la fonction <link linkend="language.function.assign">assign</link>
	 sont manipulées de la même façon.
    </para>
    <example>

     <title>Variables assignées</title>
<programlisting>
Bienvenue {$prenom}, heureux de voir que tu es arrivé ici.
&lt;p&gt;
La dernière connexion remonte au {$dateConnexionPrecedente}.

SORTIE:

Bienvenue Doug, heureux de voir que tu est arrivé ici.
&lt;p&gt;
La dernière connexion remonte au 11 janvier 2001.</programlisting>
</example>

		<sect2 id="language.variables.assoc.arrays">
			<title>Tableaux associatifs</title>
			<para>
			Vous pouvez également utiliser des variables sous forme de tableaux
         associatifs assignées depuis PHP en en spécifiant la clef,
         après le symbole '.' (point).
			</para>
<example>
<title>accéder aux variables de tableaux associatifs</title>
<programlisting>
index.php:

$smarty = new Smarty;
$smarty-&gt;assign('Contacts',
    array('fax' => '555-222-9876',
          'email' => 'zaphod@slartibartfast.com',
          'phone' => array('home' => '555-444-3333',
                           'cell' => '555-111-1234')));
$smarty-&gt;display('index.tpl');

index.tpl:

{$Contacts.fax}&lt;br&gt;
{$Contacts.email}&lt;br&gt;
{* you can print arrays of arrays as well *}
{$Contacts.phone.home}&lt;br&gt;
{$Contacts.phone.cell}&lt;br&gt;

SORTIE:

555-222-9876&lt;br&gt;
zaphod@slartibartfast.com&lt;br&gt;
555-444-3333&lt;br&gt;
555-111-1234&lt;br&gt;</programlisting>
</example>
		</sect2>
        <sect2 id="language.variables.array.indexes">
			<title>Tableaux indexés</title>
			<para>
         Vous pouvez utiliser des tableaux indexés de la même façon que vous le
         faites en PHP.
 			</para>
<example>
<title>Accès aux tableaux grâce à l'index</title>
<programlisting>
index.php:

$smarty = new Smarty;
$smarty-&gt;assign('Contacts',
    array('555-222-9876',
          'zaphod@slartibartfast.com',
          array('555-444-3333',
                '555-111-1234')));
$smarty-&gt;display('index.tpl');

index.tpl:

{$Contacts[0]}&lt;br&gt;
{$Contacts[1]}&lt;br&gt;
{* you can print arrays of arrays as well *}
{$Contacts[2][0]}&lt;br&gt;
{$Contacts[2][1]}&lt;br&gt;

SORTIE:

555-222-9876&lt;br&gt;
zaphod@slartibartfast.com&lt;br&gt;
555-444-3333&lt;br&gt;
555-111-1234&lt;br&gt;</programlisting>
</example>
		</sect2>
        <sect2 id="language.variables.objects">
			<title>Objets</title>
			<para>
			Les attributs des objets assignés depuis PHP peuvent être utilisées en
			en spécifiant le nom après le symbole '-&gt;'.
			</para>
<example>
<title>accéder aux attributs des objets</title>
<programlisting>
nom: {$person-&gt;name}&lt;br&gt;
email: {$person-&gt;email}&lt;br&gt;

SORTIE:

nom: Zaphod Beeblebrox&lt;br&gt;
email: zaphod@slartibartfast.com&lt;br&gt;</programlisting>
</example>
		</sect2>
       </sect1>

       <sect1 id="language.config.variables">
			<title>Variables chargées depuis des fichiers de configuration</title>
			<para>
          Les variables récupérées depuis un fichier de configuration sont utilisées
          entourées du symbole dièse (#), ou via la variable spéciale smarty
          <link
			 linkend="language.variables.smarty.config">$smarty.config</link>.
			</para>
<example>

<title>variables de fichiers de configuration</title>
<programlisting>
foo.conf:

pageTitle = "C'est le mien"
bodyBgColor = "#eeeeee"
tableBorderSize = "3"
tableBgColor = "#bbbbbb"
rowBgColor = "#cccccc"

index.tpl:

{config_load file="foo.conf"}
&lt;html&gt;
&lt;title&gt;{#pageTitle#}&lt;/title&gt;
&lt;body bgcolor="{#bodyBgColor#}"&gt;
&lt;table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}"&gt;
&lt;tr bgcolor="{#rowBgColor#}"&gt;
	&lt;td&gt;First&lt;/td&gt;
	&lt;td&gt;Last&lt;/td&gt;
	&lt;td&gt;Address&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;

index.tpl: (alternate syntax)

{config_load file="foo.conf"}
&lt;html&gt;
&lt;title&gt;{$smarty.config.pageTitle}&lt;/title&gt;
&lt;body bgcolor="{$smarty.config.bodyBgColor}"&gt;
&lt;table border="{$smarty.config.tableBorderSize}" bgcolor="{$smarty.config.tableBgColor}"&gt;
&lt;tr bgcolor="{$smarty.config.rowBgColor}"&gt;
	&lt;td&gt;First&lt;/td&gt;
	&lt;td&gt;Last&lt;/td&gt;
	&lt;td&gt;Address&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;


SORTIE: (same for both examples)

&lt;html&gt;
&lt;title&gt;C'est le mien&lt;/title&gt;
&lt;body bgcolor="#eeeeee"&gt;
&lt;table border="3" bgcolor="#bbbbbb"&gt;
&lt;tr bgcolor="#cccccc"&gt;
	&lt;td&gt;First&lt;/td&gt;
	&lt;td&gt;Last&lt;/td&gt;
	&lt;td&gt;Address&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</example>
			<para>
         Les variables de fichier de configuration ne peuvent être utilisés tant
         qu'elles n'ont pas été chargées. Cette procédure est expliquée
         plus loin dans le document, voir <command>config_load</command>.
			</para>
		</sect1>

        <sect1 id="language.variables.smarty">
         <title>Variable réservée {$smarty}</title>
         <para>
          La variable réservée {$smarty} peut être utilisée pour accéder à plusieurs
          variables spéciales du template. En voici la liste complète.
         </para>

         <sect2 id="language.variables.smarty.request">
          <title>Variables de requête</title>
          <para>
           Les variables de requête comme GET, POST, COOKIES, SERVER, ENVIRONNEMENT
           et SESSION peuvent être utilisées comme dans l'exemple suivant:
          </para>
          <example>

           <title>Afficher des variables de requête</title>
           <programlisting>
{* Affiche la valeur de page dans l'url (GET) http://www.domain.com/index.php?page=foo *}
{$smarty.get.page}

{* affiche la variable "page" récupérée depuis un formulaire (POST) *}
{$smarty.post.page}

{* affiche la valeur du cookie "utilisateur" *}
{$smarty.cookies.utilisateur}

{* affiche la variable serveur "SERVER_NAME" *}
{$smarty.server.SERVER_NAME}

{* affiche la variable d'environnement "PATH" *}
{$smarty.env.PATH}

{* affiche la variable de session PHP "id" *}
{$smarty.session.id}

{* affiche la variable "utilisateur" du regroupement de get/post/cookies/server/env *}
{$smarty.request.utilisateur}</programlisting>
</example>
		</sect2>

        <sect2 id="language.variables.smarty.now">
			<title>{$smarty.now}</title>
			<para>
			Le timestamp courant peut être récupéré grâce à {$smarty.now}.
			Le nombre obtenu correspond au nombre de secondes écoulées depuis
			Epoch (1 Janvier 1970) et peut être passé directement au modificateur
         de variable date à des fins d'affichage.
			</para>
<example>

<title>utilisation de {$smarty.now}</title>
<programlisting>
{* utilise le modificateur de variable date_format pour afficher la date et heure *}
{$smarty.now|date_format:"%d-%m-%Y %H:%M:%S"}</programlisting>
</example>
		</sect2>
        <sect2 id="language.variables.smarty.const">
			<title>{$smarty.const}</title>
			<para>
			Vous pouvez directement accéder aux constantes PHP.
			</para>
<example>

<title>Utiliser {$smarty.const}</title>
<programlisting>
{$smarty.const._MA_CONSTANTE_}</programlisting>
</example>
		</sect2>

		<sect2 id="language.variables.smarty.capture">
			<title>{$smarty.capture}</title>
			<para>
			La capture réalisée via {capture}..{/capture} peut être récupérée
			par l'intermédiaire de la variable {$smarty}. Voir la section
			sur <link linkend="language.function.capture">capture</link> pour un
      exemple à ce sujet.
			</para>
		</sect2>

		<sect2 id="language.variables.smarty.config">
			<title>{$smarty.config}</title>
			<para>
			La variable {$smarty} peut être utilisée pour désigner une variable
         d'un fichier de configuration. {$smarty.config.foo} est un synonyme de
         {#foo#}. Voir la section <link
         linkend="language.function.config.load">config_load</link>
         pour un exemple à ce sujet.
			</para>
		</sect2>

        <sect2 id="language.variables.smarty.loops">
			<title>{$smarty.section}, {$smarty.foreach}</title>
			<para>
			La variable {$smarty} peut être utilisée pour accéder aux propriétés
         des boucles 'section' et 'foreach'. Voir la documentation de
			<link linkend="language.function.section">section</link> et
			<link linkend="language.function.foreach">foreach</link>.
			</para>
		</sect2>

		<sect2 id="language.variables.smarty.template">
			<title>{$smarty.template}</title>
			<para>
             Cette variable contient le nom du template en cours de traitement.
			</para>
		</sect2>

		</sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->