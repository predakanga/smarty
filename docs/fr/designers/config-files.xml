<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
  <chapter id="config.files">
   <title>Fichiers de configuration</title>
   <para>
    Les fichiers de configuration sont un moyen interressant pour gérer
    des variables depuis un seul et même fichier. L'exemple le plus courant
    étant le schéma de couleurs du template. Normalement, pour changer le
    schéma de couleur d'une application, vous devriez aller
    dans chaque template et changer la couleur des éléments (ou les classes css).
    Avec un fichier de configuration, il vous est possible de conserver
    la couleur dans un seul endroit, puis de la mettre à jour une seule fois.
   </para>
   <example>
    <title>Exemple de fichier de configuration</title>
    <programlisting>
<![CDATA[
# variables globales
titrePage = "Menu principal"
bodyBgColor = #000000
tableBgColor = #000000
rowBgColor = #00ff00

[client]
titrePage = "Infos client"

[Login]
titrePage = "Login"
focus = "utilisateur"
Intro = """Une valeur qui tient sur
           plusieur lignes. Vous devez la placer
           entre trois guillemets."""

# hidden section
[.Database]
host=mon.domaine.com
db=ADDRESSBOOK
user=php-user
pass=foobar
]]>
    </programlisting>
   </example>
   <para>
    Les valeurs des variables de fichiers de configuration peuvent être entre
    guillemets, sans que cela soit nécessaire. Si vous vouler utiliser des
    valeurs sur plusieurs lignes, vous devrez les entourer de triples
    guillemets ("""). Vous pouvez insérer des commentaires dans les fichiers de
    configuration en utilisant une syntaxe quelquonque, non valide.
    Nous recommandons l'utilisation de <literal>#</literal> (dièse) en début
    de ligne.
   </para>
   <para>
    Cet exemple de fichier de configuration contient deux sections. Les noms des
    sections sont entourés de crochets []. Les noms de section peuvent être
    des chaînes, ne contenant aucun des symboles <literal>[</literal> et
    <literal>]</literal>. Dans notre exemple, les 4 variables du début sont
    des variables dites globales, qui ne sont pas contenue dans une section.
    Ces variables sont toujours chargées depuis le fichier de configuration.
    Si une section est chargée, alors toutes les variables de cette section
    ainsi que les variables globales sont chargées. Si une variable existe
    à la fois en tant que globale et à la fois en tant que variable de
    section, la variable de section est prioritaire.
    Si vous appelez deux variables dans une même section de la même façon,
    la dernière déclarée prime.
   </para>
   <para>
    Les fichiers de configuration sont chargés dans le template grâce à la
    fonction <command>config_load</command>.
   </para>
   <para>
    Vous pouvez masquer des variables ou des sections entières en préfixant
    le nom de la variable ou le nom de la section avec une virgule.
    Ce procédé est utile si votre application récupère ses données depuis
    plusieurs fichiers de configuration et récupère des données sensibles dont
    vos templates n'ont pas besoin. Si des tiers éditent des templates, vous
    êtes sûr que ces derniers n'accèderont pas à ces données de configuration
    en les chargeant depuis le template.
   </para>
  </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
