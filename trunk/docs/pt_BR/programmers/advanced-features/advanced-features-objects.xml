<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: ready -->   
<sect1 id="advanced.features.objects">
    <title>Objetos</title>
    <para>
     O Smarty permite acesso a objetos do PHP através de seus templates. Há duas formas de acessá-los.
     Uma forma é registrar objetos para o template, então os acessa via sintaxe similar a funções
      customizáveis. A outra forma é atribuir objetos para os templates e acessá-los como se fossem
       uma variável atribuída. O primeiro método tem uma sintaxe de template muito mais legal. E também
       mais segura, à medida que um objeto registrado pode ser restrito a certos métodos e
       propriedades. Entretanto, um objeto registrado não pode ser
       posto em loop ou ser atribuido em arrays de
       objetos, etc. O método que você escolher será determinado pelas suas necessidades, mas use o
       primeiro método se possível para 
       manter um mínimo de sintaxe no template.
    </para>
	<para>
    Se a segurança está habilitada, nenhum dos métodos privados ou funções podem acessados
	(começando com "_"). Se um método e propriedade de um mesmo nome existir, o método será
	usado.
	</para>
	<para>
	Você pode restringir os métodos e propriedades que podem ser acessados listando os em um array
	como o terceiro parâmetro de registração.
	</para>
	<para>
	Por definição, parâmetros passados para objetos através dos templates são passados da mesma
	forma que funções customizáveis os obtém. Um array associativo é passado como o primeiro parâmetro,
	 e o objeto smarty como o segundo. Se você quer que os parâmetros passados um de cada vez
	  por cada argumento como passagem de parâmetro de objeto tradicional, defina o quarto parâmetro 
	  de registração para falso.
	</para>
	<para>
	O quinto parâmetro opcional só tem efeito com <parameter>format</parameter> 
	sendo <literal>true</literal> e contém 
	uma lista de métods de ob que seriam tratados como
	blocos. Isso significa que estes métodos 
	tem uma tag de fechamento no template
	(<literal>{foobar->meth2}...{/foobar->meth2}</literal>) e
	os parâmetros para os métodos tem a mesma sinopse como os parâmetros para 
	block-function-plugins: Eles pegam 4 parâmetros
	<parameter>$params</parameter>,
	<parameter>$content</parameter>,
	<parameter>&amp;$smarty</parameter> e
	<parameter>&amp;$repeat</parameter> e eles também comportam-se como
	block-function-plugins.
	</para>
    <example>
     <title>usando um objeto registrado ou atribuído</title>
     <programlisting>
&lt;?php
// O objeto

class My_Object {
	function meth1($params, &amp;$smarty_obj) {
		return "this is my meth1";
	}
}

$myobj = new My_Object;
// registrando o objeto (será por referência)
$smarty->register_object("foobar",$myobj);
// Se você quer restringie acesso a certos métodos ou propriedades, liste-os 
$smarty->register_object("foobar",$myobj,array('meth1','meth2','prop1'));
// Se você quer usar o formato de parâmetro de objeto tradicional, passe um booleano de false
$smarty->register_object("foobar",$myobj,null,false);

// Você pode também atribuir objetos. Atribua por referência quando possível.
$smarty->assign_by_ref("myobj", $myobj);

$smarty->display("index.tpl");
?&gt;

TEMPLATE:

{* accessa nosso objeto registrado *}
{foobar->meth1 p1="foo" p2=$bar}

{* você pode também atribuir a saída *}
{foobar->meth1 p1="foo" p2=$bar assign="output"}
the output was {$output}

{* acessa nosso objeto atribuído *}
{$myobj->meth1("foo",$bar)}</programlisting>
    </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->