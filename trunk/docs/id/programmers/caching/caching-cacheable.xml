<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
 <sect1 id="caching.cacheable">
  <title>Mengontrol Plugins ynd Bisa Di-cache' Output</title>
  <para>
   Sejak plugin Smarty-2.6.0, plugins yang bisa di-cache dapat dideklarasikan
   saat meregistrasinya. Parameter ketiga pada 
   <link linkend="api.register.block"><varname>register_block()</varname></link>,
   <link linkend="api.register.compiler.function">
   <varname>register_compiler_function()</varname></link> dan <link
   linkend="api.register.function"><varname>register_function()</varname></link>
    disebut <parameter>$cacheable</parameter> dan standarnya &true; yang juga 
   merupakan tabiat plugins dalam Smarty versi sebelum 2.6.0
  </para>
  <para>
   Ketika meregistrasi sebuah plugin dengan <literal>$cacheable=false</literal>, plugin
   dipanggil setiap kali halaman ditampilkan, meskipun halaman berasal dari cache. 
   Fungsi plugin berlaku sedikit mirip fungsi 
   <link linkend="plugins.inserts"><varname>{insert}</varname></link>.
  </para>
  <para>
   Sebaliknya dari <link linkend="plugins.inserts"><varname>{insert}</varname>
   </link>
   atribut plugins standarnya tidak di-cache. Bisa dideklarasikan untuk di-cache
   dengan parameter keempat
   <parameter>$cache_attrs</parameter>. <parameter>$cache_attrs</parameter>
   adalah array nama-atribut yang harus di-cache, agar fungsi-plugin memperoleh
   nilai seperti pertama kali halaman dituliskan ke cache, setiap kali ia diambil
   dari cache.
  </para>

  <example>
   <title>Menghindari output plugin di-cache</title>
   <programlisting role="php">
<![CDATA[
<?php
$smarty->caching = true;

function remaining_seconds($params, &$smarty) {
    $remain = $params['endtime'] - time();
    if($remain >= 0){
        return $remain . ' second(s)';
    }else{
        return 'done';
    }
}

$smarty->register_function('remaining', 'remaining_seconds', false, array('endtime'));

if (!$smarty->is_cached('index.tpl')) {
    // ambil $obj dari db dan tempatkan...
    $smarty->assign_by_ref('obj', $obj);
}

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    di mana <filename>index.tpl</filename> adalah:
   </para>
   <programlisting>
<![CDATA[
Time Remaining: {remaining endtime=$obj->endtime}
]]>
   </programlisting>
   <para>
    Jumlah detik sampai endtime <literal>$obj</literal> dicapai, perubahan
    pada setiap tampilan halaman, meskipun bila halaman di-cache. Karena
    atribut endtime di-cache. obyek harus ditarik dari database ketika 
    halaman dituliskan ke cache tapi tidak pada permintaan halaman berikutnya.
   </para>
  </example>

  <example>
   <title>Menghindari seluruh bagian template di-cache</title>
   <programlisting role="php">
<![CDATA[
index.php:

<?php
$smarty->caching = 1;

function smarty_block_dynamic($param, $content, &$smarty) {
    return $content;
}
$smarty->register_block('dynamic', 'smarty_block_dynamic', false);

$smarty->display('index.tpl');
?>
]]>
   </programlisting>
   <para>
    where <filename>index.tpl</filename> is:
   </para>
   <programlisting>
<![CDATA[
Page created: {'0'|date_format:'%D %H:%M:%S'}

{dynamic}

Now is: {'0'|date_format:'%D %H:%M:%S'}

... do other stuff ...

{/dynamic}
]]>
   </programlisting>
  </example>

  <para>
   Ketika mengambil ulang halaman, anda akan mencatat bahwa kedua tanggal 
   berbeda. Satu <quote>dynamis</quote> dan satu <quote>statis</quote>. 
   Anda dapat melakukan apapun antara <literal>{dynamic}...{/dynamic}</literal> 
   dan pastikan ia tidak akan di-cache seperti bagian halaman lainnya.
  </para>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
