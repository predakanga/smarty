<?php
class Smarty_Internal_Templatelexer
{

    public $data;
    public $counter;
    public $token;
    public $value;
    public $node;
    public $line;
    public $type;
    private $state = 1;

    function __construct($data)
    {
        // set instance object
        self::instance($this); 
        $this->data = $data;
        $this->counter = 0;
        $this->line = 1;
        $this->smarty = Smarty::instance(); 
     }
    public static function &instance($new_instance = null)
    {
        static $instance = null;
        if (isset($new_instance) && is_object($new_instance))
            $instance = $new_instance;
        return $instance;
    } 


/*!lex2php
%input $this->data
%counter $this->counter
%token $this->token
%value $this->value
%line $this->line
php = /\<\?php.*\?\>/
ldels = /\{\s{1,}/
rdels = /\s{1,}\}/
ldel = /\{/
rdel = /\}/
fortag = /\{for\s+/
iftag = /\{if\s+/
elseiftag = /\{elseif\s+/
number = /\d+(\.\d+)?/
plus = /\+/
minus = /\-/
star = /\*/
slash = '\/'
percent = /\%/
openP = /\(/
closeP = /\)/
openB = /\[/
closeB = /]/
dollar = /\$/
dot = /\./
comma = /\,/
colon = /\:/
semicolon = /\;/
vert = /\|/
equal = /\=/
space = /[\s]+/
ptr = /\->/
aptr = /=>/
id = /\w+/
si_qstr = '\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\''
db_qstr = '""[^"\\\\]*(?:\\\\.[^"\\\\]*)*""'
equals = /\s*==\s*|\s+EQ\s+/
notequals = /\s*\!=\s*|\s+NE\s+/
greaterthan = /\s*\>\s*|\s+GT\s+/
lessthan = /\s*\<\s*|\s+LT\s+/
greaterequal = /\s*\>=\s*|\s+GE\s+/
lessequal = /\s*<=\s*|\s+LE\s+/
identity = /\s*===\s*/
not = /\!|\s+NOT\s+/
land = /\s+AND\s+|\s*\&\&\s*/
lor = /\s+OR\s+|\s*\|\|\s*/
other = /./
*/
/*!lex2php
%statename START
si_qstr {
  $this->token = Smarty_Internal_Templateparser::TP_SI_QSTR;
  $this->type = 'string';
}
db_qstr {
  $this->token = Smarty_Internal_Templateparser::TP_DB_QSTR;
  $this->type = 'string';
}
fortag{
  $this->token = Smarty_Internal_Templateparser::TP_FORTAG;
}
iftag{
  $this->token = Smarty_Internal_Templateparser::TP_IFTAG;
}
elseiftag{
  $this->token = Smarty_Internal_Templateparser::TP_ELSEIFTAG;
}
identity{
  $this->token = Smarty_Internal_Templateparser::TP_IDENTITY;
  $this->type = '"==="';
}
equals{
  $this->token = Smarty_Internal_Templateparser::TP_EQUALS;
  $this->type = '"=="';
}
notequals{
  $this->token = Smarty_Internal_Templateparser::TP_NOTEQUALS;
}
greaterequal{
  $this->token = Smarty_Internal_Templateparser::TP_GREATEREQUAL;
  $this->type = '">="';
}
lessequal{
  $this->token = Smarty_Internal_Templateparser::TP_LESSEQUAL;
  $this->type = '"<="';
}
greaterthan{
  $this->token = Smarty_Internal_Templateparser::TP_GREATERTHAN;
  $this->type = '">"';
}
lessthan{
  $this->token = Smarty_Internal_Templateparser::TP_LESSTHAN;
  $this->type = '"<"';
}
not{
  $this->token = Smarty_Internal_Templateparser::TP_NOT;
  $this->type = '"!"';
}
land {
  $this->token = Smarty_Internal_Templateparser::TP_LAND;
  $this->type = '"&&"';
}
lor {
  $this->token = Smarty_Internal_Templateparser::TP_LOR;
  $this->type = '"||"';
}
openP {
  $this->token = Smarty_Internal_Templateparser::TP_OPENP;
  $this->type = '"("';
}
closeP {
  $this->token = Smarty_Internal_Templateparser::TP_CLOSEP;
  $this->type = '")"';
}
openB {
  $this->token = Smarty_Internal_Templateparser::TP_OPENB;
  $this->type = '"["';
}
closeB {
  $this->token = Smarty_Internal_Templateparser::TP_CLOSEB;
  $this->type = '"]"';
}
ptr {
  $this->token = Smarty_Internal_Templateparser::TP_PTR;
  $this->type = '"->"';
}
aptr {
  $this->token = Smarty_Internal_Templateparser::TP_APTR;
  $this->type = '"=>"';
}
equal {
  $this->token = Smarty_Internal_Templateparser::TP_EQUAL;
  $this->type = '"="';
}
plus {
  $this->token = Smarty_Internal_Templateparser::TP_PLUS;
  $this->type = '"+"';
}
minus {
  $this->token = Smarty_Internal_Templateparser::TP_MINUS;
  $this->type = '"-"';
}
star {
  $this->token = Smarty_Internal_Templateparser::TP_STAR;
  $this->type = '"*"';
}
slash {
  $this->token = Smarty_Internal_Templateparser::TP_SLASH;
  $this->type = '"/"';
}
percent {
  $this->token = Smarty_Internal_Templateparser::TP_PERCENT;
  $this->type = '"%"';
}
space {
  $this->token = Smarty_Internal_Templateparser::TP_SPACE;
  $this->type = '" "';
}
ldels {
  $this->token = Smarty_Internal_Templateparser::TP_LDELS;
  $this->type = '"{"';
}
rdels {
  $this->token = Smarty_Internal_Templateparser::TP_RDELS;
  $this->type = '"}"';
}
ldel {
  $this->token = Smarty_Internal_Templateparser::TP_LDEL;
  $this->type = '"{"';
}
rdel {
  $this->token = Smarty_Internal_Templateparser::TP_RDEL;
  $this->type = '"}"';
}
number {
  $this->token = Smarty_Internal_Templateparser::TP_NUMBER;
  $this->type = 'number';
}
dollar {
  $this->token = Smarty_Internal_Templateparser::TP_DOLLAR;
  $this->type = '"$"';
}
semicolon {
  $this->token = Smarty_Internal_Templateparser::TP_SEMICOLON;
  $this->type = '";"';
}
colon {
  $this->token = Smarty_Internal_Templateparser::TP_COLON;
  $this->type = '":"';
}
vert {
  $this->token = Smarty_Internal_Templateparser::TP_VERT;
  $this->type = '"|"';
}
dot {
  $this->token = Smarty_Internal_Templateparser::TP_DOT;
  $this->type = '"."';
}
comma {
  $this->token = Smarty_Internal_Templateparser::TP_COMMA;
  $this->type = '","';
}
id {
  $this->token = Smarty_Internal_Templateparser::TP_ID;
  $this->type = 'identifier';
}
php {
  $this->token = Smarty_Internal_Templateparser::TP_PHP;
  $this->type = 'PHP code';
}
other {
  $this->token = Smarty_Internal_Templateparser::TP_OTHER;
}
*/
}
