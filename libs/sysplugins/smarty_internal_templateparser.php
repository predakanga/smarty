<?php
/**
* Smarty Internal Plugin Templateparser
*
* This is the template parser.
* It is generated from the internal.templateparser.y file
* @package Smarty
* @subpackage Compiler
* @author Uwe Tews
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 12 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 109 "smarty_internal_templateparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 14 "smarty_internal_templateparser.y"

    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    private $lex;
    private $internalError = false;

    function __construct($lex, $compiler) {
        // set instance object
        self::instance($this); 
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        if ($this->template->security && isset($this->smarty->security_handler)) {
              $this->sec_obj = $this->smarty->security_policy;
        } else {
              $this->sec_obj = $this->smarty;
        }
        $this->cacher = $this->template->cacher_object; 
        $this->compiler->has_variable_string = false;
				$this->compiler->prefix_code = array();
				$this->prefix_number = 0;
    }
    public static function &instance($new_instance = null)
    {
        static $instance = null;
        if (isset($new_instance) && is_object($new_instance))
            $instance = $new_instance;
        return $instance;
    }
    
#line 147 "smarty_internal_templateparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const TP_COMMENT                        =  1;
    const TP_PHP                            =  2;
    const TP_OTHER                          =  3;
    const TP_SHORTTAGEND                    =  4;
    const TP_SHORTTAGSTART                  =  5;
    const TP_XML                            =  6;
    const TP_LDEL                           =  7;
    const TP_RDEL                           =  8;
    const TP_DOLLAR                         =  9;
    const TP_ID                             = 10;
    const TP_EQUAL                          = 11;
    const TP_FOREACH                        = 12;
    const TP_PTR                            = 13;
    const TP_IF                             = 14;
    const TP_SPACE                          = 15;
    const TP_FOR                            = 16;
    const TP_SEMICOLON                      = 17;
    const TP_INCDEC                         = 18;
    const TP_AS                             = 19;
    const TP_APTR                           = 20;
    const TP_LDELSLASH                      = 21;
    const TP_INTEGER                        = 22;
    const TP_COMMA                          = 23;
    const TP_COLON                          = 24;
    const TP_UNIMATH                        = 25;
    const TP_OPENP                          = 26;
    const TP_CLOSEP                         = 27;
    const TP_QMARK                          = 28;
    const TP_MATH                           = 29;
    const TP_ANDSYM                         = 30;
    const TP_TYPECAST                       = 31;
    const TP_DOT                            = 32;
    const TP_BOOLEAN                        = 33;
    const TP_NULL                           = 34;
    const TP_SINGLEQUOTESTRING              = 35;
    const TP_QUOTE                          = 36;
    const TP_DOUBLECOLON                    = 37;
    const TP_AT                             = 38;
    const TP_HATCH                          = 39;
    const TP_OPENB                          = 40;
    const TP_CLOSEB                         = 41;
    const TP_VERT                           = 42;
    const TP_NOT                            = 43;
    const TP_ISIN                           = 44;
    const TP_ISDIVBY                        = 45;
    const TP_ISNOTDIVBY                     = 46;
    const TP_ISEVEN                         = 47;
    const TP_ISNOTEVEN                      = 48;
    const TP_ISEVENBY                       = 49;
    const TP_ISNOTEVENBY                    = 50;
    const TP_ISODD                          = 51;
    const TP_ISNOTODD                       = 52;
    const TP_ISODDBY                        = 53;
    const TP_ISNOTODDBY                     = 54;
    const TP_INSTANCEOF                     = 55;
    const TP_EQUALS                         = 56;
    const TP_NOTEQUALS                      = 57;
    const TP_GREATERTHAN                    = 58;
    const TP_LESSTHAN                       = 59;
    const TP_GREATEREQUAL                   = 60;
    const TP_LESSEQUAL                      = 61;
    const TP_IDENTITY                       = 62;
    const TP_NONEIDENTITY                   = 63;
    const TP_MOD                            = 64;
    const TP_LAND                           = 65;
    const TP_LOR                            = 66;
    const TP_LXOR                           = 67;
    const TP_BACKTICK                       = 68;
    const TP_DOLLARID                       = 69;
    const YY_NO_ACTION = 536;
    const YY_ACCEPT_ACTION = 535;
    const YY_ERROR_ACTION = 534;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1335;
static public $yy_action = array(
 /*     0 */    15,   20,   73,   48,   50,   87,  259,  210,  257,  216,
 /*    10 */   258,   46,  141,  252,  109,  189,  290,   14,   45,   11,
 /*    20 */   299,  344,   31,  291,   58,  302,  332,  310,  336,   49,
 /*    30 */    47,  109,   54,   13,   15,  218,   75,  183,   38,  269,
 /*    40 */   220,  184,  212,  162,   31,   86,  243,  302,  109,  189,
 /*    50 */   224,  200,   45,    7,  325,   26,   47,  110,   58,  313,
 /*    60 */   332,  310,  336,   49,   38,  300,   54,   13,  277,   15,
 /*    70 */     5,   81,  170,  174,  287,  217,  191,   31,   56,  253,
 /*    80 */   302,   25,   46,  109,  189,  290,   21,   45,   27,  299,
 /*    90 */   344,   31,  343,   58,  302,  332,  310,  336,   49,  227,
 /*   100 */   169,   54,   13,  233,   15,   20,   84,  183,  217,  269,
 /*   110 */   326,  206,  212,   59,   89,   86,  141,  176,  109,  189,
 /*   120 */   238,  347,   45,    7,  325,  225,   40,  110,   58,  313,
 /*   130 */   332,  310,  336,   49,  184,  300,   54,   13,  168,  176,
 /*   140 */     5,   86,   23,    4,    2,  351,  352,    3,    8,  340,
 /*   150 */   342,    9,   10,   15,  290,   75,  183,  273,  299,  344,
 /*   160 */   282,  300,  254,  301,  298,  292,  184,  109,  189,  142,
 /*   170 */   237,   45,   27,   15,  166,   75,  183,   58,   20,  332,
 /*   180 */   310,  336,   49,   67,  330,   54,   13,  109,  189,  141,
 /*   190 */    34,   45,   11,   15,  411,   75,  171,   58,  249,  332,
 /*   200 */   310,  336,   49,  164,  146,   54,   13,  109,  189,   19,
 /*   210 */    31,   45,   27,  302,   25,   31,  322,   58,  302,  332,
 /*   220 */   310,  336,   49,   40,  308,   54,   13,   24,  186,   81,
 /*   230 */   129,  176,    4,    2,  351,  352,    3,    8,  340,  342,
 /*   240 */     9,   10,   15,  159,   81,  177,  321,   31,  318,   57,
 /*   250 */   302,   36,  301,  298,  292,  204,  109,  189,  289,   54,
 /*   260 */    45,   27,   15,  324,   81,  179,   58,  190,  332,  310,
 /*   270 */   336,   49,  113,  323,   54,   13,  109,  189,  184,  252,
 /*   280 */    45,   27,  208,   14,  294,  311,   58,  346,  332,  310,
 /*   290 */   336,   49,  176,  353,   54,   13,  304,  109,  535,   66,
 /*   300 */   267,  268,    4,    2,  351,  352,    3,    8,  340,  342,
 /*   310 */     9,   10,  251,  242,   31,  303,  116,  302,  211,  401,
 /*   320 */   176,  144,  301,  298,  292,  348,  176,  151,   86,  349,
 /*   330 */     4,    2,  351,  352,    3,    8,  340,  342,    9,   10,
 /*   340 */    15,   22,   75,  172,   56,  253,  334,  184,  300,  115,
 /*   350 */   301,  298,  292,  176,  109,  189,  349,   29,   45,   11,
 /*   360 */   184,   81,  194,   20,   58,  329,  332,  310,  336,   49,
 /*   370 */   164,  120,   54,   13,  141,  130,    4,    2,  351,  352,
 /*   380 */     3,    8,  340,  342,    9,   10,   15,   70,   81,  179,
 /*   390 */   330,   54,  295,  222,  157,   35,  301,  298,  292,  176,
 /*   400 */   109,  189,  346,  323,  317,   27,   15,   86,   81,  173,
 /*   410 */    58,   62,  332,  310,  336,   49,  135,  244,   54,   13,
 /*   420 */   109,  178,   69,  191,  176,   27,   15,  300,   81,  179,
 /*   430 */    58,  330,  332,  310,  336,   49,  335,  346,   54,   13,
 /*   440 */   109,  189,   18,  176,  323,   27,   15,   83,   81,  181,
 /*   450 */    58,  184,  332,  310,  336,   49,  126,   20,   54,   31,
 /*   460 */   109,  189,  302,  207,  203,   27,  196,   86,  141,   86,
 /*   470 */    58,  330,  332,  310,  336,   49,  269,  221,   54,  212,
 /*   480 */    65,  270,   86,  324,  323,   96,  198,  300,  176,  300,
 /*   490 */   139,  325,  245,  195,  110,  164,  313,  404,  184,  176,
 /*   500 */    42,  167,  300,   85,  404,  330,  122,  327,  184,  345,
 /*   510 */    42,  163,  250,  234,  235,  236,  231,  229,  230,  255,
 /*   520 */   240,  330,  250,  234,  235,  236,  231,  229,  230,  255,
 /*   530 */   240,  262,   30,  269,  221,  184,  212,   65,  176,   86,
 /*   540 */   161,   39,   97,   81,  296,  318,   31,  125,  325,  175,
 /*   550 */   184,  110,  164,  313,  269,  221,  315,  212,   65,  300,
 /*   560 */    86,  145,  330,  100,  327,  184,  318,  305,  306,  325,
 /*   570 */   246,  182,  110,   54,  313,  269,  221,   68,  212,   65,
 /*   580 */   300,   86,  138,  123,  103,  327,   81,  164,  165,  286,
 /*   590 */   325,   31,  346,  110,  226,  313,  176,  330,  330,  269,
 /*   600 */   221,  300,  212,   65,  354,   86,  327,  254,  102,  269,
 /*   610 */   221,  176,  212,   65,  325,   86,   54,  110,  101,  313,
 /*   620 */    16,  316,   46,  284,  325,  300,  314,  110,  176,  313,
 /*   630 */   327,   32,  108,  176,  320,  300,  184,  339,   42,  265,
 /*   640 */   327,  176,  349,  241,  266,  268,  176,  346,  337,  184,
 /*   650 */   250,  234,  235,  236,  231,  229,  230,  255,  240,  269,
 /*   660 */   221,  133,  212,   65,  304,   86,  331,  155,  104,  239,
 /*   670 */     1,  184,  318,  176,  325,  307,  176,  110,  112,  313,
 /*   680 */   269,  221,  176,  212,   65,  300,   86,  106,  111,   98,
 /*   690 */   327,  213,  256,  346,   33,  325,  187,  134,  110,  176,
 /*   700 */   313,  137,  346,  346,  269,  221,  300,  212,   64,   82,
 /*   710 */    86,  327,  330,   95,  283,    6,  330,  124,  143,  325,
 /*   720 */   227,  341,  110,  118,  313,  269,  221,  153,  212,   63,
 /*   730 */   300,   86,  330,  330,   93,  327,   37,  263,  330,  140,
 /*   740 */   325,  338,   43,  110,  280,  313,  202,  309,  188,  269,
 /*   750 */   221,  300,  212,   65,  330,   86,  327,  260,   94,  269,
 /*   760 */   221,  297,  212,   65,  325,   86,   26,  110,   99,  313,
 /*   770 */    78,  261,   28,   77,  325,  300,  293,  110,   18,  313,
 /*   780 */   327,  248,   19,  269,  326,  300,  212,  117,  232,   86,
 /*   790 */   327,  272,  209,  276,  274,  215,  275,   15,  325,   90,
 /*   800 */   278,  110,  185,  313,  269,  220,  264,  212,  162,  300,
 /*   810 */    86,  109,  350,   61,   76,  269,  319,   60,  212,  325,
 /*   820 */   321,   86,  110,  228,  313,  269,  326,   80,  212,  117,
 /*   830 */   300,   86,   44,  193,   41,  313,  304,  128,  176,  285,
 /*   840 */   325,  300,   92,  110,   53,  313,   17,  333,  205,  269,
 /*   850 */   219,  300,  212,   51,   91,   86,   12,  214,  279,  292,
 /*   860 */   292,  292,  292,  292,  325,  292,  292,  110,  292,  313,
 /*   870 */   292,  292,  292,  269,  180,  300,  212,  154,  271,   86,
 /*   880 */   269,  326,  292,  212,  117,  292,   86,  292,  325,  292,
 /*   890 */   292,  110,  292,  313,  292,  325,  292,  292,  110,  300,
 /*   900 */   313,  292,  292,  223,  269,   79,  300,   71,   55,   88,
 /*   910 */    74,  292,  292,  292,  292,  269,  328,  292,  212,  325,
 /*   920 */   292,   86,  110,  292,  313,  292,  292,  292,  269,   79,
 /*   930 */   300,   72,   52,   88,   74,  313,  292,  292,  292,  292,
 /*   940 */   292,  300,  292,  325,  292,  292,  110,  292,  313,  269,
 /*   950 */   326,  292,  212,  117,  300,   86,  269,  326,  292,  212,
 /*   960 */   158,  292,   86,  292,  325,  292,  292,  110,  292,  313,
 /*   970 */   292,  325,  201,  292,  110,  300,  313,  292,  292,  292,
 /*   980 */   269,  326,  300,  212,  148,  292,   86,  292,  292,  292,
 /*   990 */   292,  269,  247,  292,  212,  325,  292,   86,  110,  292,
 /*  1000 */   313,  292,  292,  292,  269,  326,  300,  212,  132,  292,
 /*  1010 */    86,  313,  292,  292,  292,  292,  292,  300,  292,  325,
 /*  1020 */   292,  292,  110,  292,  313,  269,  326,  292,  212,  119,
 /*  1030 */   300,   86,  269,  326,  292,  212,  136,  292,   86,  292,
 /*  1040 */   325,  292,  292,  110,  292,  313,  292,  325,  292,  292,
 /*  1050 */   110,  300,  313,  292,  292,  292,  269,  326,  300,  212,
 /*  1060 */   147,  292,   86,  292,  292,  292,  292,  292,  292,  292,
 /*  1070 */   292,  325,  292,  292,  110,  292,  313,  292,  292,  292,
 /*  1080 */   269,  326,  300,  212,  149,  292,   86,  292,  292,  292,
 /*  1090 */   292,  292,  292,  292,  292,  325,  292,  292,  110,  292,
 /*  1100 */   313,  269,  326,  292,  212,  121,  300,   86,  269,  326,
 /*  1110 */   292,  212,  152,  292,   86,  292,  325,  292,  292,  110,
 /*  1120 */   292,  313,  292,  325,  292,  292,  110,  300,  313,  292,
 /*  1130 */   292,  292,  269,  326,  300,  212,  156,  292,   86,  292,
 /*  1140 */   292,  292,  292,  292,  292,  292,  292,  325,  292,  292,
 /*  1150 */   110,  292,  313,  292,  292,  292,  269,  326,  300,  212,
 /*  1160 */   160,  292,   86,  292,  292,  292,  292,  292,  292,  292,
 /*  1170 */   292,  325,  292,  292,  110,  292,  313,  269,  326,  292,
 /*  1180 */   212,  150,  300,   86,  269,  326,  292,  212,  127,  292,
 /*  1190 */    86,  292,  325,  292,  292,  110,  292,  313,  292,  325,
 /*  1200 */   292,  292,  110,  300,  313,  292,  292,  292,  269,  326,
 /*  1210 */   300,  212,  131,  292,   86,  292,  292,  292,  292,  292,
 /*  1220 */   292,  292,  292,  325,  292,  292,  110,  292,  313,  292,
 /*  1230 */   292,  292,  269,  326,  300,  212,  292,  292,   86,  292,
 /*  1240 */   292,  292,  292,  292,  292,  292,  292,  325,  292,  292,
 /*  1250 */   107,  292,  313,  269,  326,  292,  212,  292,  300,   86,
 /*  1260 */   269,  326,  292,  212,  292,  292,   86,  292,  325,  292,
 /*  1270 */   292,  114,  292,  313,  292,  325,  292,  292,  105,  300,
 /*  1280 */   313,  292,  292,  292,  269,  192,  300,  212,  312,  292,
 /*  1290 */    86,  292,  292,  199,  292,  176,  292,  292,  292,  197,
 /*  1300 */   292,  292,  292,  292,  313,  292,   20,  292,  269,  288,
 /*  1310 */   300,  212,  292,  292,   86,  292,  292,  141,  292,  292,
 /*  1320 */   292,  292,  184,  281,  292,  292,  292,  292,  313,  292,
 /*  1330 */   292,  292,  292,  292,  300,
    );
    static public $yy_lookahead = array(
 /*     0 */     7,   26,    9,   10,   10,   12,   12,   14,   14,   16,
 /*    10 */    16,   13,   37,    3,   21,   22,   25,    7,   25,   26,
 /*    20 */    29,   30,    7,    8,   31,   10,   33,   34,   35,   36,
 /*    30 */    32,   21,   39,   40,    7,   20,    9,   10,   40,   74,
 /*    40 */    75,   42,   77,   78,    7,   80,   36,   10,   21,   22,
 /*    50 */     9,   10,   25,   26,   89,   11,   32,   92,   31,   94,
 /*    60 */    33,   34,   35,   36,   40,  100,   39,   40,    8,    7,
 /*    70 */    43,    9,   10,  108,  109,   38,   32,    7,   68,   69,
 /*    80 */    10,   11,   13,   21,   22,   25,   11,   25,   26,   29,
 /*    90 */    30,    7,    8,   31,   10,   33,   34,   35,   36,   24,
 /*   100 */     8,   39,   40,   41,    7,   26,    9,   10,   38,   74,
 /*   110 */    75,   32,   77,   78,   79,   80,   37,   15,   21,   22,
 /*   120 */    41,  103,   25,   26,   89,   27,   24,   92,   31,   94,
 /*   130 */    33,   34,   35,   36,   42,  100,   39,   40,   77,   15,
 /*   140 */    43,   80,   23,   45,   46,   47,   48,   49,   50,   51,
 /*   150 */    52,   53,   54,    7,   25,    9,   10,   96,   29,   30,
 /*   160 */    41,  100,   74,   65,   66,   67,   42,   21,   22,   76,
 /*   170 */    41,   25,   26,    7,   81,    9,   10,   31,   26,   33,
 /*   180 */    34,   35,   36,   95,   91,   39,   40,   21,   22,   37,
 /*   190 */     7,   25,   26,    7,   42,    9,   10,   31,  110,   33,
 /*   200 */    34,   35,   36,   81,   17,   39,   40,   21,   22,   26,
 /*   210 */     7,   25,   26,   10,   11,    7,    8,   31,   10,   33,
 /*   220 */    34,   35,   36,   24,    8,   39,   40,    7,   20,    9,
 /*   230 */    10,   15,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   240 */    53,   54,    7,   98,    9,   10,  101,    7,  103,   82,
 /*   250 */    10,   11,   65,   66,   67,   10,   21,   22,   18,   39,
 /*   260 */    25,   26,    7,   27,    9,   10,   31,   22,   33,   34,
 /*   270 */    35,   36,   87,  104,   39,   40,   21,   22,   42,    3,
 /*   280 */    25,   26,   88,    7,   27,    8,   31,  102,   33,   34,
 /*   290 */    35,   36,   15,    8,   39,   40,  102,   21,   71,   72,
 /*   300 */    73,   74,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   310 */    53,   54,   36,    8,    7,    8,   99,   10,   13,    8,
 /*   320 */    15,   17,   65,   66,   67,   77,   15,   23,   80,   18,
 /*   330 */    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
 /*   340 */     7,   23,    9,   10,   68,   69,    8,   42,  100,   99,
 /*   350 */    65,   66,   67,   15,   21,   22,   18,   20,   25,   26,
 /*   360 */    42,    9,   10,   26,   31,   10,   33,   34,   35,   36,
 /*   370 */    81,   99,   39,   40,   37,   76,   45,   46,   47,   48,
 /*   380 */    49,   50,   51,   52,   53,   54,    7,   87,    9,   10,
 /*   390 */    91,   39,    8,   38,   82,  106,   65,   66,   67,   15,
 /*   400 */    21,   22,  102,  104,   77,   26,    7,   80,    9,   10,
 /*   410 */    31,   82,   33,   34,   35,   36,   76,    8,   39,   40,
 /*   420 */    21,   22,   87,   32,   15,   26,    7,  100,    9,   10,
 /*   430 */    31,   91,   33,   34,   35,   36,    8,  102,   39,   40,
 /*   440 */    21,   22,   11,   15,  104,   26,    7,    9,    9,   10,
 /*   450 */    31,   42,   33,   34,   35,   36,   76,   26,   39,    7,
 /*   460 */    21,   22,   10,    3,   77,   26,   77,   80,   37,   80,
 /*   470 */    31,   91,   33,   34,   35,   36,   74,   75,   39,   77,
 /*   480 */    78,    8,   80,   27,  104,   83,   84,  100,   15,  100,
 /*   490 */    76,   89,    8,   27,   92,   81,   94,    8,   42,   15,
 /*   500 */    44,    8,  100,   15,   15,   91,   76,  105,   42,   10,
 /*   510 */    44,   81,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   520 */    64,   91,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   530 */    64,    8,   24,   74,   75,   42,   77,   78,   15,   80,
 /*   540 */    98,    7,   83,    9,   10,  103,    7,   76,   89,   10,
 /*   550 */    42,   92,   81,   94,   74,   75,   22,   77,   78,  100,
 /*   560 */    80,   98,   91,   83,  105,   42,  103,   33,   34,   89,
 /*   570 */    84,   85,   92,   39,   94,   74,   75,   87,   77,   78,
 /*   580 */   100,   80,   76,   76,   83,  105,    9,   81,   81,    8,
 /*   590 */    89,    7,  102,   92,   10,   94,   15,   91,   91,   74,
 /*   600 */    75,  100,   77,   78,    8,   80,  105,   74,   83,   74,
 /*   610 */    75,   15,   77,   78,   89,   80,   39,   92,   83,   94,
 /*   620 */    11,    8,   13,    4,   89,  100,    8,   92,   15,   94,
 /*   630 */   105,   24,   87,   15,    8,  100,   42,    8,   44,    8,
 /*   640 */   105,   15,   18,  110,   73,   74,   15,  102,    8,   42,
 /*   650 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   74,
 /*   660 */    75,   99,   77,   78,  102,   80,    8,   98,   83,    8,
 /*   670 */    15,   42,  103,   15,   89,    8,   15,   92,   87,   94,
 /*   680 */    74,   75,   15,   77,   78,  100,   80,   87,   87,   83,
 /*   690 */   105,    3,    8,  102,   28,   89,   10,   76,   92,   15,
 /*   700 */    94,   76,  102,  102,   74,   75,  100,   77,   78,    9,
 /*   710 */    80,  105,   91,   83,    8,  107,   91,   76,   76,   89,
 /*   720 */    24,   10,   92,   76,   94,   74,   75,   10,   77,   78,
 /*   730 */   100,   80,   91,   91,   83,  105,   20,   27,   91,   76,
 /*   740 */    89,   10,   55,   92,    4,   94,   10,   22,   19,   74,
 /*   750 */    75,  100,   77,   78,   91,   80,  105,    8,   83,   74,
 /*   760 */    75,   39,   77,   78,   89,   80,   11,   92,   83,   94,
 /*   770 */     9,    8,   28,    9,   89,  100,   39,   92,   11,   94,
 /*   780 */   105,   68,   26,   74,   75,  100,   77,   78,   41,   80,
 /*   790 */   105,    1,    2,    3,    4,    5,    6,    7,   89,   27,
 /*   800 */    27,   92,   19,   94,   74,   75,   97,   77,   78,  100,
 /*   810 */    80,   21,    8,   10,    9,   74,   75,   82,   77,   89,
 /*   820 */   101,   80,   92,   91,   94,   74,   75,    9,   77,   78,
 /*   830 */   100,   80,   93,   90,   15,   94,  102,   99,   15,  109,
 /*   840 */    89,  100,   96,   92,   99,   94,   26,   15,   97,   74,
 /*   850 */    75,  100,   77,   78,   79,   80,   86,   86,   84,  111,
 /*   860 */   111,  111,  111,  111,   89,  111,  111,   92,  111,   94,
 /*   870 */   111,  111,  111,   74,   75,  100,   77,   78,   79,   80,
 /*   880 */    74,   75,  111,   77,   78,  111,   80,  111,   89,  111,
 /*   890 */   111,   92,  111,   94,  111,   89,  111,  111,   92,  100,
 /*   900 */    94,  111,  111,   97,   74,   75,  100,   77,   78,   79,
 /*   910 */    80,  111,  111,  111,  111,   74,   75,  111,   77,   89,
 /*   920 */   111,   80,   92,  111,   94,  111,  111,  111,   74,   75,
 /*   930 */   100,   77,   78,   79,   80,   94,  111,  111,  111,  111,
 /*   940 */   111,  100,  111,   89,  111,  111,   92,  111,   94,   74,
 /*   950 */    75,  111,   77,   78,  100,   80,   74,   75,  111,   77,
 /*   960 */    78,  111,   80,  111,   89,  111,  111,   92,  111,   94,
 /*   970 */   111,   89,   97,  111,   92,  100,   94,  111,  111,  111,
 /*   980 */    74,   75,  100,   77,   78,  111,   80,  111,  111,  111,
 /*   990 */   111,   74,   75,  111,   77,   89,  111,   80,   92,  111,
 /*  1000 */    94,  111,  111,  111,   74,   75,  100,   77,   78,  111,
 /*  1010 */    80,   94,  111,  111,  111,  111,  111,  100,  111,   89,
 /*  1020 */   111,  111,   92,  111,   94,   74,   75,  111,   77,   78,
 /*  1030 */   100,   80,   74,   75,  111,   77,   78,  111,   80,  111,
 /*  1040 */    89,  111,  111,   92,  111,   94,  111,   89,  111,  111,
 /*  1050 */    92,  100,   94,  111,  111,  111,   74,   75,  100,   77,
 /*  1060 */    78,  111,   80,  111,  111,  111,  111,  111,  111,  111,
 /*  1070 */   111,   89,  111,  111,   92,  111,   94,  111,  111,  111,
 /*  1080 */    74,   75,  100,   77,   78,  111,   80,  111,  111,  111,
 /*  1090 */   111,  111,  111,  111,  111,   89,  111,  111,   92,  111,
 /*  1100 */    94,   74,   75,  111,   77,   78,  100,   80,   74,   75,
 /*  1110 */   111,   77,   78,  111,   80,  111,   89,  111,  111,   92,
 /*  1120 */   111,   94,  111,   89,  111,  111,   92,  100,   94,  111,
 /*  1130 */   111,  111,   74,   75,  100,   77,   78,  111,   80,  111,
 /*  1140 */   111,  111,  111,  111,  111,  111,  111,   89,  111,  111,
 /*  1150 */    92,  111,   94,  111,  111,  111,   74,   75,  100,   77,
 /*  1160 */    78,  111,   80,  111,  111,  111,  111,  111,  111,  111,
 /*  1170 */   111,   89,  111,  111,   92,  111,   94,   74,   75,  111,
 /*  1180 */    77,   78,  100,   80,   74,   75,  111,   77,   78,  111,
 /*  1190 */    80,  111,   89,  111,  111,   92,  111,   94,  111,   89,
 /*  1200 */   111,  111,   92,  100,   94,  111,  111,  111,   74,   75,
 /*  1210 */   100,   77,   78,  111,   80,  111,  111,  111,  111,  111,
 /*  1220 */   111,  111,  111,   89,  111,  111,   92,  111,   94,  111,
 /*  1230 */   111,  111,   74,   75,  100,   77,  111,  111,   80,  111,
 /*  1240 */   111,  111,  111,  111,  111,  111,  111,   89,  111,  111,
 /*  1250 */    92,  111,   94,   74,   75,  111,   77,  111,  100,   80,
 /*  1260 */    74,   75,  111,   77,  111,  111,   80,  111,   89,  111,
 /*  1270 */   111,   92,  111,   94,  111,   89,  111,  111,   92,  100,
 /*  1280 */    94,  111,  111,  111,   74,   75,  100,   77,    8,  111,
 /*  1290 */    80,  111,  111,   13,  111,   15,  111,  111,  111,   89,
 /*  1300 */   111,  111,  111,  111,   94,  111,   26,  111,   74,   75,
 /*  1310 */   100,   77,  111,  111,   80,  111,  111,   37,  111,  111,
 /*  1320 */   111,  111,   42,   89,  111,  111,  111,  111,   94,  111,
 /*  1330 */   111,  111,  111,  111,  100,
);
    const YY_SHIFT_USE_DFLT = -26;
    const YY_SHIFT_MAX = 227;
    static public $yy_shift_ofst = array(
 /*     0 */   790,   97,   27,   27,   27,   27,   27,   27,   27,   27,
 /*    10 */    27,   27,   27,  186,   -7,   -7,  166,  146,  333,  146,
 /*    20 */   146,  166,  146,  186,  146,  146,  146,  146,  146,  146,
 /*    30 */   146,  146,  146,  146,  146,  146,  146,  146,   62,  255,
 /*    40 */   235,  399,  379,  439,  419,  419,  220,  534, 1280,  276,
 /*    50 */   305,  523,  409,   -2,  352,  124,  577,  102,  577,  124,
 /*    60 */   102,  124,  102,  466,  456,  594,  790,   10,   70,  240,
 /*    70 */    37,  311,  338,  539,  609,  584,  452,  452,  452,  684,
 /*    80 */   452,  452,  452,  452,  584,  818,   69,  819,  823,  823,
 /*    90 */    69,  823,   69,   98,  187,  257,  285,  331,  331,  331,
 /*   100 */   331,  331,  331,  331,  331,   60,   15,  129,  208,   -6,
 /*   110 */    -9,  203,   84,  307,   -9,   24,   24,  318,  384,   92,
 /*   120 */    24,  236,  216,  277,  667,  618,  626,  508,   24,  183,
 /*   130 */   613,  493,  607,   24,  661,  658,  629,  428,  631,  596,
 /*   140 */   581,   41,  484,  473,  832,   69,  832,   -1,   -1,   -1,
 /*   150 */    -1,  818,   -1,  820,   -1,   69,   -1,  199,   -1,   69,
 /*   160 */    -1,   69,   -1,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*   170 */    79,  337,  152,  431,  119,   75,  245,  -25,   44,  -25,
 /*   180 */   489,  -25,  304,  -25,  355,  805,  761,  763,  764,  391,
 /*   190 */   755,  725,  729,  749,  722,  744,  737,  783,  804,  803,
 /*   200 */   756,  773,  747,  713,  767,  772,  736,  740,  640,  688,
 /*   210 */   655,  686,  624,  619,  438,  460,  488,  499,  700,  706,
 /*   220 */   716,  687,  731,  710,  717,  666,  696,  711,
);
    const YY_REDUCE_USE_DFLT = -36;
    const YY_REDUCE_MAX = 169;
    static public $yy_reduce_ofst = array(
 /*     0 */   227,  402,  585,  535,  501,  459,  480,  630,  525,  606,
 /*    10 */   685,  651,  675,  -35,  854,  830,   35,  751,  799,  875,
 /*    20 */   806,  775,  709,  730,  951, 1006,  882, 1027, 1110, 1082,
 /*    30 */  1058,  958,  906,  930, 1134,  982, 1103, 1034, 1158, 1186,
 /*    40 */  1179, 1210, 1234,  917,  741,  841,   61,  327,  507,   88,
 /*    50 */    93,  506,  414,  145,  389,  414,  387,  340,  248,  471,
 /*    60 */   299,  430,  380,  289,  289,  289,  571,  533,  562,  194,
 /*    70 */   562,  625,  625,  300,  442,  300,  545,  600,  591,  621,
 /*    80 */   601,  300,  185,  335,  490,  486,  442,  647,  663,  641,
 /*    90 */   463,  642,  569,  608,  608,  608,  608,  608,  608,  608,
 /*   100 */   608,  608,  608,  608,  608,  739,  734,  739,  734,  743,
 /*   110 */   739,  734,  734,  734,  739,  719,  719,  122,  732,  122,
 /*   120 */   719,  122,  732,  732,  732,  732,  732,  122,  719,  738,
 /*   130 */   732,  122,  122,  719,  732,  732,  122,  732,  732,  732,
 /*   140 */   732,  746,  732,  732,  770,   18,  771,  122,  122,  122,
 /*   150 */   122,  774,  122,  745,  122,   18,  122,  169,  122,   18,
 /*   160 */   122,   18,  122,  329,  312,  735,  167,  217,  250,  272,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(1, 2, 3, 4, 5, 6, 7, 21, ),
        /* 1 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 2 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 3 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 4 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 5 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 6 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 7 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 8 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 9 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 10 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 11 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 12 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 43, ),
        /* 13 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 14 */ array(7, 9, 10, 12, 14, 16, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 15 */ array(7, 9, 10, 12, 14, 16, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 16 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 17 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 18 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 19 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 20 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 21 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 22 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 23 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 24 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 25 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 26 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 27 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 28 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 29 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 30 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 31 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 32 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 33 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 34 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 35 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 36 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 37 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 38 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, 41, ),
        /* 39 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 40 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 41 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 42 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 39, 40, ),
        /* 43 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 39, ),
        /* 44 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 39, ),
        /* 45 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 39, ),
        /* 46 */ array(7, 9, 10, 39, ),
        /* 47 */ array(7, 9, 10, 22, 33, 34, 39, ),
        /* 48 */ array(8, 13, 15, 26, 37, 42, ),
        /* 49 */ array(3, 7, 21, 36, 68, 69, ),
        /* 50 */ array(8, 13, 15, 42, ),
        /* 51 */ array(8, 15, 42, ),
        /* 52 */ array(8, 15, 42, ),
        /* 53 */ array(13, 32, 40, ),
        /* 54 */ array(9, 10, 39, ),
        /* 55 */ array(15, 42, ),
        /* 56 */ array(9, 39, ),
        /* 57 */ array(15, 24, ),
        /* 58 */ array(9, 39, ),
        /* 59 */ array(15, 42, ),
        /* 60 */ array(15, 24, ),
        /* 61 */ array(15, 42, ),
        /* 62 */ array(15, 24, ),
        /* 63 */ array(27, 42, 44, 56, 57, 58, 59, 60, 61, 62, 63, 64, ),
        /* 64 */ array(27, 42, 44, 56, 57, 58, 59, 60, 61, 62, 63, 64, ),
        /* 65 */ array(42, 44, 56, 57, 58, 59, 60, 61, 62, 63, 64, ),
        /* 66 */ array(1, 2, 3, 4, 5, 6, 7, 21, ),
        /* 67 */ array(3, 7, 21, 36, 68, 69, ),
        /* 68 */ array(7, 10, 11, 38, ),
        /* 69 */ array(7, 10, 11, 18, ),
        /* 70 */ array(7, 10, 38, ),
        /* 71 */ array(8, 15, 18, ),
        /* 72 */ array(8, 15, 18, ),
        /* 73 */ array(7, 10, ),
        /* 74 */ array(11, 13, ),
        /* 75 */ array(7, 10, ),
        /* 76 */ array(7, 10, ),
        /* 77 */ array(7, 10, ),
        /* 78 */ array(7, 10, ),
        /* 79 */ array(8, 15, ),
        /* 80 */ array(7, 10, ),
        /* 81 */ array(7, 10, ),
        /* 82 */ array(7, 10, ),
        /* 83 */ array(7, 10, ),
        /* 84 */ array(7, 10, ),
        /* 85 */ array(9, ),
        /* 86 */ array(13, ),
        /* 87 */ array(15, ),
        /* 88 */ array(15, ),
        /* 89 */ array(15, ),
        /* 90 */ array(13, ),
        /* 91 */ array(15, ),
        /* 92 */ array(13, ),
        /* 93 */ array(27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 94 */ array(17, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 95 */ array(27, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 96 */ array(8, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 97 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 98 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 99 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 100 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 101 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 102 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 103 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 104 */ array(45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 67, ),
        /* 105 */ array(8, 25, 29, 30, ),
        /* 106 */ array(7, 8, 10, 20, ),
        /* 107 */ array(25, 29, 30, 41, ),
        /* 108 */ array(7, 8, 10, 20, ),
        /* 109 */ array(10, 12, 14, 16, ),
        /* 110 */ array(25, 29, 30, ),
        /* 111 */ array(7, 10, 11, ),
        /* 112 */ array(7, 8, 10, ),
        /* 113 */ array(7, 8, 10, ),
        /* 114 */ array(25, 29, 30, ),
        /* 115 */ array(32, 40, ),
        /* 116 */ array(32, 40, ),
        /* 117 */ array(23, 42, ),
        /* 118 */ array(8, 15, ),
        /* 119 */ array(8, 42, ),
        /* 120 */ array(32, 40, ),
        /* 121 */ array(27, 42, ),
        /* 122 */ array(8, 15, ),
        /* 123 */ array(8, 15, ),
        /* 124 */ array(8, 15, ),
        /* 125 */ array(8, 15, ),
        /* 126 */ array(8, 15, ),
        /* 127 */ array(24, 42, ),
        /* 128 */ array(32, 40, ),
        /* 129 */ array(7, 26, ),
        /* 130 */ array(8, 15, ),
        /* 131 */ array(8, 42, ),
        /* 132 */ array(24, 42, ),
        /* 133 */ array(32, 40, ),
        /* 134 */ array(8, 15, ),
        /* 135 */ array(8, 15, ),
        /* 136 */ array(8, 42, ),
        /* 137 */ array(8, 15, ),
        /* 138 */ array(8, 15, ),
        /* 139 */ array(8, 15, ),
        /* 140 */ array(8, 15, ),
        /* 141 */ array(9, 10, ),
        /* 142 */ array(8, 15, ),
        /* 143 */ array(8, 15, ),
        /* 144 */ array(15, ),
        /* 145 */ array(13, ),
        /* 146 */ array(15, ),
        /* 147 */ array(42, ),
        /* 148 */ array(42, ),
        /* 149 */ array(42, ),
        /* 150 */ array(42, ),
        /* 151 */ array(9, ),
        /* 152 */ array(42, ),
        /* 153 */ array(26, ),
        /* 154 */ array(42, ),
        /* 155 */ array(13, ),
        /* 156 */ array(42, ),
        /* 157 */ array(24, ),
        /* 158 */ array(42, ),
        /* 159 */ array(13, ),
        /* 160 */ array(42, ),
        /* 161 */ array(13, ),
        /* 162 */ array(42, ),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(26, 32, 37, 41, ),
        /* 171 */ array(20, 26, 37, ),
        /* 172 */ array(26, 37, 42, ),
        /* 173 */ array(11, 26, 37, ),
        /* 174 */ array(23, 41, ),
        /* 175 */ array(11, 24, ),
        /* 176 */ array(10, 22, ),
        /* 177 */ array(26, 37, ),
        /* 178 */ array(11, 32, ),
        /* 179 */ array(26, 37, ),
        /* 180 */ array(8, 15, ),
        /* 181 */ array(26, 37, ),
        /* 182 */ array(17, 23, ),
        /* 183 */ array(26, 37, ),
        /* 184 */ array(10, 38, ),
        /* 185 */ array(9, ),
        /* 186 */ array(9, ),
        /* 187 */ array(8, ),
        /* 188 */ array(9, ),
        /* 189 */ array(32, ),
        /* 190 */ array(11, ),
        /* 191 */ array(22, ),
        /* 192 */ array(19, ),
        /* 193 */ array(8, ),
        /* 194 */ array(39, ),
        /* 195 */ array(28, ),
        /* 196 */ array(39, ),
        /* 197 */ array(19, ),
        /* 198 */ array(8, ),
        /* 199 */ array(10, ),
        /* 200 */ array(26, ),
        /* 201 */ array(27, ),
        /* 202 */ array(41, ),
        /* 203 */ array(68, ),
        /* 204 */ array(11, ),
        /* 205 */ array(27, ),
        /* 206 */ array(10, ),
        /* 207 */ array(4, ),
        /* 208 */ array(8, ),
        /* 209 */ array(3, ),
        /* 210 */ array(15, ),
        /* 211 */ array(10, ),
        /* 212 */ array(18, ),
        /* 213 */ array(4, ),
        /* 214 */ array(9, ),
        /* 215 */ array(3, ),
        /* 216 */ array(15, ),
        /* 217 */ array(10, ),
        /* 218 */ array(9, ),
        /* 219 */ array(8, ),
        /* 220 */ array(20, ),
        /* 221 */ array(55, ),
        /* 222 */ array(10, ),
        /* 223 */ array(27, ),
        /* 224 */ array(10, ),
        /* 225 */ array(28, ),
        /* 226 */ array(24, ),
        /* 227 */ array(10, ),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
);
    static public $yy_default = array(
 /*     0 */   534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*    10 */   534,  534,  534,  520,  534,  534,  534,  478,  534,  478,
 /*    20 */   478,  534,  478,  534,  534,  534,  534,  534,  534,  534,
 /*    30 */   534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*    40 */   534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*    50 */   534,  534,  534,  441,  534,  401,  534,  401,  534,  401,
 /*    60 */   401,  401,  401,  488,  488,  488,  355,  534,  451,  534,
 /*    70 */   451,  424,  424,  534,  444,  534,  534,  534,  534,  415,
 /*    80 */   534,  534,  534,  534,  534,  534,  444,  401,  401,  401,
 /*    90 */   437,  401,  436,  534,  534,  534,  534,  486,  501,  502,
 /*   100 */   492,  497,  498,  493,  494,  534,  534,  534,  534,  534,
 /*   110 */   412,  534,  534,  534,  483,  470,  472,  477,  534,  534,
 /*   120 */   471,  534,  534,  534,  534,  534,  534,  534,  469,  451,
 /*   130 */   534,  534,  534,  449,  534,  534,  534,  534,  534,  534,
 /*   140 */   534,  534,  534,  534,  533,  439,  533,  489,  419,  410,
 /*   150 */   385,  534,  521,  451,  403,  438,  420,  414,  407,  442,
 /*   160 */   522,  466,  523,  482,  482,  482,  482,  451,  451,  451,
 /*   170 */   534,  411,  402,  406,  534,  464,  534,  484,  427,  534,
 /*   180 */   415,  503,  534,  411,  534,  534,  534,  534,  534,  427,
 /*   190 */   534,  534,  534,  534,  534,  432,  534,  534,  534,  534,
 /*   200 */   440,  534,  534,  534,  406,  534,  534,  534,  534,  534,
 /*   210 */   534,  534,  424,  534,  534,  534,  534,  534,  534,  415,
 /*   220 */   415,  415,  534,  534,  534,  534,  464,  534,  399,  510,
 /*   230 */   511,  509,  459,  461,  506,  507,  508,  460,  458,  366,
 /*   240 */   513,  524,  391,  434,  529,  396,  408,  504,  526,  525,
 /*   250 */   505,  435,  531,  527,  530,  512,  365,  393,  394,  395,
 /*   260 */   392,  398,  371,  474,  476,  372,  357,  356,  358,  443,
 /*   270 */   373,  405,  359,  473,  363,  362,  364,  457,  475,  409,
 /*   280 */   361,  490,  517,  370,  360,  519,  369,  518,  491,  386,
 /*   290 */   421,  387,  516,  448,  487,  377,  452,  447,  515,  422,
 /*   300 */   446,  514,  464,  388,  463,  453,  454,  375,  379,  428,
 /*   310 */   430,  376,  378,  431,  374,  455,  380,  456,  467,  417,
 /*   320 */   381,  450,  389,  481,  432,  418,  415,  485,  416,  480,
 /*   330 */   400,  397,  429,  532,  528,  367,  433,  384,  479,  465,
 /*   340 */   499,  413,  500,  390,  423,  445,  462,  468,  425,  426,
 /*   350 */   383,  495,  496,  382,  368,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 112;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 355;
    const YYNRULE = 179;
    const YYERRORSYMBOL = 70;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    public $yyTokenName = array( 
  '$',             'COMMENT',       'PHP',           'OTHER',       
  'SHORTTAGEND',   'SHORTTAGSTART',  'XML',           'LDEL',        
  'RDEL',          'DOLLAR',        'ID',            'EQUAL',       
  'FOREACH',       'PTR',           'IF',            'SPACE',       
  'FOR',           'SEMICOLON',     'INCDEC',        'AS',          
  'APTR',          'LDELSLASH',     'INTEGER',       'COMMA',       
  'COLON',         'UNIMATH',       'OPENP',         'CLOSEP',      
  'QMARK',         'MATH',          'ANDSYM',        'TYPECAST',    
  'DOT',           'BOOLEAN',       'NULL',          'SINGLEQUOTESTRING',
  'QUOTE',         'DOUBLECOLON',   'AT',            'HATCH',       
  'OPENB',         'CLOSEB',        'VERT',          'NOT',         
  'ISIN',          'ISDIVBY',       'ISNOTDIVBY',    'ISEVEN',      
  'ISNOTEVEN',     'ISEVENBY',      'ISNOTEVENBY',   'ISODD',       
  'ISNOTODD',      'ISODDBY',       'ISNOTODDBY',    'INSTANCEOF',  
  'EQUALS',        'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',    
  'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',
  'MOD',           'LAND',          'LOR',           'LXOR',        
  'BACKTICK',      'DOLLARID',      'error',         'start',       
  'template',      'template_element',  'smartytag',     'value',       
  'attributes',    'variable',      'expr',          'ternary',     
  'varindexed',    'modifier',      'modparameters',  'ifexprs',     
  'statement',     'statements',    'optspace',      'varvar',      
  'foraction',     'array',         'specialclose',  'attribute',   
  'exprs',         'math',          'function',      'doublequoted',
  'method',        'params',        'objectchain',   'arrayindex',  
  'object',        'indexdef',      'varvarele',     'objectelement',
  'modparameter',  'ifexpr',        'ifcond',        'lop',         
  'arrayelements',  'arrayelement',  'doublequotedcontent',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template_element ::= smartytag",
 /*   4 */ "template_element ::= COMMENT",
 /*   5 */ "template_element ::= PHP OTHER SHORTTAGEND",
 /*   6 */ "template_element ::= SHORTTAGSTART OTHER SHORTTAGEND",
 /*   7 */ "template_element ::= XML",
 /*   8 */ "template_element ::= SHORTTAGEND",
 /*   9 */ "template_element ::= OTHER",
 /*  10 */ "smartytag ::= LDEL value RDEL",
 /*  11 */ "smartytag ::= LDEL value attributes RDEL",
 /*  12 */ "smartytag ::= LDEL variable attributes RDEL",
 /*  13 */ "smartytag ::= LDEL expr attributes RDEL",
 /*  14 */ "smartytag ::= LDEL ternary attributes RDEL",
 /*  15 */ "smartytag ::= LDEL DOLLAR ID EQUAL value RDEL",
 /*  16 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr RDEL",
 /*  17 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes RDEL",
 /*  18 */ "smartytag ::= LDEL DOLLAR ID EQUAL ternary attributes RDEL",
 /*  19 */ "smartytag ::= LDEL varindexed EQUAL expr attributes RDEL",
 /*  20 */ "smartytag ::= LDEL varindexed EQUAL ternary attributes RDEL",
 /*  21 */ "smartytag ::= LDEL ID attributes RDEL",
 /*  22 */ "smartytag ::= LDEL FOREACH attributes RDEL",
 /*  23 */ "smartytag ::= LDEL ID RDEL",
 /*  24 */ "smartytag ::= LDEL ID PTR ID attributes RDEL",
 /*  25 */ "smartytag ::= LDEL ID modifier modparameters attributes RDEL",
 /*  26 */ "smartytag ::= LDEL ID PTR ID modifier modparameters attributes RDEL",
 /*  27 */ "smartytag ::= LDEL IF SPACE ifexprs RDEL",
 /*  28 */ "smartytag ::= LDEL IF SPACE statement RDEL",
 /*  29 */ "smartytag ::= LDEL FOR SPACE statements SEMICOLON optspace ifexprs SEMICOLON optspace DOLLAR varvar foraction RDEL",
 /*  30 */ "foraction ::= EQUAL expr",
 /*  31 */ "foraction ::= INCDEC",
 /*  32 */ "smartytag ::= LDEL FOREACH SPACE value AS DOLLAR varvar RDEL",
 /*  33 */ "smartytag ::= LDEL FOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar RDEL",
 /*  34 */ "smartytag ::= LDEL FOREACH SPACE array AS DOLLAR varvar RDEL",
 /*  35 */ "smartytag ::= LDEL FOREACH SPACE array AS DOLLAR varvar APTR DOLLAR varvar RDEL",
 /*  36 */ "smartytag ::= LDELSLASH ID RDEL",
 /*  37 */ "smartytag ::= LDELSLASH specialclose RDEL",
 /*  38 */ "specialclose ::= IF",
 /*  39 */ "specialclose ::= FOR",
 /*  40 */ "specialclose ::= FOREACH",
 /*  41 */ "smartytag ::= LDELSLASH ID attributes RDEL",
 /*  42 */ "smartytag ::= LDELSLASH ID modifier modparameters attributes RDEL",
 /*  43 */ "smartytag ::= LDELSLASH ID PTR ID RDEL",
 /*  44 */ "attributes ::= attributes attribute",
 /*  45 */ "attributes ::= attribute",
 /*  46 */ "attributes ::=",
 /*  47 */ "attribute ::= SPACE ID EQUAL ID",
 /*  48 */ "attribute ::= SPACE ID EQUAL expr",
 /*  49 */ "attribute ::= SPACE ID EQUAL value",
 /*  50 */ "attribute ::= SPACE ID EQUAL ternary",
 /*  51 */ "attribute ::= SPACE ID",
 /*  52 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  53 */ "statements ::= statement",
 /*  54 */ "statements ::= statements COMMA statement",
 /*  55 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  56 */ "expr ::= ID",
 /*  57 */ "expr ::= exprs",
 /*  58 */ "expr ::= DOLLAR ID COLON ID",
 /*  59 */ "expr ::= expr modifier modparameters",
 /*  60 */ "exprs ::= value",
 /*  61 */ "exprs ::= UNIMATH value",
 /*  62 */ "exprs ::= exprs math value",
 /*  63 */ "exprs ::= array",
 /*  64 */ "ternary ::= OPENP ifexprs CLOSEP QMARK expr COLON expr",
 /*  65 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  66 */ "math ::= UNIMATH",
 /*  67 */ "math ::= MATH",
 /*  68 */ "math ::= ANDSYM",
 /*  69 */ "value ::= variable",
 /*  70 */ "value ::= TYPECAST variable",
 /*  71 */ "value ::= variable INCDEC",
 /*  72 */ "value ::= INTEGER",
 /*  73 */ "value ::= INTEGER DOT INTEGER",
 /*  74 */ "value ::= BOOLEAN",
 /*  75 */ "value ::= NULL",
 /*  76 */ "value ::= function",
 /*  77 */ "value ::= OPENP expr CLOSEP",
 /*  78 */ "value ::= SINGLEQUOTESTRING",
 /*  79 */ "value ::= QUOTE doublequoted QUOTE",
 /*  80 */ "value ::= QUOTE QUOTE",
 /*  81 */ "value ::= ID DOUBLECOLON method",
 /*  82 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP",
 /*  83 */ "value ::= ID DOUBLECOLON method objectchain",
 /*  84 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP objectchain",
 /*  85 */ "value ::= ID DOUBLECOLON ID",
 /*  86 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex",
 /*  87 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex objectchain",
 /*  88 */ "value ::= smartytag",
 /*  89 */ "variable ::= varindexed",
 /*  90 */ "variable ::= DOLLAR varvar AT ID",
 /*  91 */ "variable ::= object",
 /*  92 */ "variable ::= HATCH ID HATCH",
 /*  93 */ "variable ::= HATCH variable HATCH",
 /*  94 */ "varindexed ::= DOLLAR varvar arrayindex",
 /*  95 */ "arrayindex ::= arrayindex indexdef",
 /*  96 */ "arrayindex ::=",
 /*  97 */ "indexdef ::= DOT ID",
 /*  98 */ "indexdef ::= DOT BOOLEAN",
 /*  99 */ "indexdef ::= DOT NULL",
 /* 100 */ "indexdef ::= DOT INTEGER",
 /* 101 */ "indexdef ::= DOT variable",
 /* 102 */ "indexdef ::= DOT LDEL exprs RDEL",
 /* 103 */ "indexdef ::= OPENB ID CLOSEB",
 /* 104 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 105 */ "indexdef ::= OPENB exprs CLOSEB",
 /* 106 */ "indexdef ::= OPENB CLOSEB",
 /* 107 */ "varvar ::= varvarele",
 /* 108 */ "varvar ::= varvar varvarele",
 /* 109 */ "varvarele ::= ID",
 /* 110 */ "varvarele ::= LDEL expr RDEL",
 /* 111 */ "object ::= varindexed objectchain",
 /* 112 */ "objectchain ::= objectelement",
 /* 113 */ "objectchain ::= objectchain objectelement",
 /* 114 */ "objectelement ::= PTR ID arrayindex",
 /* 115 */ "objectelement ::= PTR variable arrayindex",
 /* 116 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 117 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 118 */ "objectelement ::= PTR method",
 /* 119 */ "function ::= ID OPENP params CLOSEP",
 /* 120 */ "method ::= ID OPENP params CLOSEP",
 /* 121 */ "params ::= expr COMMA params",
 /* 122 */ "params ::= expr",
 /* 123 */ "params ::=",
 /* 124 */ "modifier ::= VERT AT ID",
 /* 125 */ "modifier ::= VERT ID",
 /* 126 */ "modparameters ::= modparameters modparameter",
 /* 127 */ "modparameters ::=",
 /* 128 */ "modparameter ::= COLON exprs",
 /* 129 */ "modparameter ::= COLON ID",
 /* 130 */ "ifexprs ::= ifexpr",
 /* 131 */ "ifexprs ::= NOT ifexprs",
 /* 132 */ "ifexprs ::= OPENP ifexprs CLOSEP",
 /* 133 */ "ifexpr ::= expr",
 /* 134 */ "ifexpr ::= expr ifcond expr",
 /* 135 */ "ifexpr ::= expr ISIN array",
 /* 136 */ "ifexpr ::= expr ISIN value",
 /* 137 */ "ifexpr ::= ifexprs lop ifexprs",
 /* 138 */ "ifexpr ::= ifexprs ISDIVBY ifexprs",
 /* 139 */ "ifexpr ::= ifexprs ISNOTDIVBY ifexprs",
 /* 140 */ "ifexpr ::= ifexprs ISEVEN",
 /* 141 */ "ifexpr ::= ifexprs ISNOTEVEN",
 /* 142 */ "ifexpr ::= ifexprs ISEVENBY ifexprs",
 /* 143 */ "ifexpr ::= ifexprs ISNOTEVENBY ifexprs",
 /* 144 */ "ifexpr ::= ifexprs ISODD",
 /* 145 */ "ifexpr ::= ifexprs ISNOTODD",
 /* 146 */ "ifexpr ::= ifexprs ISODDBY ifexprs",
 /* 147 */ "ifexpr ::= ifexprs ISNOTODDBY ifexprs",
 /* 148 */ "ifexpr ::= value INSTANCEOF ID",
 /* 149 */ "ifexpr ::= value INSTANCEOF value",
 /* 150 */ "ifcond ::= EQUALS",
 /* 151 */ "ifcond ::= NOTEQUALS",
 /* 152 */ "ifcond ::= GREATERTHAN",
 /* 153 */ "ifcond ::= LESSTHAN",
 /* 154 */ "ifcond ::= GREATEREQUAL",
 /* 155 */ "ifcond ::= LESSEQUAL",
 /* 156 */ "ifcond ::= IDENTITY",
 /* 157 */ "ifcond ::= NONEIDENTITY",
 /* 158 */ "ifcond ::= MOD",
 /* 159 */ "lop ::= LAND",
 /* 160 */ "lop ::= LOR",
 /* 161 */ "lop ::= LXOR",
 /* 162 */ "array ::= OPENB arrayelements CLOSEB",
 /* 163 */ "arrayelements ::= arrayelement",
 /* 164 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 165 */ "arrayelements ::=",
 /* 166 */ "arrayelement ::= value APTR expr",
 /* 167 */ "arrayelement ::= ID APTR expr",
 /* 168 */ "arrayelement ::= expr",
 /* 169 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 170 */ "doublequoted ::= doublequotedcontent",
 /* 171 */ "doublequotedcontent ::= BACKTICK variable BACKTICK",
 /* 172 */ "doublequotedcontent ::= DOLLARID",
 /* 173 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 174 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 175 */ "doublequotedcontent ::= smartytag",
 /* 176 */ "doublequotedcontent ::= OTHER",
 /* 177 */ "optspace ::= SPACE",
 /* 178 */ "optspace ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param TP_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 7 ),
  array( 'lhs' => 74, 'rhs' => 7 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 8 ),
  array( 'lhs' => 74, 'rhs' => 5 ),
  array( 'lhs' => 74, 'rhs' => 5 ),
  array( 'lhs' => 74, 'rhs' => 13 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 8 ),
  array( 'lhs' => 74, 'rhs' => 11 ),
  array( 'lhs' => 74, 'rhs' => 8 ),
  array( 'lhs' => 74, 'rhs' => 11 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 6 ),
  array( 'lhs' => 74, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 0 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 7 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 8 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 5 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 0 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 4 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 5 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 103, 'rhs' => 6 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 96, 'rhs' => 4 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 0 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 0 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 0 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        38 => 0,
        39 => 0,
        40 => 0,
        60 => 0,
        69 => 0,
        72 => 0,
        74 => 0,
        75 => 0,
        76 => 0,
        78 => 0,
        91 => 0,
        163 => 0,
        1 => 1,
        57 => 1,
        63 => 1,
        66 => 1,
        67 => 1,
        107 => 1,
        130 => 1,
        170 => 1,
        176 => 1,
        177 => 1,
        2 => 2,
        126 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 11,
        13 => 11,
        14 => 11,
        15 => 15,
        16 => 15,
        17 => 17,
        18 => 17,
        19 => 19,
        20 => 19,
        21 => 21,
        22 => 21,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        45 => 31,
        122 => 31,
        168 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 36,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 48,
        50 => 48,
        52 => 48,
        51 => 51,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        58 => 58,
        59 => 59,
        61 => 61,
        70 => 61,
        71 => 61,
        62 => 62,
        64 => 64,
        65 => 64,
        68 => 68,
        73 => 73,
        77 => 77,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        169 => 95,
        96 => 96,
        127 => 96,
        97 => 97,
        98 => 97,
        99 => 97,
        100 => 100,
        101 => 101,
        102 => 102,
        105 => 102,
        103 => 103,
        104 => 104,
        106 => 106,
        178 => 106,
        108 => 108,
        109 => 109,
        110 => 110,
        132 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        123 => 123,
        124 => 124,
        125 => 125,
        128 => 128,
        129 => 129,
        131 => 131,
        133 => 133,
        134 => 134,
        137 => 134,
        148 => 134,
        135 => 135,
        136 => 136,
        138 => 138,
        139 => 139,
        140 => 140,
        145 => 140,
        141 => 141,
        144 => 141,
        142 => 142,
        147 => 142,
        143 => 143,
        146 => 143,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        171 => 171,
        173 => 171,
        172 => 172,
        174 => 174,
        175 => 175,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 78 "smarty_internal_templateparser.y"
    function yy_r0(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2054 "smarty_internal_templateparser.php"
#line 84 "smarty_internal_templateparser.y"
    function yy_r1(){$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2057 "smarty_internal_templateparser.php"
#line 86 "smarty_internal_templateparser.y"
    function yy_r2(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2060 "smarty_internal_templateparser.php"
#line 92 "smarty_internal_templateparser.y"
    function yy_r3(){
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + 0]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;}  $this->compiler->has_variable_string = false;    }
#line 2067 "smarty_internal_templateparser.php"
#line 99 "smarty_internal_templateparser.y"
    function yy_r4(){ $this->_retvalue = '';    }
#line 2070 "smarty_internal_templateparser.php"
#line 104 "smarty_internal_templateparser.y"
    function yy_r5(){if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo htmlspecialchars('<?php".str_replace("'","\'",$this->yystack[$this->yyidx + -1]->minor)."?>', ENT_QUOTES);?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', $this->compiler, true);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2082 "smarty_internal_templateparser.php"
#line 115 "smarty_internal_templateparser.y"
    function yy_r6(){ 
                                      if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU || $this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?=".$this->yystack[$this->yyidx + -1]->minor."?>'?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?='.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2093 "smarty_internal_templateparser.php"
#line 126 "smarty_internal_templateparser.y"
    function yy_r7(){ $this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true);    }
#line 2096 "smarty_internal_templateparser.php"
#line 127 "smarty_internal_templateparser.y"
    function yy_r8(){$this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '?>';?>\n", $this->compiler, true);    }
#line 2099 "smarty_internal_templateparser.php"
#line 129 "smarty_internal_templateparser.y"
    function yy_r9(){$this->_retvalue = $this->cacher->processNocacheCode($this->yystack[$this->yyidx + 0]->minor, $this->compiler,false);    }
#line 2102 "smarty_internal_templateparser.php"
#line 137 "smarty_internal_templateparser.y"
    function yy_r10(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array('value'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2105 "smarty_internal_templateparser.php"
#line 138 "smarty_internal_templateparser.y"
    function yy_r11(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2108 "smarty_internal_templateparser.php"
#line 149 "smarty_internal_templateparser.y"
    function yy_r15(){ $this->_retvalue = $this->compiler->compileTag('assign',array('value'=>$this->yystack[$this->yyidx + -1]->minor,'var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'"));    }
#line 2111 "smarty_internal_templateparser.php"
#line 151 "smarty_internal_templateparser.y"
    function yy_r17(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor,'var'=>"'".$this->yystack[$this->yyidx + -4]->minor."'"),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2114 "smarty_internal_templateparser.php"
#line 153 "smarty_internal_templateparser.y"
    function yy_r19(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor));    }
#line 2117 "smarty_internal_templateparser.php"
#line 156 "smarty_internal_templateparser.y"
    function yy_r21(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + -1]->minor);    }
#line 2120 "smarty_internal_templateparser.php"
#line 158 "smarty_internal_templateparser.y"
    function yy_r23(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,array());    }
#line 2123 "smarty_internal_templateparser.php"
#line 160 "smarty_internal_templateparser.y"
    function yy_r24(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2126 "smarty_internal_templateparser.php"
#line 162 "smarty_internal_templateparser.y"
    function yy_r25(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2141 "smarty_internal_templateparser.php"
#line 176 "smarty_internal_templateparser.y"
    function yy_r26(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -4]->minor),$this->yystack[$this->yyidx + -1]->minor)).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2156 "smarty_internal_templateparser.php"
#line 190 "smarty_internal_templateparser.y"
    function yy_r27(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2159 "smarty_internal_templateparser.php"
#line 193 "smarty_internal_templateparser.y"
    function yy_r29(){
                                                             $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -11]->minor,array('start'=>$this->yystack[$this->yyidx + -9]->minor,'ifexp'=>$this->yystack[$this->yyidx + -6]->minor,'varloop'=>$this->yystack[$this->yyidx + -2]->minor,'loop'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2163 "smarty_internal_templateparser.php"
#line 195 "smarty_internal_templateparser.y"
    function yy_r30(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2166 "smarty_internal_templateparser.php"
#line 196 "smarty_internal_templateparser.y"
    function yy_r31(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2169 "smarty_internal_templateparser.php"
#line 198 "smarty_internal_templateparser.y"
    function yy_r32(){
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2173 "smarty_internal_templateparser.php"
#line 200 "smarty_internal_templateparser.y"
    function yy_r33(){
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -9]->minor,array('from'=>$this->yystack[$this->yyidx + -7]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor,'key'=>$this->yystack[$this->yyidx + -4]->minor));    }
#line 2177 "smarty_internal_templateparser.php"
#line 202 "smarty_internal_templateparser.y"
    function yy_r34(){ 
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2181 "smarty_internal_templateparser.php"
#line 204 "smarty_internal_templateparser.y"
    function yy_r35(){ 
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -9]->minor,array('from'=>$this->yystack[$this->yyidx + -7]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor,'key'=>$this->yystack[$this->yyidx + -4]->minor));    }
#line 2185 "smarty_internal_templateparser.php"
#line 208 "smarty_internal_templateparser.y"
    function yy_r36(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array());    }
#line 2188 "smarty_internal_templateparser.php"
#line 213 "smarty_internal_templateparser.y"
    function yy_r41(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',$this->yystack[$this->yyidx + -1]->minor);    }
#line 2191 "smarty_internal_templateparser.php"
#line 214 "smarty_internal_templateparser.y"
    function yy_r42(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor.'close',$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2206 "smarty_internal_templateparser.php"
#line 228 "smarty_internal_templateparser.y"
    function yy_r43(){  $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2209 "smarty_internal_templateparser.php"
#line 235 "smarty_internal_templateparser.y"
    function yy_r44(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);    }
#line 2212 "smarty_internal_templateparser.php"
#line 239 "smarty_internal_templateparser.y"
    function yy_r46(){ $this->_retvalue = array();    }
#line 2215 "smarty_internal_templateparser.php"
#line 242 "smarty_internal_templateparser.y"
    function yy_r47(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");    }
#line 2218 "smarty_internal_templateparser.php"
#line 243 "smarty_internal_templateparser.y"
    function yy_r48(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2221 "smarty_internal_templateparser.php"
#line 246 "smarty_internal_templateparser.y"
    function yy_r51(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor=>'true');    }
#line 2224 "smarty_internal_templateparser.php"
#line 253 "smarty_internal_templateparser.y"
    function yy_r53(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);    }
#line 2227 "smarty_internal_templateparser.php"
#line 254 "smarty_internal_templateparser.y"
    function yy_r54(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;    }
#line 2230 "smarty_internal_templateparser.php"
#line 256 "smarty_internal_templateparser.y"
    function yy_r55(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2233 "smarty_internal_templateparser.php"
#line 262 "smarty_internal_templateparser.y"
    function yy_r56(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';     }
#line 2236 "smarty_internal_templateparser.php"
#line 265 "smarty_internal_templateparser.y"
    function yy_r58(){$this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';    }
#line 2239 "smarty_internal_templateparser.php"
#line 266 "smarty_internal_templateparser.y"
    function yy_r59(){            
                                                            if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -1]->minor[0],'modifier')) {
                                                                      $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -1]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -1]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -1]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                }
#line 2254 "smarty_internal_templateparser.php"
#line 283 "smarty_internal_templateparser.y"
    function yy_r61(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2257 "smarty_internal_templateparser.php"
#line 285 "smarty_internal_templateparser.y"
    function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2260 "smarty_internal_templateparser.php"
#line 292 "smarty_internal_templateparser.y"
    function yy_r64(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2263 "smarty_internal_templateparser.php"
#line 306 "smarty_internal_templateparser.y"
    function yy_r68(){$this->_retvalue = ' & ';    }
#line 2266 "smarty_internal_templateparser.php"
#line 314 "smarty_internal_templateparser.y"
    function yy_r73(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2269 "smarty_internal_templateparser.php"
#line 324 "smarty_internal_templateparser.y"
    function yy_r77(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";     }
#line 2272 "smarty_internal_templateparser.php"
#line 328 "smarty_internal_templateparser.y"
    function yy_r79(){ $_s = str_replace(array('."".','.""'),array('.',''),'"'.$this->yystack[$this->yyidx + -1]->minor.'"'); 
                                                    if (substr($_s,0,3) == '"".') {
                                                      $this->_retvalue = substr($_s,3);
                                                    } else {
                                                      $this->_retvalue = $_s;
                                                    }
                                                      }
#line 2281 "smarty_internal_templateparser.php"
#line 335 "smarty_internal_templateparser.y"
    function yy_r80(){ $this->_retvalue = "''";     }
#line 2284 "smarty_internal_templateparser.php"
#line 337 "smarty_internal_templateparser.y"
    function yy_r81(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2287 "smarty_internal_templateparser.php"
#line 338 "smarty_internal_templateparser.y"
    function yy_r82(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -3]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -1]->minor .')';     }
#line 2290 "smarty_internal_templateparser.php"
#line 340 "smarty_internal_templateparser.y"
    function yy_r83(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor.'::'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2293 "smarty_internal_templateparser.php"
#line 341 "smarty_internal_templateparser.y"
    function yy_r84(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -4]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -7]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -2]->minor .')'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2296 "smarty_internal_templateparser.php"
#line 343 "smarty_internal_templateparser.y"
    function yy_r85(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2299 "smarty_internal_templateparser.php"
#line 345 "smarty_internal_templateparser.y"
    function yy_r86(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor.'::$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2302 "smarty_internal_templateparser.php"
#line 347 "smarty_internal_templateparser.y"
    function yy_r87(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.'::$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2305 "smarty_internal_templateparser.php"
#line 349 "smarty_internal_templateparser.y"
    function yy_r88(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number;     }
#line 2308 "smarty_internal_templateparser.php"
#line 358 "smarty_internal_templateparser.y"
    function yy_r89(){if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + 0]->minor['index']);} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + 0]->minor['var'] .')->value'.$this->yystack[$this->yyidx + 0]->minor['index']; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor['var'],"'"), null, true, false)->nocache;}    }
#line 2312 "smarty_internal_templateparser.php"
#line 361 "smarty_internal_templateparser.y"
    function yy_r90(){ $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -2]->minor .')->'.$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -2]->minor,"'"), null, true, false)->nocache;    }
#line 2315 "smarty_internal_templateparser.php"
#line 365 "smarty_internal_templateparser.y"
    function yy_r92(){$this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';    }
#line 2318 "smarty_internal_templateparser.php"
#line 366 "smarty_internal_templateparser.y"
    function yy_r93(){$this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';    }
#line 2321 "smarty_internal_templateparser.php"
#line 369 "smarty_internal_templateparser.y"
    function yy_r94(){$this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'index'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2324 "smarty_internal_templateparser.php"
#line 375 "smarty_internal_templateparser.y"
    function yy_r95(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2327 "smarty_internal_templateparser.php"
#line 377 "smarty_internal_templateparser.y"
    function yy_r96(){return;    }
#line 2330 "smarty_internal_templateparser.php"
#line 381 "smarty_internal_templateparser.y"
    function yy_r97(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']";    }
#line 2333 "smarty_internal_templateparser.php"
#line 385 "smarty_internal_templateparser.y"
    function yy_r100(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";    }
#line 2336 "smarty_internal_templateparser.php"
#line 386 "smarty_internal_templateparser.y"
    function yy_r101(){ $this->_retvalue = "[".$this->yystack[$this->yyidx + 0]->minor."]";    }
#line 2339 "smarty_internal_templateparser.php"
#line 387 "smarty_internal_templateparser.y"
    function yy_r102(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]";    }
#line 2342 "smarty_internal_templateparser.php"
#line 389 "smarty_internal_templateparser.y"
    function yy_r103(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';    }
#line 2345 "smarty_internal_templateparser.php"
#line 390 "smarty_internal_templateparser.y"
    function yy_r104(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';    }
#line 2348 "smarty_internal_templateparser.php"
#line 394 "smarty_internal_templateparser.y"
    function yy_r106(){$this->_retvalue = '';    }
#line 2351 "smarty_internal_templateparser.php"
#line 402 "smarty_internal_templateparser.y"
    function yy_r108(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2354 "smarty_internal_templateparser.php"
#line 404 "smarty_internal_templateparser.y"
    function yy_r109(){$this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2357 "smarty_internal_templateparser.php"
#line 407 "smarty_internal_templateparser.y"
    function yy_r110(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2360 "smarty_internal_templateparser.php"
#line 412 "smarty_internal_templateparser.y"
    function yy_r111(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + -1]->minor['index']).$this->yystack[$this->yyidx + 0]->minor;} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -1]->minor['var'] .')->value'.$this->yystack[$this->yyidx + -1]->minor['index'].$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -1]->minor['var'],"'"), null, true, false)->nocache;}    }
#line 2364 "smarty_internal_templateparser.php"
#line 415 "smarty_internal_templateparser.y"
    function yy_r112(){$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2367 "smarty_internal_templateparser.php"
#line 417 "smarty_internal_templateparser.y"
    function yy_r113(){$this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2370 "smarty_internal_templateparser.php"
#line 419 "smarty_internal_templateparser.y"
    function yy_r114(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2373 "smarty_internal_templateparser.php"
#line 420 "smarty_internal_templateparser.y"
    function yy_r115(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2376 "smarty_internal_templateparser.php"
#line 421 "smarty_internal_templateparser.y"
    function yy_r116(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2379 "smarty_internal_templateparser.php"
#line 422 "smarty_internal_templateparser.y"
    function yy_r117(){ $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2382 "smarty_internal_templateparser.php"
#line 424 "smarty_internal_templateparser.y"
    function yy_r118(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2385 "smarty_internal_templateparser.php"
#line 430 "smarty_internal_templateparser.y"
    function yy_r119(){if (!$this->template->security || $this->smarty->security_handler->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
																					            if ($this->yystack[$this->yyidx + -3]->minor == 'isset' || $this->yystack[$this->yyidx + -3]->minor == 'empty' || $this->yystack[$this->yyidx + -3]->minor == 'array' || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
																					                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";
																					            } else {
                                                       $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
                                                      }
                                                    }    }
#line 2394 "smarty_internal_templateparser.php"
#line 441 "smarty_internal_templateparser.y"
    function yy_r120(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";    }
#line 2397 "smarty_internal_templateparser.php"
#line 445 "smarty_internal_templateparser.y"
    function yy_r121(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.",".$this->yystack[$this->yyidx + 0]->minor;    }
#line 2400 "smarty_internal_templateparser.php"
#line 449 "smarty_internal_templateparser.y"
    function yy_r123(){ return;    }
#line 2403 "smarty_internal_templateparser.php"
#line 454 "smarty_internal_templateparser.y"
    function yy_r124(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'false');    }
#line 2406 "smarty_internal_templateparser.php"
#line 455 "smarty_internal_templateparser.y"
    function yy_r125(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'true');    }
#line 2409 "smarty_internal_templateparser.php"
#line 471 "smarty_internal_templateparser.y"
    function yy_r128(){$this->_retvalue = ','.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2412 "smarty_internal_templateparser.php"
#line 472 "smarty_internal_templateparser.y"
    function yy_r129(){$this->_retvalue = ',\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2415 "smarty_internal_templateparser.php"
#line 479 "smarty_internal_templateparser.y"
    function yy_r131(){$this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2418 "smarty_internal_templateparser.php"
#line 484 "smarty_internal_templateparser.y"
    function yy_r133(){$this->_retvalue =$this->yystack[$this->yyidx + 0]->minor;    }
#line 2421 "smarty_internal_templateparser.php"
#line 486 "smarty_internal_templateparser.y"
    function yy_r134(){$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2424 "smarty_internal_templateparser.php"
#line 487 "smarty_internal_templateparser.y"
    function yy_r135(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2427 "smarty_internal_templateparser.php"
#line 488 "smarty_internal_templateparser.y"
    function yy_r136(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2430 "smarty_internal_templateparser.php"
#line 490 "smarty_internal_templateparser.y"
    function yy_r138(){$this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2433 "smarty_internal_templateparser.php"
#line 491 "smarty_internal_templateparser.y"
    function yy_r139(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2436 "smarty_internal_templateparser.php"
#line 492 "smarty_internal_templateparser.y"
    function yy_r140(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2439 "smarty_internal_templateparser.php"
#line 493 "smarty_internal_templateparser.y"
    function yy_r141(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2442 "smarty_internal_templateparser.php"
#line 494 "smarty_internal_templateparser.y"
    function yy_r142(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2445 "smarty_internal_templateparser.php"
#line 495 "smarty_internal_templateparser.y"
    function yy_r143(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2448 "smarty_internal_templateparser.php"
#line 501 "smarty_internal_templateparser.y"
    function yy_r149(){$this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number;    }
#line 2451 "smarty_internal_templateparser.php"
#line 503 "smarty_internal_templateparser.y"
    function yy_r150(){$this->_retvalue = '==';    }
#line 2454 "smarty_internal_templateparser.php"
#line 504 "smarty_internal_templateparser.y"
    function yy_r151(){$this->_retvalue = '!=';    }
#line 2457 "smarty_internal_templateparser.php"
#line 505 "smarty_internal_templateparser.y"
    function yy_r152(){$this->_retvalue = '>';    }
#line 2460 "smarty_internal_templateparser.php"
#line 506 "smarty_internal_templateparser.y"
    function yy_r153(){$this->_retvalue = '<';    }
#line 2463 "smarty_internal_templateparser.php"
#line 507 "smarty_internal_templateparser.y"
    function yy_r154(){$this->_retvalue = '>=';    }
#line 2466 "smarty_internal_templateparser.php"
#line 508 "smarty_internal_templateparser.y"
    function yy_r155(){$this->_retvalue = '<=';    }
#line 2469 "smarty_internal_templateparser.php"
#line 509 "smarty_internal_templateparser.y"
    function yy_r156(){$this->_retvalue = '===';    }
#line 2472 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r157(){$this->_retvalue = '!==';    }
#line 2475 "smarty_internal_templateparser.php"
#line 511 "smarty_internal_templateparser.y"
    function yy_r158(){$this->_retvalue = '%';    }
#line 2478 "smarty_internal_templateparser.php"
#line 513 "smarty_internal_templateparser.y"
    function yy_r159(){$this->_retvalue = '&&';    }
#line 2481 "smarty_internal_templateparser.php"
#line 514 "smarty_internal_templateparser.y"
    function yy_r160(){$this->_retvalue = '||';    }
#line 2484 "smarty_internal_templateparser.php"
#line 515 "smarty_internal_templateparser.y"
    function yy_r161(){$this->_retvalue = ' XOR ';    }
#line 2487 "smarty_internal_templateparser.php"
#line 520 "smarty_internal_templateparser.y"
    function yy_r162(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2490 "smarty_internal_templateparser.php"
#line 522 "smarty_internal_templateparser.y"
    function yy_r164(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2493 "smarty_internal_templateparser.php"
#line 523 "smarty_internal_templateparser.y"
    function yy_r165(){ return;     }
#line 2496 "smarty_internal_templateparser.php"
#line 524 "smarty_internal_templateparser.y"
    function yy_r166(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2499 "smarty_internal_templateparser.php"
#line 525 "smarty_internal_templateparser.y"
    function yy_r167(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2502 "smarty_internal_templateparser.php"
#line 534 "smarty_internal_templateparser.y"
    function yy_r171(){$this->_retvalue = '".'.$this->yystack[$this->yyidx + -1]->minor.'."'; $this->compiler->has_variable_string = true;    }
#line 2505 "smarty_internal_templateparser.php"
#line 535 "smarty_internal_templateparser.y"
    function yy_r172(){$this->_retvalue = '".'.'$_smarty_tpl->getVariable(\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')->value'.'."'; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor,"'"), null, true, false)->nocache; $this->compiler->has_variable_string = true;    }
#line 2508 "smarty_internal_templateparser.php"
#line 537 "smarty_internal_templateparser.y"
    function yy_r174(){ $this->_retvalue = '".('.$this->yystack[$this->yyidx + -1]->minor.')."'; $this->compiler->has_variable_string = true;    }
#line 2511 "smarty_internal_templateparser.php"
#line 538 "smarty_internal_templateparser.y"
    function yy_r175(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '".$_tmp'.$this->prefix_number.'."'; $this->compiler->has_variable_string = true;    }
#line 2514 "smarty_internal_templateparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //TP_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 60 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2632 "smarty_internal_templateparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
#line 52 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    //echo $this->retvalue."\n\n";
#line 2657 "smarty_internal_templateparser.php"
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
?>
