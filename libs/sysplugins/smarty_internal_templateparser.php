<?php
/**
* Smarty Internal Plugin Templateparser
*
* This is the template parser.
* It is generated from the internal.templateparser.y file
* @package Smarty
* @subpackage Compiler
* @author Uwe Tews
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 12 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 109 "smarty_internal_templateparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 14 "smarty_internal_templateparser.y"

    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    private $lex;
    private $internalError = false;

    function __construct($lex, $compiler) {
        // set instance object
        self::instance($this); 
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        if ($this->template->security && isset($this->smarty->security_handler)) {
              $this->sec_obj = $this->smarty->security_policy;
        } else {
              $this->sec_obj = $this->smarty;
        }
        $this->cacher = $this->template->cacher_object; 
        $this->compiler->has_variable_string = false;
				$this->compiler->prefix_code = array();
				$this->prefix_number = 0;
    }
    public static function &instance($new_instance = null)
    {
        static $instance = null;
        if (isset($new_instance) && is_object($new_instance))
            $instance = $new_instance;
        return $instance;
    }
    
#line 147 "smarty_internal_templateparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const TP_COMMENT                        =  1;
    const TP_PHP                            =  2;
    const TP_OTHER                          =  3;
    const TP_SHORTTAGEND                    =  4;
    const TP_SHORTTAGSTART                  =  5;
    const TP_XML                            =  6;
    const TP_LDEL                           =  7;
    const TP_RDEL                           =  8;
    const TP_DOLLAR                         =  9;
    const TP_ID                             = 10;
    const TP_EQUAL                          = 11;
    const TP_FOREACH                        = 12;
    const TP_PTR                            = 13;
    const TP_IF                             = 14;
    const TP_SPACE                          = 15;
    const TP_FOR                            = 16;
    const TP_SEMICOLON                      = 17;
    const TP_INCDEC                         = 18;
    const TP_AS                             = 19;
    const TP_APTR                           = 20;
    const TP_LDELSLASH                      = 21;
    const TP_INTEGER                        = 22;
    const TP_COMMA                          = 23;
    const TP_COLON                          = 24;
    const TP_UNIMATH                        = 25;
    const TP_OPENP                          = 26;
    const TP_CLOSEP                         = 27;
    const TP_QMARK                          = 28;
    const TP_MATH                           = 29;
    const TP_ANDSYM                         = 30;
    const TP_TYPECAST                       = 31;
    const TP_DOT                            = 32;
    const TP_CONSTANT                       = 33;
    const TP_BOOLEAN                        = 34;
    const TP_NULL                           = 35;
    const TP_SINGLEQUOTESTRING              = 36;
    const TP_QUOTE                          = 37;
    const TP_DOUBLECOLON                    = 38;
    const TP_AT                             = 39;
    const TP_HATCH                          = 40;
    const TP_OPENB                          = 41;
    const TP_CLOSEB                         = 42;
    const TP_VERT                           = 43;
    const TP_NOT                            = 44;
    const TP_ISIN                           = 45;
    const TP_ISDIVBY                        = 46;
    const TP_ISNOTDIVBY                     = 47;
    const TP_ISEVEN                         = 48;
    const TP_ISNOTEVEN                      = 49;
    const TP_ISEVENBY                       = 50;
    const TP_ISNOTEVENBY                    = 51;
    const TP_ISODD                          = 52;
    const TP_ISNOTODD                       = 53;
    const TP_ISODDBY                        = 54;
    const TP_ISNOTODDBY                     = 55;
    const TP_INSTANCEOF                     = 56;
    const TP_EQUALS                         = 57;
    const TP_NOTEQUALS                      = 58;
    const TP_GREATERTHAN                    = 59;
    const TP_LESSTHAN                       = 60;
    const TP_GREATEREQUAL                   = 61;
    const TP_LESSEQUAL                      = 62;
    const TP_IDENTITY                       = 63;
    const TP_NONEIDENTITY                   = 64;
    const TP_MOD                            = 65;
    const TP_LAND                           = 66;
    const TP_LOR                            = 67;
    const TP_LXOR                           = 68;
    const TP_BACKTICK                       = 69;
    const TP_DOLLARID                       = 70;
    const YY_NO_ACTION = 543;
    const YY_ACCEPT_ACTION = 542;
    const YY_ERROR_ACTION = 541;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1367;
static public $yy_action = array(
 /*     0 */    15,  156,   72,   49,  266,   88,  286,  201,   18,  190,
 /*    10 */    28,  317,  284,  320,  109,  192,  275,  278,   44,    7,
 /*    20 */   115,    8,   28,  209,   62,  216,  356,  348,  341,  352,
 /*    30 */    48,  276,  231,   52,   13,   15,  299,   73,  182,  175,
 /*    40 */   302,   83,  242,   74,   61,   89,   84,  178,  299,  109,
 /*    50 */   192,  214,  213,   44,    9,  243,   71,  198,  114,   62,
 /*    60 */   339,  356,  348,  341,  352,   48,  245,   28,   52,   13,
 /*    70 */   320,   15,   11,   77,  182,  268,  302,   83,  148,   75,
 /*    80 */    51,   89,   84,   47,  153,  109,  192,   52,  132,   44,
 /*    90 */     9,  243,   38,  299,  114,   62,  339,  356,  348,  341,
 /*   100 */   352,   48,  245,   28,   52,   13,  177,   15,   11,   71,
 /*   110 */   170,   46,  270,  203,  285,  315,  208,  316,   15,   36,
 /*   120 */    57,  109,  192,   27,   28,   44,   30,  320,   26,  299,
 /*   130 */    47,   62,  109,  356,  348,  341,  352,   48,  178,   38,
 /*   140 */    52,   13,  251,   15,  186,   73,  182,  220,  302,  219,
 /*   150 */   299,  221,  159,  228,   90,  327,  211,  109,  192,  207,
 /*   160 */   121,   44,   30,  243,   20,  169,  114,   62,  339,  356,
 /*   170 */   348,  341,  352,   48,  245,  291,   52,   13,   15,   18,
 /*   180 */    73,  182,  184,  306,   28,  175,  194,  320,   25,   90,
 /*   190 */   178,  115,  109,  192,   39,  265,   44,    7,  542,   66,
 /*   200 */   235,  272,   62,  196,  356,  348,  341,  352,   48,  245,
 /*   210 */   299,   52,   13,   15,   18,   73,  171,  319,  302,  303,
 /*   220 */   224,  221,   58,   91,   90,  166,  115,  109,  192,  239,
 /*   230 */   257,   44,    7,  243,  164,  152,  114,   62,  339,  356,
 /*   240 */   348,  341,  352,   48,  245,  405,   52,   13,   15,  250,
 /*   250 */    73,  172,  175,  302,  219,  242,  221,  159,  218,   90,
 /*   260 */   178,  163,  109,  192,   90,  151,   44,   30,  243,  178,
 /*   270 */   286,  114,   62,  339,  356,  348,  341,  352,   48,  245,
 /*   280 */   244,   52,   13,   15,  245,   71,  176,   59,  305,   24,
 /*   290 */   142,   71,  135,   28,  334,  168,  320,  109,  192,  138,
 /*   300 */   168,   44,   30,  248,  168,  291,  199,   62,  342,  356,
 /*   310 */   348,  341,  352,   48,  291,  175,   52,   13,   15,  299,
 /*   320 */    71,  180,   52,  302,  205,   35,  221,   54,   85,   90,
 /*   330 */    16,   28,  109,  192,  320,   26,   44,   30,  243,  260,
 /*   340 */   242,  114,   62,  339,  356,  348,  341,  352,   48,  245,
 /*   350 */   178,   52,   13,   15,   18,   71,  173,  299,  302,  179,
 /*   360 */   146,  221,  160,  271,   90,   20,  115,  109,  183,   34,
 /*   370 */   123,  415,   30,  243,   45,  167,  114,   62,  339,  356,
 /*   380 */   348,  341,  352,   48,  245,  291,   52,   13,   23,    6,
 /*   390 */     5,  290,  289,    2,    3,  287,  288,    4,   10,   15,
 /*   400 */    31,   71,  180,  155,   28,  333,   33,  320,  286,  345,
 /*   410 */   346,  347,   18,  109,  192,  344,  158,  233,   30,   28,
 /*   420 */    55,  286,  320,   62,  115,  356,  348,  341,  352,   48,
 /*   430 */   299,  246,   52,   13,    6,    5,  290,  289,    2,    3,
 /*   440 */   287,  288,    4,   10,  129,  299,  212,  175,  284,  112,
 /*   450 */   328,  211,  275,  278,  345,  346,  347,  302,  343,  240,
 /*   460 */   221,   22,   90,   90,  312,    6,    5,  290,  289,    2,
 /*   470 */     3,  287,  288,    4,   10,  178,  168,  339,  302,  279,
 /*   480 */   298,  221,  245,  245,   90,  345,  346,  347,    6,    5,
 /*   490 */   290,  289,    2,    3,  287,  288,    4,   10,  339,  355,
 /*   500 */   297,  237,  272,  225,  245,  226,  175,  175,  345,  346,
 /*   510 */   347,  124,    6,    5,  290,  289,    2,    3,  287,  288,
 /*   520 */     4,   10,   15,  284,   71,  181,  291,  275,  278,   17,
 /*   530 */    46,   46,  345,  346,  347,  178,  109,  192,  116,  321,
 /*   540 */   256,   30,   15,  168,   71,  180,   62,  189,  356,  348,
 /*   550 */   341,  352,   48,  291,   19,   52,  109,  192,   50,  227,
 /*   560 */   230,   30,  241,  178,  229,   42,   62,  215,  356,  348,
 /*   570 */   341,  352,   48,   28,  318,   52,  320,  311,  310,  307,
 /*   580 */   308,  309,  295,  294,  280,  281,  302,  222,  107,  221,
 /*   590 */    65,  276,   90,  267,  174,   95,  185,  191,  283,  299,
 /*   600 */    90,  243,  178,  312,  114,  175,  339,  178,  350,   42,
 /*   610 */   255,  238,  245,  302,  323,  175,  221,  277,   92,   90,
 /*   620 */   245,  311,  310,  307,  308,  309,  295,  294,  280,  281,
 /*   630 */   136,  302,  222,  339,  221,   65,  130,   90,  248,  245,
 /*   640 */   101,   32,   71,  178,  126,  291,  243,  319,  134,  114,
 /*   650 */   178,  339,   42,  282,  254,    1,  331,  245,  321,   67,
 /*   660 */   178,  175,  277,  291,  311,  310,  307,  308,  309,  295,
 /*   670 */   294,  280,  281,   52,  258,  357,  321,  302,  222,   87,
 /*   680 */   221,   65,  175,   90,  358,  118,  100,  337,  322,  178,
 /*   690 */   165,   90,  243,  353,  175,  114,  186,  339,  302,  222,
 /*   700 */   291,  221,   65,  245,   90,  197,  105,  102,  277,   56,
 /*   710 */   338,  245,  296,  243,   79,  106,  114,  175,  339,  175,
 /*   720 */   108,  312,  302,  222,  245,  221,   65,  354,   90,  277,
 /*   730 */   312,   97,  193,  236,  175,  312,  137,  243,  234,  119,
 /*   740 */   114,   69,  339,  302,  222,   18,  221,   65,  245,   90,
 /*   750 */   249,  291,  104,  277,  291,   78,  312,  115,  243,  329,
 /*   760 */   293,  114,  178,  339,   76,   70,  292,  175,   37,  245,
 /*   770 */   336,  259,  215,  175,  277,  302,  222,  175,  221,   64,
 /*   780 */   312,   90,  232,   40,   96,   71,  330,  263,  144,  175,
 /*   790 */   243,   23,   82,  114,  175,  339,  300,   68,  273,  302,
 /*   800 */   222,  245,  221,   65,   80,   90,  277,  195,   98,  332,
 /*   810 */   335,  326,  312,  140,  243,  349,   52,  114,  117,  339,
 /*   820 */   302,  222,  175,  221,   65,  245,   90,  131,  291,   93,
 /*   830 */   277,  187,  351,  291,  325,  243,  340,  324,  114,  175,
 /*   840 */   339,  175,  291,  304,  141,  206,  245,  408,   27,   29,
 /*   850 */   175,  277,  302,  222,  408,  221,   63,  261,   90,  291,
 /*   860 */    41,   94,  274,  175,   81,  266,   43,  243,   86,  319,
 /*   870 */   114,  252,  339,  223,  264,   14,  302,  222,  245,  221,
 /*   880 */    65,  200,   90,  277,   21,  103,  321,   53,   39,  109,
 /*   890 */    12,  243,  127,  262,  114,  296,  339,  302,  222,  296,
 /*   900 */   221,   65,  245,   90,  296,  269,   99,  277,  296,  296,
 /*   910 */   296,  296,  243,  296,  296,  114,  252,  339,  296,  296,
 /*   920 */    14,  296,  296,  245,  296,  296,  296,  296,  277,  302,
 /*   930 */   303,  296,  221,  120,  109,   90,  296,   60,  247,  296,
 /*   940 */   296,  296,  296,  296,  243,  296,  296,  114,  296,  339,
 /*   950 */   253,  296,  217,  302,  303,  245,  221,  120,  296,   90,
 /*   960 */   296,  296,  296,  296,  296,  296,  296,  296,  243,  296,
 /*   970 */   296,  114,  296,  339,  302,  303,  210,  221,  120,  245,
 /*   980 */    90,  296,   60,  247,  296,  296,  296,  296,  296,  243,
 /*   990 */   296,  296,  114,  296,  339,  296,  296,  188,  296,  296,
 /*  1000 */   245,  296,  296,  296,  302,  303,  296,  221,  120,  296,
 /*  1010 */    90,  302,  303,  296,  221,  154,  296,   90,  296,  243,
 /*  1020 */   296,  296,  114,  296,  339,  296,  243,  301,  296,  114,
 /*  1030 */   245,  339,  302,  303,  296,  221,  128,  245,   90,  296,
 /*  1040 */   296,  296,  296,  296,  296,  296,  296,  243,  296,  296,
 /*  1050 */   114,  296,  339,  302,  303,  296,  221,  143,  245,   90,
 /*  1060 */   296,  296,  296,  296,  296,  296,  296,  296,  243,  296,
 /*  1070 */   296,  114,  296,  339,  296,  296,  296,  296,  296,  245,
 /*  1080 */   302,  303,  296,  221,  161,  296,   90,  302,  303,  296,
 /*  1090 */   221,  125,  296,   90,  296,  243,  296,  296,  114,  296,
 /*  1100 */   339,  296,  243,  296,  296,  114,  245,  339,  302,  303,
 /*  1110 */   296,  221,  162,  245,   90,  296,  296,  296,  296,  296,
 /*  1120 */   296,  296,  296,  243,  296,  296,  114,  296,  339,  302,
 /*  1130 */   303,  296,  221,  157,  245,   90,  296,  296,  296,  296,
 /*  1140 */   296,  296,  296,  296,  243,  296,  296,  114,  296,  339,
 /*  1150 */   296,  296,  296,  296,  296,  245,  302,  303,  296,  221,
 /*  1160 */   122,  296,   90,  302,  303,  296,  221,  149,  296,   90,
 /*  1170 */   296,  243,  296,  296,  114,  296,  339,  296,  243,  296,
 /*  1180 */   296,  114,  245,  339,  302,  303,  296,  221,  133,  245,
 /*  1190 */    90,  296,  296,  296,  296,  296,  296,  296,  296,  243,
 /*  1200 */   296,  296,  114,  296,  339,  302,  303,  296,  221,  145,
 /*  1210 */   245,   90,  296,  296,  296,  296,  296,  296,  296,  296,
 /*  1220 */   243,  296,  296,  114,  296,  339,  296,  296,  296,  296,
 /*  1230 */   296,  245,  302,  303,  296,  221,  147,  296,   90,  302,
 /*  1240 */   303,  296,  221,  139,  296,   90,  296,  243,  296,  296,
 /*  1250 */   114,  296,  339,  296,  243,  296,  296,  114,  245,  339,
 /*  1260 */   302,  303,  296,  221,  150,  245,   90,  296,  296,  296,
 /*  1270 */   296,  296,  296,  296,  296,  243,  296,  296,  114,  296,
 /*  1280 */   339,  302,  303,  296,  221,  296,  245,   90,  296,  296,
 /*  1290 */   296,  296,  296,  296,  296,  296,  243,  296,  296,  111,
 /*  1300 */   296,  339,  296,  296,  296,  296,  296,  245,  302,  303,
 /*  1310 */   296,  221,  302,  303,   90,  221,  302,  204,   90,  221,
 /*  1320 */   296,  296,   90,  243,  296,  296,  113,  243,  339,  296,
 /*  1330 */   110,  202,  339,  296,  245,  296,  339,  296,  245,  296,
 /*  1340 */   302,  314,  245,  221,  296,  296,   90,  296,  296,  296,
 /*  1350 */   296,  296,  296,  296,  296,  313,  296,  296,  296,  296,
 /*  1360 */   339,  296,  296,  296,  296,  296,  245,
    );
    static public $yy_lookahead = array(
 /*     0 */     7,   99,    9,   10,  102,   12,  104,   14,   26,   16,
 /*    10 */     7,    8,   25,   10,   21,   22,   29,   30,   25,   26,
 /*    20 */    38,  108,    7,   20,   31,   10,   33,   34,   35,   36,
 /*    30 */    37,   27,    8,   40,   41,    7,   33,    9,   10,   15,
 /*    40 */    75,   76,   18,   78,   79,   80,   81,   43,   33,   21,
 /*    50 */    22,    9,   10,   25,   26,   90,    9,   10,   93,   31,
 /*    60 */    95,   33,   34,   35,   36,   37,  101,    7,   40,   41,
 /*    70 */    10,    7,   44,    9,   10,   33,   75,   76,   17,   78,
 /*    80 */    79,   80,   81,   32,   23,   21,   22,   40,  100,   25,
 /*    90 */    26,   90,   41,   33,   93,   31,   95,   33,   34,   35,
 /*   100 */    36,   37,  101,    7,   40,   41,   10,    7,   44,    9,
 /*   110 */    10,   13,    1,    2,    3,    4,    5,    6,    7,   24,
 /*   120 */    83,   21,   22,   11,    7,   25,   26,   10,   11,   33,
 /*   130 */    32,   31,   21,   33,   34,   35,   36,   37,   43,   41,
 /*   140 */    40,   41,   42,    7,   32,    9,   10,   10,   75,   76,
 /*   150 */    33,   78,   79,    8,   81,    8,   39,   21,   22,   22,
 /*   160 */    77,   25,   26,   90,   11,   82,   93,   31,   95,   33,
 /*   170 */    34,   35,   36,   37,  101,   92,   40,   41,    7,   26,
 /*   180 */     9,   10,  109,  110,    7,   15,   78,   10,   11,   81,
 /*   190 */    43,   38,   21,   22,   24,   18,   25,   26,   72,   73,
 /*   200 */    74,   75,   31,   89,   33,   34,   35,   36,   37,  101,
 /*   210 */    33,   40,   41,    7,   26,    9,   10,  103,   75,   76,
 /*   220 */    32,   78,   79,   80,   81,    8,   38,   21,   22,   10,
 /*   230 */    42,   25,   26,   90,    8,   83,   93,   31,   95,   33,
 /*   240 */    34,   35,   36,   37,  101,    8,   40,   41,    7,   42,
 /*   250 */     9,   10,   15,   75,   76,   18,   78,   79,   39,   81,
 /*   260 */    43,   78,   21,   22,   81,   99,   25,   26,   90,   43,
 /*   270 */   104,   93,   31,   95,   33,   34,   35,   36,   37,  101,
 /*   280 */    97,   40,   41,    7,  101,    9,   10,   83,  110,    7,
 /*   290 */    77,    9,   10,    7,    8,   82,   10,   21,   22,   77,
 /*   300 */    82,   25,   26,   75,   82,   92,   20,   31,    8,   33,
 /*   310 */    34,   35,   36,   37,   92,   15,   40,   41,    7,   33,
 /*   320 */     9,   10,   40,   75,   76,  107,   78,   79,   80,   81,
 /*   330 */    23,    7,   21,   22,   10,   11,   25,   26,   90,  111,
 /*   340 */    18,   93,   31,   95,   33,   34,   35,   36,   37,  101,
 /*   350 */    43,   40,   41,    7,   26,    9,   10,   33,   75,   76,
 /*   360 */    17,   78,   79,   80,   81,   11,   38,   21,   22,    7,
 /*   370 */    77,   43,   26,   90,   56,   82,   93,   31,   95,   33,
 /*   380 */    34,   35,   36,   37,  101,   92,   40,   41,   26,   46,
 /*   390 */    47,   48,   49,   50,   51,   52,   53,   54,   55,    7,
 /*   400 */    20,    9,   10,   99,    7,    8,   20,   10,  104,   66,
 /*   410 */    67,   68,   26,   21,   22,   27,   99,    8,   26,    7,
 /*   420 */    83,  104,   10,   31,   38,   33,   34,   35,   36,   37,
 /*   430 */    33,    8,   40,   41,   46,   47,   48,   49,   50,   51,
 /*   440 */    52,   53,   54,   55,  100,   33,   27,   15,   25,   88,
 /*   450 */     8,   39,   29,   30,   66,   67,   68,   75,   76,   78,
 /*   460 */    78,   23,   81,   81,  103,   46,   47,   48,   49,   50,
 /*   470 */    51,   52,   53,   54,   55,   43,   82,   95,   75,   76,
 /*   480 */    42,   78,  101,  101,   81,   66,   67,   68,   46,   47,
 /*   490 */    48,   49,   50,   51,   52,   53,   54,   55,   95,    8,
 /*   500 */     8,   74,   75,   10,  101,   13,   15,   15,   66,   67,
 /*   510 */    68,   77,   46,   47,   48,   49,   50,   51,   52,   53,
 /*   520 */    54,   55,    7,   25,    9,   10,   92,   29,   30,   11,
 /*   530 */    13,   13,   66,   67,   68,   43,   21,   22,   77,  105,
 /*   540 */    42,   26,    7,   82,    9,   10,   31,   27,   33,   34,
 /*   550 */    35,   36,   37,   92,   11,   40,   21,   22,   10,   10,
 /*   560 */    12,   26,   14,   43,   16,   45,   31,   24,   33,   34,
 /*   570 */    35,   36,   37,    7,    8,   40,   10,   57,   58,   59,
 /*   580 */    60,   61,   62,   63,   64,   65,   75,   76,   88,   78,
 /*   590 */    79,   27,   81,   85,   86,   84,   85,   78,    8,   33,
 /*   600 */    81,   90,   43,  103,   93,   15,   95,   43,    8,   45,
 /*   610 */   104,   10,  101,   75,   76,   15,   78,  106,   15,   81,
 /*   620 */   101,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   630 */    77,   75,   76,   95,   78,   79,  100,   81,   75,  101,
 /*   640 */    84,   24,    9,   43,  100,   92,   90,  103,   77,   93,
 /*   650 */    43,   95,   45,   10,    8,   15,   40,  101,  105,   96,
 /*   660 */    43,   15,  106,   92,   57,   58,   59,   60,   61,   62,
 /*   670 */    63,   64,   65,   40,  111,    8,  105,   75,   76,   27,
 /*   680 */    78,   79,   15,   81,    4,   77,   84,    8,   78,   43,
 /*   690 */    82,   81,   90,   22,   15,   93,   32,   95,   75,   76,
 /*   700 */    92,   78,   79,  101,   81,   19,   88,   84,  106,   10,
 /*   710 */     8,  101,    8,   90,    9,   88,   93,   15,   95,   15,
 /*   720 */    88,  103,   75,   76,  101,   78,   79,    8,   81,  106,
 /*   730 */   103,   84,   13,   40,   15,  103,   77,   90,    8,   77,
 /*   740 */    93,   88,   95,   75,   76,   26,   78,   79,  101,   81,
 /*   750 */    69,   92,   84,  106,   92,    9,  103,   38,   90,    8,
 /*   760 */     8,   93,   43,   95,    9,   88,    8,   15,   28,  101,
 /*   770 */     8,   10,   24,   15,  106,   75,   76,   15,   78,   79,
 /*   780 */   103,   81,    8,    7,   84,    9,   10,    8,   10,   15,
 /*   790 */    90,   26,    9,   93,   15,   95,   27,   88,   22,   75,
 /*   800 */    76,  101,   78,   79,    9,   81,  106,   19,   84,   33,
 /*   810 */    34,   35,  103,   77,   90,    8,   40,   93,   77,   95,
 /*   820 */    75,   76,   15,   78,   79,  101,   81,   77,   92,   84,
 /*   830 */   106,    3,    8,   92,    8,   90,    4,    8,   93,   15,
 /*   840 */    95,   15,   92,    8,   77,    3,  101,    8,   11,   28,
 /*   850 */    15,  106,   75,   76,   15,   78,   79,   27,   81,   92,
 /*   860 */    15,   84,   92,   15,    9,  102,   94,   90,   97,  103,
 /*   870 */    93,    3,   95,   91,   15,    7,   75,   76,  101,   78,
 /*   880 */    79,   87,   81,  106,   26,   84,  105,  100,   24,   21,
 /*   890 */    87,   90,  100,   85,   93,  112,   95,   75,   76,  112,
 /*   900 */    78,   79,  101,   81,  112,   37,   84,  106,  112,  112,
 /*   910 */   112,  112,   90,  112,  112,   93,    3,   95,  112,  112,
 /*   920 */     7,  112,  112,  101,  112,  112,  112,  112,  106,   75,
 /*   930 */    76,  112,   78,   79,   21,   81,  112,   69,   70,  112,
 /*   940 */   112,  112,  112,  112,   90,  112,  112,   93,  112,   95,
 /*   950 */    37,  112,   98,   75,   76,  101,   78,   79,  112,   81,
 /*   960 */   112,  112,  112,  112,  112,  112,  112,  112,   90,  112,
 /*   970 */   112,   93,  112,   95,   75,   76,   98,   78,   79,  101,
 /*   980 */    81,  112,   69,   70,  112,  112,  112,  112,  112,   90,
 /*   990 */   112,  112,   93,  112,   95,  112,  112,   98,  112,  112,
 /*  1000 */   101,  112,  112,  112,   75,   76,  112,   78,   79,  112,
 /*  1010 */    81,   75,   76,  112,   78,   79,  112,   81,  112,   90,
 /*  1020 */   112,  112,   93,  112,   95,  112,   90,   98,  112,   93,
 /*  1030 */   101,   95,   75,   76,  112,   78,   79,  101,   81,  112,
 /*  1040 */   112,  112,  112,  112,  112,  112,  112,   90,  112,  112,
 /*  1050 */    93,  112,   95,   75,   76,  112,   78,   79,  101,   81,
 /*  1060 */   112,  112,  112,  112,  112,  112,  112,  112,   90,  112,
 /*  1070 */   112,   93,  112,   95,  112,  112,  112,  112,  112,  101,
 /*  1080 */    75,   76,  112,   78,   79,  112,   81,   75,   76,  112,
 /*  1090 */    78,   79,  112,   81,  112,   90,  112,  112,   93,  112,
 /*  1100 */    95,  112,   90,  112,  112,   93,  101,   95,   75,   76,
 /*  1110 */   112,   78,   79,  101,   81,  112,  112,  112,  112,  112,
 /*  1120 */   112,  112,  112,   90,  112,  112,   93,  112,   95,   75,
 /*  1130 */    76,  112,   78,   79,  101,   81,  112,  112,  112,  112,
 /*  1140 */   112,  112,  112,  112,   90,  112,  112,   93,  112,   95,
 /*  1150 */   112,  112,  112,  112,  112,  101,   75,   76,  112,   78,
 /*  1160 */    79,  112,   81,   75,   76,  112,   78,   79,  112,   81,
 /*  1170 */   112,   90,  112,  112,   93,  112,   95,  112,   90,  112,
 /*  1180 */   112,   93,  101,   95,   75,   76,  112,   78,   79,  101,
 /*  1190 */    81,  112,  112,  112,  112,  112,  112,  112,  112,   90,
 /*  1200 */   112,  112,   93,  112,   95,   75,   76,  112,   78,   79,
 /*  1210 */   101,   81,  112,  112,  112,  112,  112,  112,  112,  112,
 /*  1220 */    90,  112,  112,   93,  112,   95,  112,  112,  112,  112,
 /*  1230 */   112,  101,   75,   76,  112,   78,   79,  112,   81,   75,
 /*  1240 */    76,  112,   78,   79,  112,   81,  112,   90,  112,  112,
 /*  1250 */    93,  112,   95,  112,   90,  112,  112,   93,  101,   95,
 /*  1260 */    75,   76,  112,   78,   79,  101,   81,  112,  112,  112,
 /*  1270 */   112,  112,  112,  112,  112,   90,  112,  112,   93,  112,
 /*  1280 */    95,   75,   76,  112,   78,  112,  101,   81,  112,  112,
 /*  1290 */   112,  112,  112,  112,  112,  112,   90,  112,  112,   93,
 /*  1300 */   112,   95,  112,  112,  112,  112,  112,  101,   75,   76,
 /*  1310 */   112,   78,   75,   76,   81,   78,   75,   76,   81,   78,
 /*  1320 */   112,  112,   81,   90,  112,  112,   93,   90,   95,  112,
 /*  1330 */    93,   90,   95,  112,  101,  112,   95,  112,  101,  112,
 /*  1340 */    75,   76,  101,   78,  112,  112,   81,  112,  112,  112,
 /*  1350 */   112,  112,  112,  112,  112,   90,  112,  112,  112,  112,
 /*  1360 */    95,  112,  112,  112,  112,  112,  101,
);
    const YY_SHIFT_USE_DFLT = -19;
    const YY_SHIFT_MAX = 227;
    static public $yy_shift_ofst = array(
 /*     0 */   111,   64,   28,   28,   28,   28,   28,   28,   28,   28,
 /*    10 */    28,   28,   28,  241,   -7,   -7,  136,  171,  136,  171,
 /*    20 */   206,  136,  241,  136,  136,  136,  136,  136,  136,  136,
 /*    30 */   136,  136,  136,  136,  136,  136,  136,  136,  100,  276,
 /*    40 */   311,  346,  392,  535,  535,  515,  282,  776,  913,  719,
 /*    50 */   492,  646,   47,   98,  600,  170,  432,  170,  432,  170,
 /*    60 */   633,  432,  633,  564,  520,  607,  111,  868,  177,  117,
 /*    70 */   412,   60,   96,   15,  237,   24,   60,   15,   60,   60,
 /*    80 */    60,   60,   60,  752,  518,  848,  517,  517,  845,  848,
 /*    90 */   517,  848,  855,  343,  388,  442,  419,  466,  466,  466,
 /*   100 */   466,  466,  466,  466,  466,  286,    3,  324,  397,  548,
 /*   110 */   498,  423,  566,  -13,  -13,   42,  300,  491,  667,  590,
 /*   120 */   307,  835,  617,  824,  679,  226,   51,   51,    4,   51,
 /*   130 */    51,  826,   51,  217,  704,  362,  702,  758,  779,  147,
 /*   140 */   774,  762,  807,   95,  858,  559,  859,  559,  859,  559,
 /*   150 */   559,  517,  864,  855,  559,  517,  517,  559,  517,  559,
 /*   160 */   559,  559,  559,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
 /*   170 */   188,  328,  386,  153,   61,  137,  -18,  543,  219,  839,
 /*   180 */   -18,  -18,  -18,  112,  438,  751,  671,  680,  652,  821,
 /*   190 */   603,  616,  664,  699,  681,  746,  730,  705,  693,  783,
 /*   200 */   755,  640,  686,  828,  788,  829,  832,  837,  842,  795,
 /*   210 */   769,  761,  740,  765,  778,  643,  748,  830,  601,  380,
 /*   220 */   354,  322,  318,  409,  493,  207,  549,  145,
);
    const YY_REDUCE_USE_DFLT = -99;
    const YY_REDUCE_MAX = 169;
    static public $yy_reduce_ofst = array(
 /*     0 */   126,  511,  668,  647,  602,  556,  623,  700,  822,  777,
 /*    10 */   724,  801,  745,   73,    1,  -35,  929,  143,  878,  248,
 /*    20 */   283,  899,  178,  854, 1109, 1088, 1130, 1157, 1164,  978,
 /*    30 */   957, 1005, 1185, 1033, 1012,  936, 1054, 1081, 1237, 1233,
 /*    40 */  1206, 1241, 1265,  538,  382,  403,  183,  610,  563,  608,
 /*    50 */    83,  222,  519,  -98,  213,  434,  293,  571,  461,  553,
 /*    60 */   108,  222,  381,  218,  218,  218,  427,  228,  114,  544,
 /*    70 */   544,  677,  677,  677,  736,  736,  709,  653,  627,  618,
 /*    80 */   361,  500,  632,  662,  166,  659,  317,  304,  750,  767,
 /*    90 */   166,  741,  508,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
 /*   100 */   -87,  -87,  -87,  -87,  -87,  766,  766,  766,  766,  782,
 /*   110 */   772,  772,  766,  772,  772,  771,  770,  770,  770,  770,
 /*   120 */   394,  770,  394,  770,  770,  394,  763,  763,  394,  763,
 /*   130 */   763,  770,  763,  394,  770,  792,  770,  770,  770,  394,
 /*   140 */   770,  770,  770,  394,  787,  394,  794,  394,  803,  394,
 /*   150 */   394,  506,  781,  808,  394,  506,  506,  394,  506,  394,
 /*   160 */   394,  394,  394,  536,  344,  337,  -12,  204,  152,   37,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(1, 2, 3, 4, 5, 6, 7, 21, ),
        /* 1 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 2 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 3 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 4 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 5 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 6 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 7 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 8 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 9 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 10 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 11 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 12 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 44, ),
        /* 13 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 14 */ array(7, 9, 10, 12, 14, 16, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 15 */ array(7, 9, 10, 12, 14, 16, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 16 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 17 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 18 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 19 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 20 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 21 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 22 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 23 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 24 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 25 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 26 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 27 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 28 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 29 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 30 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 31 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 32 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 33 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 34 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 35 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 36 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 37 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 38 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, 42, ),
        /* 39 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 40 */ array(7, 9, 10, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 41 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 42 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 37, 40, 41, ),
        /* 43 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 37, 40, ),
        /* 44 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 37, 40, ),
        /* 45 */ array(7, 9, 10, 21, 22, 26, 31, 33, 34, 35, 36, 37, 40, ),
        /* 46 */ array(7, 9, 10, 40, ),
        /* 47 */ array(7, 9, 10, 22, 33, 34, 35, 40, ),
        /* 48 */ array(3, 7, 21, 37, 69, 70, ),
        /* 49 */ array(8, 13, 15, 26, 38, 43, ),
        /* 50 */ array(8, 13, 15, 43, ),
        /* 51 */ array(8, 15, 43, ),
        /* 52 */ array(9, 10, 40, ),
        /* 53 */ array(13, 32, 41, ),
        /* 54 */ array(8, 15, 43, ),
        /* 55 */ array(15, 24, ),
        /* 56 */ array(15, 43, ),
        /* 57 */ array(15, 24, ),
        /* 58 */ array(15, 43, ),
        /* 59 */ array(15, 24, ),
        /* 60 */ array(9, 40, ),
        /* 61 */ array(15, 43, ),
        /* 62 */ array(9, 40, ),
        /* 63 */ array(27, 43, 45, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 64 */ array(27, 43, 45, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 65 */ array(43, 45, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 66 */ array(1, 2, 3, 4, 5, 6, 7, 21, ),
        /* 67 */ array(3, 7, 21, 37, 69, 70, ),
        /* 68 */ array(7, 10, 11, 18, 33, ),
        /* 69 */ array(7, 10, 11, 33, 39, ),
        /* 70 */ array(7, 10, 33, 39, ),
        /* 71 */ array(7, 10, 33, ),
        /* 72 */ array(7, 10, 33, ),
        /* 73 */ array(7, 10, 33, ),
        /* 74 */ array(8, 15, 18, ),
        /* 75 */ array(8, 15, 18, ),
        /* 76 */ array(7, 10, 33, ),
        /* 77 */ array(7, 10, 33, ),
        /* 78 */ array(7, 10, 33, ),
        /* 79 */ array(7, 10, 33, ),
        /* 80 */ array(7, 10, 33, ),
        /* 81 */ array(7, 10, 33, ),
        /* 82 */ array(7, 10, 33, ),
        /* 83 */ array(8, 15, ),
        /* 84 */ array(11, 13, ),
        /* 85 */ array(15, ),
        /* 86 */ array(13, ),
        /* 87 */ array(13, ),
        /* 88 */ array(15, ),
        /* 89 */ array(15, ),
        /* 90 */ array(13, ),
        /* 91 */ array(15, ),
        /* 92 */ array(9, ),
        /* 93 */ array(17, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 94 */ array(27, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 95 */ array(8, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 96 */ array(27, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 97 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 98 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 99 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 100 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 101 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 102 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 103 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 104 */ array(46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, ),
        /* 105 */ array(7, 8, 10, 20, 33, ),
        /* 106 */ array(7, 8, 10, 20, 33, ),
        /* 107 */ array(7, 10, 11, 33, ),
        /* 108 */ array(7, 8, 10, 33, ),
        /* 109 */ array(10, 12, 14, 16, ),
        /* 110 */ array(25, 29, 30, 42, ),
        /* 111 */ array(8, 25, 29, 30, ),
        /* 112 */ array(7, 8, 10, 33, ),
        /* 113 */ array(25, 29, 30, ),
        /* 114 */ array(25, 29, 30, ),
        /* 115 */ array(9, 10, 33, ),
        /* 116 */ array(8, 15, ),
        /* 117 */ array(8, 15, ),
        /* 118 */ array(8, 15, ),
        /* 119 */ array(8, 15, ),
        /* 120 */ array(23, 43, ),
        /* 121 */ array(8, 15, ),
        /* 122 */ array(24, 43, ),
        /* 123 */ array(8, 15, ),
        /* 124 */ array(8, 15, ),
        /* 125 */ array(8, 43, ),
        /* 126 */ array(32, 41, ),
        /* 127 */ array(32, 41, ),
        /* 128 */ array(27, 43, ),
        /* 129 */ array(32, 41, ),
        /* 130 */ array(32, 41, ),
        /* 131 */ array(8, 15, ),
        /* 132 */ array(32, 41, ),
        /* 133 */ array(8, 43, ),
        /* 134 */ array(8, 15, ),
        /* 135 */ array(7, 26, ),
        /* 136 */ array(8, 15, ),
        /* 137 */ array(8, 15, ),
        /* 138 */ array(8, 15, ),
        /* 139 */ array(8, 43, ),
        /* 140 */ array(8, 15, ),
        /* 141 */ array(8, 15, ),
        /* 142 */ array(8, 15, ),
        /* 143 */ array(24, 43, ),
        /* 144 */ array(26, ),
        /* 145 */ array(43, ),
        /* 146 */ array(15, ),
        /* 147 */ array(43, ),
        /* 148 */ array(15, ),
        /* 149 */ array(43, ),
        /* 150 */ array(43, ),
        /* 151 */ array(13, ),
        /* 152 */ array(24, ),
        /* 153 */ array(9, ),
        /* 154 */ array(43, ),
        /* 155 */ array(13, ),
        /* 156 */ array(13, ),
        /* 157 */ array(43, ),
        /* 158 */ array(13, ),
        /* 159 */ array(43, ),
        /* 160 */ array(43, ),
        /* 161 */ array(43, ),
        /* 162 */ array(43, ),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(26, 32, 38, 42, ),
        /* 171 */ array(26, 38, 43, ),
        /* 172 */ array(20, 26, 38, ),
        /* 173 */ array(11, 26, 38, ),
        /* 174 */ array(17, 23, ),
        /* 175 */ array(10, 22, ),
        /* 176 */ array(26, 38, ),
        /* 177 */ array(11, 24, ),
        /* 178 */ array(10, 39, ),
        /* 179 */ array(8, 15, ),
        /* 180 */ array(26, 38, ),
        /* 181 */ array(26, 38, ),
        /* 182 */ array(26, 38, ),
        /* 183 */ array(11, 32, ),
        /* 184 */ array(23, 42, ),
        /* 185 */ array(8, ),
        /* 186 */ array(22, ),
        /* 187 */ array(4, ),
        /* 188 */ array(27, ),
        /* 189 */ array(28, ),
        /* 190 */ array(15, ),
        /* 191 */ array(40, ),
        /* 192 */ array(32, ),
        /* 193 */ array(10, ),
        /* 194 */ array(69, ),
        /* 195 */ array(9, ),
        /* 196 */ array(8, ),
        /* 197 */ array(9, ),
        /* 198 */ array(40, ),
        /* 199 */ array(9, ),
        /* 200 */ array(9, ),
        /* 201 */ array(15, ),
        /* 202 */ array(19, ),
        /* 203 */ array(3, ),
        /* 204 */ array(19, ),
        /* 205 */ array(8, ),
        /* 206 */ array(4, ),
        /* 207 */ array(11, ),
        /* 208 */ array(3, ),
        /* 209 */ array(9, ),
        /* 210 */ array(27, ),
        /* 211 */ array(10, ),
        /* 212 */ array(28, ),
        /* 213 */ array(26, ),
        /* 214 */ array(10, ),
        /* 215 */ array(10, ),
        /* 216 */ array(24, ),
        /* 217 */ array(27, ),
        /* 218 */ array(10, ),
        /* 219 */ array(20, ),
        /* 220 */ array(11, ),
        /* 221 */ array(18, ),
        /* 222 */ array(56, ),
        /* 223 */ array(8, ),
        /* 224 */ array(10, ),
        /* 225 */ array(42, ),
        /* 226 */ array(10, ),
        /* 227 */ array(8, ),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
);
    static public $yy_default = array(
 /*     0 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    10 */   541,  541,  541,  527,  541,  541,  485,  541,  485,  541,
 /*    20 */   541,  485,  541,  485,  541,  541,  541,  541,  541,  541,
 /*    30 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    40 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    50 */   541,  541,  541,  446,  541,  405,  405,  405,  405,  405,
 /*    60 */   541,  405,  541,  495,  495,  495,  359,  541,  541,  456,
 /*    70 */   456,  541,  541,  541,  428,  428,  541,  541,  541,  541,
 /*    80 */   541,  541,  541,  419,  449,  405,  441,  442,  405,  405,
 /*    90 */   449,  405,  541,  541,  541,  541,  541,  505,  509,  499,
 /*   100 */   508,  501,  500,  493,  504,  541,  541,  541,  541,  541,
 /*   110 */   541,  541,  541,  490,  416,  541,  541,  541,  541,  541,
 /*   120 */   484,  541,  541,  541,  541,  541,  454,  476,  541,  479,
 /*   130 */   477,  541,  478,  541,  541,  456,  541,  541,  541,  541,
 /*   140 */   541,  541,  541,  541,  456,  414,  540,  411,  540,  389,
 /*   150 */   423,  473,  418,  541,  496,  444,  447,  424,  443,  530,
 /*   160 */   407,  528,  529,  456,  456,  489,  456,  489,  489,  489,
 /*   170 */   541,  406,  415,  410,  541,  541,  491,  470,  541,  419,
 /*   180 */   541,  510,  415,  431,  541,  541,  541,  541,  541,  437,
 /*   190 */   541,  541,  431,  541,  541,  541,  541,  541,  541,  541,
 /*   200 */   541,  541,  541,  541,  541,  419,  541,  541,  541,  541,
 /*   210 */   541,  541,  541,  541,  541,  541,  470,  541,  541,  419,
 /*   220 */   410,  428,  419,  541,  541,  541,  541,  541,  402,  398,
 /*   230 */   399,  535,  371,  396,  388,  360,  452,  361,  486,  487,
 /*   240 */   429,  397,  430,  422,  480,  451,  463,  534,  537,  533,
 /*   250 */   465,  467,  538,  440,  536,  475,  466,  464,  532,  450,
 /*   260 */   531,  482,  413,  372,  539,  390,  455,  412,  445,  439,
 /*   270 */   363,  409,  362,  461,  403,  426,  437,  492,  427,  511,
 /*   280 */   519,  520,  417,  370,  425,  368,  474,  506,  507,  503,
 /*   290 */   502,  404,  377,  369,  518,  517,  401,  395,  524,  471,
 /*   300 */   481,  483,  448,  419,  400,  526,  525,  514,  515,  516,
 /*   310 */   513,  512,  468,  497,  498,  367,  366,  391,  392,  469,
 /*   320 */   470,  488,  462,  421,  374,  381,  460,  472,  386,  387,
 /*   330 */   457,  453,  458,  394,  393,  459,  373,  384,  385,  436,
 /*   340 */   365,  435,  378,  420,  494,  521,  522,  523,  434,  376,
 /*   350 */   375,  383,  438,  432,  382,  379,  433,  380,  364,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 113;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 359;
    const YYNRULE = 182;
    const YYERRORSYMBOL = 71;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    public $yyTokenName = array( 
  '$',             'COMMENT',       'PHP',           'OTHER',       
  'SHORTTAGEND',   'SHORTTAGSTART',  'XML',           'LDEL',        
  'RDEL',          'DOLLAR',        'ID',            'EQUAL',       
  'FOREACH',       'PTR',           'IF',            'SPACE',       
  'FOR',           'SEMICOLON',     'INCDEC',        'AS',          
  'APTR',          'LDELSLASH',     'INTEGER',       'COMMA',       
  'COLON',         'UNIMATH',       'OPENP',         'CLOSEP',      
  'QMARK',         'MATH',          'ANDSYM',        'TYPECAST',    
  'DOT',           'CONSTANT',      'BOOLEAN',       'NULL',        
  'SINGLEQUOTESTRING',  'QUOTE',         'DOUBLECOLON',   'AT',          
  'HATCH',         'OPENB',         'CLOSEB',        'VERT',        
  'NOT',           'ISIN',          'ISDIVBY',       'ISNOTDIVBY',  
  'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',      'ISNOTEVENBY', 
  'ISODD',         'ISNOTODD',      'ISODDBY',       'ISNOTODDBY',  
  'INSTANCEOF',    'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'BACKTICK',      'DOLLARID',      'error',       
  'start',         'template',      'template_element',  'smartytag',   
  'value',         'attributes',    'variable',      'expr',        
  'ternary',       'varindexed',    'modifier',      'modparameters',
  'ifexprs',       'statement',     'statements',    'optspace',    
  'varvar',        'foraction',     'array',         'specialclose',
  'attribute',     'exprs',         'math',          'function',    
  'doublequoted',  'method',        'params',        'objectchain', 
  'arrayindex',    'object',        'indexdef',      'varvarele',   
  'objectelement',  'modparameter',  'ifexpr',        'ifcond',      
  'lop',           'arrayelements',  'arrayelement',  'doublequotedcontent',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template_element ::= smartytag",
 /*   4 */ "template_element ::= COMMENT",
 /*   5 */ "template_element ::= PHP OTHER SHORTTAGEND",
 /*   6 */ "template_element ::= SHORTTAGSTART OTHER SHORTTAGEND",
 /*   7 */ "template_element ::= XML",
 /*   8 */ "template_element ::= SHORTTAGEND",
 /*   9 */ "template_element ::= OTHER",
 /*  10 */ "smartytag ::= LDEL value RDEL",
 /*  11 */ "smartytag ::= LDEL value attributes RDEL",
 /*  12 */ "smartytag ::= LDEL variable attributes RDEL",
 /*  13 */ "smartytag ::= LDEL expr attributes RDEL",
 /*  14 */ "smartytag ::= LDEL ternary attributes RDEL",
 /*  15 */ "smartytag ::= LDEL DOLLAR ID EQUAL value RDEL",
 /*  16 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr RDEL",
 /*  17 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes RDEL",
 /*  18 */ "smartytag ::= LDEL DOLLAR ID EQUAL ternary attributes RDEL",
 /*  19 */ "smartytag ::= LDEL varindexed EQUAL expr attributes RDEL",
 /*  20 */ "smartytag ::= LDEL varindexed EQUAL ternary attributes RDEL",
 /*  21 */ "smartytag ::= LDEL ID attributes RDEL",
 /*  22 */ "smartytag ::= LDEL FOREACH attributes RDEL",
 /*  23 */ "smartytag ::= LDEL ID RDEL",
 /*  24 */ "smartytag ::= LDEL ID PTR ID attributes RDEL",
 /*  25 */ "smartytag ::= LDEL ID modifier modparameters attributes RDEL",
 /*  26 */ "smartytag ::= LDEL ID PTR ID modifier modparameters attributes RDEL",
 /*  27 */ "smartytag ::= LDEL IF SPACE ifexprs RDEL",
 /*  28 */ "smartytag ::= LDEL IF SPACE statement RDEL",
 /*  29 */ "smartytag ::= LDEL FOR SPACE statements SEMICOLON optspace ifexprs SEMICOLON optspace DOLLAR varvar foraction RDEL",
 /*  30 */ "foraction ::= EQUAL expr",
 /*  31 */ "foraction ::= INCDEC",
 /*  32 */ "smartytag ::= LDEL FOREACH SPACE value AS DOLLAR varvar RDEL",
 /*  33 */ "smartytag ::= LDEL FOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar RDEL",
 /*  34 */ "smartytag ::= LDEL FOREACH SPACE array AS DOLLAR varvar RDEL",
 /*  35 */ "smartytag ::= LDEL FOREACH SPACE array AS DOLLAR varvar APTR DOLLAR varvar RDEL",
 /*  36 */ "smartytag ::= LDELSLASH ID RDEL",
 /*  37 */ "smartytag ::= LDELSLASH specialclose RDEL",
 /*  38 */ "specialclose ::= IF",
 /*  39 */ "specialclose ::= FOR",
 /*  40 */ "specialclose ::= FOREACH",
 /*  41 */ "smartytag ::= LDELSLASH ID attributes RDEL",
 /*  42 */ "smartytag ::= LDELSLASH ID modifier modparameters attributes RDEL",
 /*  43 */ "smartytag ::= LDELSLASH ID PTR ID RDEL",
 /*  44 */ "attributes ::= attributes attribute",
 /*  45 */ "attributes ::= attribute",
 /*  46 */ "attributes ::=",
 /*  47 */ "attribute ::= SPACE ID EQUAL ID",
 /*  48 */ "attribute ::= SPACE ID EQUAL expr",
 /*  49 */ "attribute ::= SPACE ID EQUAL value",
 /*  50 */ "attribute ::= SPACE ID EQUAL ternary",
 /*  51 */ "attribute ::= SPACE ID",
 /*  52 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  53 */ "statements ::= statement",
 /*  54 */ "statements ::= statements COMMA statement",
 /*  55 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  56 */ "expr ::= ID",
 /*  57 */ "expr ::= exprs",
 /*  58 */ "expr ::= DOLLAR ID COLON ID",
 /*  59 */ "expr ::= expr modifier modparameters",
 /*  60 */ "exprs ::= value",
 /*  61 */ "exprs ::= UNIMATH value",
 /*  62 */ "exprs ::= exprs math value",
 /*  63 */ "exprs ::= array",
 /*  64 */ "ternary ::= OPENP ifexprs CLOSEP QMARK expr COLON expr",
 /*  65 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  66 */ "math ::= UNIMATH",
 /*  67 */ "math ::= MATH",
 /*  68 */ "math ::= ANDSYM",
 /*  69 */ "value ::= variable",
 /*  70 */ "value ::= TYPECAST variable",
 /*  71 */ "value ::= variable INCDEC",
 /*  72 */ "value ::= INTEGER",
 /*  73 */ "value ::= INTEGER DOT INTEGER",
 /*  74 */ "value ::= CONSTANT",
 /*  75 */ "value ::= BOOLEAN",
 /*  76 */ "value ::= NULL",
 /*  77 */ "value ::= function",
 /*  78 */ "value ::= OPENP expr CLOSEP",
 /*  79 */ "value ::= SINGLEQUOTESTRING",
 /*  80 */ "value ::= QUOTE doublequoted QUOTE",
 /*  81 */ "value ::= QUOTE QUOTE",
 /*  82 */ "value ::= ID DOUBLECOLON method",
 /*  83 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP",
 /*  84 */ "value ::= ID DOUBLECOLON method objectchain",
 /*  85 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP objectchain",
 /*  86 */ "value ::= ID DOUBLECOLON CONSTANT",
 /*  87 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex",
 /*  88 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex objectchain",
 /*  89 */ "value ::= smartytag",
 /*  90 */ "variable ::= varindexed",
 /*  91 */ "variable ::= DOLLAR varvar AT ID",
 /*  92 */ "variable ::= object",
 /*  93 */ "variable ::= HATCH ID HATCH",
 /*  94 */ "variable ::= HATCH variable HATCH",
 /*  95 */ "varindexed ::= DOLLAR varvar arrayindex",
 /*  96 */ "arrayindex ::= arrayindex indexdef",
 /*  97 */ "arrayindex ::=",
 /*  98 */ "indexdef ::= DOT ID",
 /*  99 */ "indexdef ::= DOT CONSTANT",
 /* 100 */ "indexdef ::= DOT BOOLEAN",
 /* 101 */ "indexdef ::= DOT NULL",
 /* 102 */ "indexdef ::= DOT INTEGER",
 /* 103 */ "indexdef ::= DOT variable",
 /* 104 */ "indexdef ::= DOT LDEL exprs RDEL",
 /* 105 */ "indexdef ::= OPENB ID CLOSEB",
 /* 106 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 107 */ "indexdef ::= OPENB exprs CLOSEB",
 /* 108 */ "indexdef ::= OPENB CLOSEB",
 /* 109 */ "varvar ::= varvarele",
 /* 110 */ "varvar ::= varvar varvarele",
 /* 111 */ "varvarele ::= ID",
 /* 112 */ "varvarele ::= CONSTANT",
 /* 113 */ "varvarele ::= LDEL expr RDEL",
 /* 114 */ "object ::= varindexed objectchain",
 /* 115 */ "objectchain ::= objectelement",
 /* 116 */ "objectchain ::= objectchain objectelement",
 /* 117 */ "objectelement ::= PTR ID arrayindex",
 /* 118 */ "objectelement ::= PTR variable arrayindex",
 /* 119 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 120 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 121 */ "objectelement ::= PTR method",
 /* 122 */ "function ::= ID OPENP params CLOSEP",
 /* 123 */ "method ::= ID OPENP params CLOSEP",
 /* 124 */ "params ::= expr COMMA params",
 /* 125 */ "params ::= expr",
 /* 126 */ "params ::=",
 /* 127 */ "modifier ::= VERT AT ID",
 /* 128 */ "modifier ::= VERT ID",
 /* 129 */ "modparameters ::= modparameters modparameter",
 /* 130 */ "modparameters ::=",
 /* 131 */ "modparameter ::= COLON exprs",
 /* 132 */ "modparameter ::= COLON ID",
 /* 133 */ "ifexprs ::= ifexpr",
 /* 134 */ "ifexprs ::= NOT ifexprs",
 /* 135 */ "ifexprs ::= OPENP ifexprs CLOSEP",
 /* 136 */ "ifexpr ::= expr",
 /* 137 */ "ifexpr ::= expr ifcond expr",
 /* 138 */ "ifexpr ::= expr ISIN array",
 /* 139 */ "ifexpr ::= expr ISIN value",
 /* 140 */ "ifexpr ::= ifexprs lop ifexprs",
 /* 141 */ "ifexpr ::= ifexprs ISDIVBY ifexprs",
 /* 142 */ "ifexpr ::= ifexprs ISNOTDIVBY ifexprs",
 /* 143 */ "ifexpr ::= ifexprs ISEVEN",
 /* 144 */ "ifexpr ::= ifexprs ISNOTEVEN",
 /* 145 */ "ifexpr ::= ifexprs ISEVENBY ifexprs",
 /* 146 */ "ifexpr ::= ifexprs ISNOTEVENBY ifexprs",
 /* 147 */ "ifexpr ::= ifexprs ISODD",
 /* 148 */ "ifexpr ::= ifexprs ISNOTODD",
 /* 149 */ "ifexpr ::= ifexprs ISODDBY ifexprs",
 /* 150 */ "ifexpr ::= ifexprs ISNOTODDBY ifexprs",
 /* 151 */ "ifexpr ::= value INSTANCEOF ID",
 /* 152 */ "ifexpr ::= value INSTANCEOF value",
 /* 153 */ "ifcond ::= EQUALS",
 /* 154 */ "ifcond ::= NOTEQUALS",
 /* 155 */ "ifcond ::= GREATERTHAN",
 /* 156 */ "ifcond ::= LESSTHAN",
 /* 157 */ "ifcond ::= GREATEREQUAL",
 /* 158 */ "ifcond ::= LESSEQUAL",
 /* 159 */ "ifcond ::= IDENTITY",
 /* 160 */ "ifcond ::= NONEIDENTITY",
 /* 161 */ "ifcond ::= MOD",
 /* 162 */ "lop ::= LAND",
 /* 163 */ "lop ::= LOR",
 /* 164 */ "lop ::= LXOR",
 /* 165 */ "array ::= OPENB arrayelements CLOSEB",
 /* 166 */ "arrayelements ::= arrayelement",
 /* 167 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 168 */ "arrayelements ::=",
 /* 169 */ "arrayelement ::= value APTR expr",
 /* 170 */ "arrayelement ::= ID APTR expr",
 /* 171 */ "arrayelement ::= expr",
 /* 172 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 173 */ "doublequoted ::= doublequotedcontent",
 /* 174 */ "doublequotedcontent ::= BACKTICK variable BACKTICK",
 /* 175 */ "doublequotedcontent ::= DOLLARID",
 /* 176 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 177 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 178 */ "doublequotedcontent ::= smartytag",
 /* 179 */ "doublequotedcontent ::= OTHER",
 /* 180 */ "optspace ::= SPACE",
 /* 181 */ "optspace ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param TP_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 7 ),
  array( 'lhs' => 75, 'rhs' => 7 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 8 ),
  array( 'lhs' => 75, 'rhs' => 5 ),
  array( 'lhs' => 75, 'rhs' => 5 ),
  array( 'lhs' => 75, 'rhs' => 13 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 8 ),
  array( 'lhs' => 75, 'rhs' => 11 ),
  array( 'lhs' => 75, 'rhs' => 8 ),
  array( 'lhs' => 75, 'rhs' => 11 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 5 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 0 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 7 ),
  array( 'lhs' => 80, 'rhs' => 7 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 8 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 6 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 0 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 5 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 5 ),
  array( 'lhs' => 104, 'rhs' => 6 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 4 ),
  array( 'lhs' => 97, 'rhs' => 4 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 0 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 0 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 0 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        38 => 0,
        39 => 0,
        40 => 0,
        60 => 0,
        69 => 0,
        72 => 0,
        74 => 0,
        75 => 0,
        76 => 0,
        77 => 0,
        79 => 0,
        92 => 0,
        166 => 0,
        1 => 1,
        57 => 1,
        63 => 1,
        66 => 1,
        67 => 1,
        109 => 1,
        133 => 1,
        173 => 1,
        179 => 1,
        180 => 1,
        2 => 2,
        129 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 11,
        13 => 11,
        14 => 11,
        15 => 15,
        16 => 15,
        17 => 17,
        18 => 17,
        19 => 19,
        20 => 19,
        21 => 21,
        22 => 21,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        45 => 31,
        125 => 31,
        171 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 36,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 48,
        50 => 48,
        52 => 48,
        51 => 51,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        58 => 58,
        59 => 59,
        61 => 61,
        70 => 61,
        71 => 61,
        62 => 62,
        64 => 64,
        65 => 64,
        68 => 68,
        73 => 73,
        78 => 78,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        172 => 96,
        97 => 97,
        130 => 97,
        98 => 98,
        99 => 98,
        100 => 98,
        101 => 98,
        102 => 102,
        103 => 103,
        104 => 104,
        107 => 104,
        105 => 105,
        106 => 106,
        108 => 108,
        181 => 108,
        110 => 110,
        111 => 111,
        112 => 111,
        113 => 113,
        135 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        126 => 126,
        127 => 127,
        128 => 128,
        131 => 131,
        132 => 132,
        134 => 134,
        136 => 136,
        137 => 137,
        140 => 137,
        151 => 137,
        138 => 138,
        139 => 139,
        141 => 141,
        142 => 142,
        143 => 143,
        148 => 143,
        144 => 144,
        147 => 144,
        145 => 145,
        150 => 145,
        146 => 146,
        149 => 146,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        174 => 174,
        176 => 174,
        175 => 175,
        177 => 177,
        178 => 178,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 78 "smarty_internal_templateparser.y"
    function yy_r0(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2074 "smarty_internal_templateparser.php"
#line 84 "smarty_internal_templateparser.y"
    function yy_r1(){$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2077 "smarty_internal_templateparser.php"
#line 86 "smarty_internal_templateparser.y"
    function yy_r2(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2080 "smarty_internal_templateparser.php"
#line 92 "smarty_internal_templateparser.y"
    function yy_r3(){
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + 0]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;}  $this->compiler->has_variable_string = false;    }
#line 2087 "smarty_internal_templateparser.php"
#line 99 "smarty_internal_templateparser.y"
    function yy_r4(){ $this->_retvalue = '';    }
#line 2090 "smarty_internal_templateparser.php"
#line 104 "smarty_internal_templateparser.y"
    function yy_r5(){if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo htmlspecialchars('<?php".str_replace("'","\'",$this->yystack[$this->yyidx + -1]->minor)."?>', ENT_QUOTES);?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', $this->compiler, true);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2102 "smarty_internal_templateparser.php"
#line 115 "smarty_internal_templateparser.y"
    function yy_r6(){ 
                                      if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU || $this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?=".$this->yystack[$this->yyidx + -1]->minor."?>'?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?='.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2113 "smarty_internal_templateparser.php"
#line 126 "smarty_internal_templateparser.y"
    function yy_r7(){ $this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true);    }
#line 2116 "smarty_internal_templateparser.php"
#line 127 "smarty_internal_templateparser.y"
    function yy_r8(){$this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '?>';?>\n", $this->compiler, true);    }
#line 2119 "smarty_internal_templateparser.php"
#line 129 "smarty_internal_templateparser.y"
    function yy_r9(){$this->_retvalue = $this->cacher->processNocacheCode($this->yystack[$this->yyidx + 0]->minor, $this->compiler,false);    }
#line 2122 "smarty_internal_templateparser.php"
#line 137 "smarty_internal_templateparser.y"
    function yy_r10(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array('value'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2125 "smarty_internal_templateparser.php"
#line 138 "smarty_internal_templateparser.y"
    function yy_r11(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2128 "smarty_internal_templateparser.php"
#line 149 "smarty_internal_templateparser.y"
    function yy_r15(){ $this->_retvalue = $this->compiler->compileTag('assign',array('value'=>$this->yystack[$this->yyidx + -1]->minor,'var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'"));    }
#line 2131 "smarty_internal_templateparser.php"
#line 151 "smarty_internal_templateparser.y"
    function yy_r17(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor,'var'=>"'".$this->yystack[$this->yyidx + -4]->minor."'"),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2134 "smarty_internal_templateparser.php"
#line 153 "smarty_internal_templateparser.y"
    function yy_r19(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor));    }
#line 2137 "smarty_internal_templateparser.php"
#line 156 "smarty_internal_templateparser.y"
    function yy_r21(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + -1]->minor);    }
#line 2140 "smarty_internal_templateparser.php"
#line 158 "smarty_internal_templateparser.y"
    function yy_r23(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,array());    }
#line 2143 "smarty_internal_templateparser.php"
#line 160 "smarty_internal_templateparser.y"
    function yy_r24(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2146 "smarty_internal_templateparser.php"
#line 162 "smarty_internal_templateparser.y"
    function yy_r25(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2161 "smarty_internal_templateparser.php"
#line 176 "smarty_internal_templateparser.y"
    function yy_r26(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -4]->minor),$this->yystack[$this->yyidx + -1]->minor)).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2176 "smarty_internal_templateparser.php"
#line 190 "smarty_internal_templateparser.y"
    function yy_r27(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2179 "smarty_internal_templateparser.php"
#line 193 "smarty_internal_templateparser.y"
    function yy_r29(){
                                                             $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -11]->minor,array('start'=>$this->yystack[$this->yyidx + -9]->minor,'ifexp'=>$this->yystack[$this->yyidx + -6]->minor,'varloop'=>$this->yystack[$this->yyidx + -2]->minor,'loop'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2183 "smarty_internal_templateparser.php"
#line 195 "smarty_internal_templateparser.y"
    function yy_r30(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2186 "smarty_internal_templateparser.php"
#line 196 "smarty_internal_templateparser.y"
    function yy_r31(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2189 "smarty_internal_templateparser.php"
#line 198 "smarty_internal_templateparser.y"
    function yy_r32(){
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2193 "smarty_internal_templateparser.php"
#line 200 "smarty_internal_templateparser.y"
    function yy_r33(){
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -9]->minor,array('from'=>$this->yystack[$this->yyidx + -7]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor,'key'=>$this->yystack[$this->yyidx + -4]->minor));    }
#line 2197 "smarty_internal_templateparser.php"
#line 202 "smarty_internal_templateparser.y"
    function yy_r34(){ 
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2201 "smarty_internal_templateparser.php"
#line 204 "smarty_internal_templateparser.y"
    function yy_r35(){ 
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -9]->minor,array('from'=>$this->yystack[$this->yyidx + -7]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor,'key'=>$this->yystack[$this->yyidx + -4]->minor));    }
#line 2205 "smarty_internal_templateparser.php"
#line 208 "smarty_internal_templateparser.y"
    function yy_r36(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array());    }
#line 2208 "smarty_internal_templateparser.php"
#line 213 "smarty_internal_templateparser.y"
    function yy_r41(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',$this->yystack[$this->yyidx + -1]->minor);    }
#line 2211 "smarty_internal_templateparser.php"
#line 214 "smarty_internal_templateparser.y"
    function yy_r42(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor.'close',$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2226 "smarty_internal_templateparser.php"
#line 228 "smarty_internal_templateparser.y"
    function yy_r43(){  $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2229 "smarty_internal_templateparser.php"
#line 235 "smarty_internal_templateparser.y"
    function yy_r44(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);    }
#line 2232 "smarty_internal_templateparser.php"
#line 239 "smarty_internal_templateparser.y"
    function yy_r46(){ $this->_retvalue = array();    }
#line 2235 "smarty_internal_templateparser.php"
#line 242 "smarty_internal_templateparser.y"
    function yy_r47(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");    }
#line 2238 "smarty_internal_templateparser.php"
#line 243 "smarty_internal_templateparser.y"
    function yy_r48(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2241 "smarty_internal_templateparser.php"
#line 246 "smarty_internal_templateparser.y"
    function yy_r51(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor=>'true');    }
#line 2244 "smarty_internal_templateparser.php"
#line 253 "smarty_internal_templateparser.y"
    function yy_r53(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);    }
#line 2247 "smarty_internal_templateparser.php"
#line 254 "smarty_internal_templateparser.y"
    function yy_r54(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;    }
#line 2250 "smarty_internal_templateparser.php"
#line 256 "smarty_internal_templateparser.y"
    function yy_r55(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2253 "smarty_internal_templateparser.php"
#line 262 "smarty_internal_templateparser.y"
    function yy_r56(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';     }
#line 2256 "smarty_internal_templateparser.php"
#line 265 "smarty_internal_templateparser.y"
    function yy_r58(){$this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';    }
#line 2259 "smarty_internal_templateparser.php"
#line 266 "smarty_internal_templateparser.y"
    function yy_r59(){            
                                                            if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -1]->minor[0],'modifier')) {
                                                                      $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -1]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -1]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -1]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                }
#line 2274 "smarty_internal_templateparser.php"
#line 283 "smarty_internal_templateparser.y"
    function yy_r61(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2277 "smarty_internal_templateparser.php"
#line 285 "smarty_internal_templateparser.y"
    function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2280 "smarty_internal_templateparser.php"
#line 292 "smarty_internal_templateparser.y"
    function yy_r64(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2283 "smarty_internal_templateparser.php"
#line 306 "smarty_internal_templateparser.y"
    function yy_r68(){$this->_retvalue = ' & ';    }
#line 2286 "smarty_internal_templateparser.php"
#line 314 "smarty_internal_templateparser.y"
    function yy_r73(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2289 "smarty_internal_templateparser.php"
#line 324 "smarty_internal_templateparser.y"
    function yy_r78(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";     }
#line 2292 "smarty_internal_templateparser.php"
#line 328 "smarty_internal_templateparser.y"
    function yy_r80(){ $_s = str_replace(array('."".','.""'),array('.',''),'"'.$this->yystack[$this->yyidx + -1]->minor.'"'); 
                                                    if (substr($_s,0,3) == '"".') {
                                                      $this->_retvalue = substr($_s,3);
                                                    } else {
                                                      $this->_retvalue = $_s;
                                                    }
                                                      }
#line 2301 "smarty_internal_templateparser.php"
#line 335 "smarty_internal_templateparser.y"
    function yy_r81(){ $this->_retvalue = "''";     }
#line 2304 "smarty_internal_templateparser.php"
#line 337 "smarty_internal_templateparser.y"
    function yy_r82(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2307 "smarty_internal_templateparser.php"
#line 338 "smarty_internal_templateparser.y"
    function yy_r83(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -3]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -1]->minor .')';     }
#line 2310 "smarty_internal_templateparser.php"
#line 340 "smarty_internal_templateparser.y"
    function yy_r84(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor.'::'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2313 "smarty_internal_templateparser.php"
#line 341 "smarty_internal_templateparser.y"
    function yy_r85(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -4]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -7]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -2]->minor .')'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2316 "smarty_internal_templateparser.php"
#line 343 "smarty_internal_templateparser.y"
    function yy_r86(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2319 "smarty_internal_templateparser.php"
#line 345 "smarty_internal_templateparser.y"
    function yy_r87(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor.'::$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2322 "smarty_internal_templateparser.php"
#line 347 "smarty_internal_templateparser.y"
    function yy_r88(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.'::$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2325 "smarty_internal_templateparser.php"
#line 349 "smarty_internal_templateparser.y"
    function yy_r89(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number;     }
#line 2328 "smarty_internal_templateparser.php"
#line 358 "smarty_internal_templateparser.y"
    function yy_r90(){if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + 0]->minor['index']);} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + 0]->minor['var'] .')->value'.$this->yystack[$this->yyidx + 0]->minor['index']; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor['var'],"'"), null, true, false)->nocache;}    }
#line 2332 "smarty_internal_templateparser.php"
#line 361 "smarty_internal_templateparser.y"
    function yy_r91(){ $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -2]->minor .')->'.$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -2]->minor,"'"), null, true, false)->nocache;    }
#line 2335 "smarty_internal_templateparser.php"
#line 365 "smarty_internal_templateparser.y"
    function yy_r93(){$this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';    }
#line 2338 "smarty_internal_templateparser.php"
#line 366 "smarty_internal_templateparser.y"
    function yy_r94(){$this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';    }
#line 2341 "smarty_internal_templateparser.php"
#line 369 "smarty_internal_templateparser.y"
    function yy_r95(){$this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'index'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2344 "smarty_internal_templateparser.php"
#line 375 "smarty_internal_templateparser.y"
    function yy_r96(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2347 "smarty_internal_templateparser.php"
#line 377 "smarty_internal_templateparser.y"
    function yy_r97(){return;    }
#line 2350 "smarty_internal_templateparser.php"
#line 381 "smarty_internal_templateparser.y"
    function yy_r98(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']";    }
#line 2353 "smarty_internal_templateparser.php"
#line 385 "smarty_internal_templateparser.y"
    function yy_r102(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";    }
#line 2356 "smarty_internal_templateparser.php"
#line 386 "smarty_internal_templateparser.y"
    function yy_r103(){ $this->_retvalue = "[".$this->yystack[$this->yyidx + 0]->minor."]";    }
#line 2359 "smarty_internal_templateparser.php"
#line 387 "smarty_internal_templateparser.y"
    function yy_r104(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]";    }
#line 2362 "smarty_internal_templateparser.php"
#line 389 "smarty_internal_templateparser.y"
    function yy_r105(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';    }
#line 2365 "smarty_internal_templateparser.php"
#line 390 "smarty_internal_templateparser.y"
    function yy_r106(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';    }
#line 2368 "smarty_internal_templateparser.php"
#line 394 "smarty_internal_templateparser.y"
    function yy_r108(){$this->_retvalue = '';    }
#line 2371 "smarty_internal_templateparser.php"
#line 402 "smarty_internal_templateparser.y"
    function yy_r110(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2374 "smarty_internal_templateparser.php"
#line 404 "smarty_internal_templateparser.y"
    function yy_r111(){$this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2377 "smarty_internal_templateparser.php"
#line 407 "smarty_internal_templateparser.y"
    function yy_r113(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2380 "smarty_internal_templateparser.php"
#line 412 "smarty_internal_templateparser.y"
    function yy_r114(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + -1]->minor['index']).$this->yystack[$this->yyidx + 0]->minor;} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -1]->minor['var'] .')->value'.$this->yystack[$this->yyidx + -1]->minor['index'].$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -1]->minor['var'],"'"), null, true, false)->nocache;}    }
#line 2384 "smarty_internal_templateparser.php"
#line 415 "smarty_internal_templateparser.y"
    function yy_r115(){$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2387 "smarty_internal_templateparser.php"
#line 417 "smarty_internal_templateparser.y"
    function yy_r116(){$this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2390 "smarty_internal_templateparser.php"
#line 419 "smarty_internal_templateparser.y"
    function yy_r117(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2393 "smarty_internal_templateparser.php"
#line 420 "smarty_internal_templateparser.y"
    function yy_r118(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2396 "smarty_internal_templateparser.php"
#line 421 "smarty_internal_templateparser.y"
    function yy_r119(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2399 "smarty_internal_templateparser.php"
#line 422 "smarty_internal_templateparser.y"
    function yy_r120(){ $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2402 "smarty_internal_templateparser.php"
#line 424 "smarty_internal_templateparser.y"
    function yy_r121(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2405 "smarty_internal_templateparser.php"
#line 430 "smarty_internal_templateparser.y"
    function yy_r122(){if (!$this->template->security || $this->smarty->security_handler->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
																					            if ($this->yystack[$this->yyidx + -3]->minor == 'isset' || $this->yystack[$this->yyidx + -3]->minor == 'empty' || $this->yystack[$this->yyidx + -3]->minor == 'array' || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
																					                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";
																					            } else {
                                                       $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
                                                      }
                                                    }    }
#line 2414 "smarty_internal_templateparser.php"
#line 441 "smarty_internal_templateparser.y"
    function yy_r123(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";    }
#line 2417 "smarty_internal_templateparser.php"
#line 445 "smarty_internal_templateparser.y"
    function yy_r124(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.",".$this->yystack[$this->yyidx + 0]->minor;    }
#line 2420 "smarty_internal_templateparser.php"
#line 449 "smarty_internal_templateparser.y"
    function yy_r126(){ return;    }
#line 2423 "smarty_internal_templateparser.php"
#line 454 "smarty_internal_templateparser.y"
    function yy_r127(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'false');    }
#line 2426 "smarty_internal_templateparser.php"
#line 455 "smarty_internal_templateparser.y"
    function yy_r128(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'true');    }
#line 2429 "smarty_internal_templateparser.php"
#line 471 "smarty_internal_templateparser.y"
    function yy_r131(){$this->_retvalue = ','.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2432 "smarty_internal_templateparser.php"
#line 472 "smarty_internal_templateparser.y"
    function yy_r132(){$this->_retvalue = ',\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2435 "smarty_internal_templateparser.php"
#line 479 "smarty_internal_templateparser.y"
    function yy_r134(){$this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2438 "smarty_internal_templateparser.php"
#line 484 "smarty_internal_templateparser.y"
    function yy_r136(){$this->_retvalue =$this->yystack[$this->yyidx + 0]->minor;    }
#line 2441 "smarty_internal_templateparser.php"
#line 486 "smarty_internal_templateparser.y"
    function yy_r137(){$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2444 "smarty_internal_templateparser.php"
#line 487 "smarty_internal_templateparser.y"
    function yy_r138(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2447 "smarty_internal_templateparser.php"
#line 488 "smarty_internal_templateparser.y"
    function yy_r139(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2450 "smarty_internal_templateparser.php"
#line 490 "smarty_internal_templateparser.y"
    function yy_r141(){$this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2453 "smarty_internal_templateparser.php"
#line 491 "smarty_internal_templateparser.y"
    function yy_r142(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2456 "smarty_internal_templateparser.php"
#line 492 "smarty_internal_templateparser.y"
    function yy_r143(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2459 "smarty_internal_templateparser.php"
#line 493 "smarty_internal_templateparser.y"
    function yy_r144(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2462 "smarty_internal_templateparser.php"
#line 494 "smarty_internal_templateparser.y"
    function yy_r145(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2465 "smarty_internal_templateparser.php"
#line 495 "smarty_internal_templateparser.y"
    function yy_r146(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2468 "smarty_internal_templateparser.php"
#line 501 "smarty_internal_templateparser.y"
    function yy_r152(){$this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number;    }
#line 2471 "smarty_internal_templateparser.php"
#line 503 "smarty_internal_templateparser.y"
    function yy_r153(){$this->_retvalue = '==';    }
#line 2474 "smarty_internal_templateparser.php"
#line 504 "smarty_internal_templateparser.y"
    function yy_r154(){$this->_retvalue = '!=';    }
#line 2477 "smarty_internal_templateparser.php"
#line 505 "smarty_internal_templateparser.y"
    function yy_r155(){$this->_retvalue = '>';    }
#line 2480 "smarty_internal_templateparser.php"
#line 506 "smarty_internal_templateparser.y"
    function yy_r156(){$this->_retvalue = '<';    }
#line 2483 "smarty_internal_templateparser.php"
#line 507 "smarty_internal_templateparser.y"
    function yy_r157(){$this->_retvalue = '>=';    }
#line 2486 "smarty_internal_templateparser.php"
#line 508 "smarty_internal_templateparser.y"
    function yy_r158(){$this->_retvalue = '<=';    }
#line 2489 "smarty_internal_templateparser.php"
#line 509 "smarty_internal_templateparser.y"
    function yy_r159(){$this->_retvalue = '===';    }
#line 2492 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r160(){$this->_retvalue = '!==';    }
#line 2495 "smarty_internal_templateparser.php"
#line 511 "smarty_internal_templateparser.y"
    function yy_r161(){$this->_retvalue = '%';    }
#line 2498 "smarty_internal_templateparser.php"
#line 513 "smarty_internal_templateparser.y"
    function yy_r162(){$this->_retvalue = '&&';    }
#line 2501 "smarty_internal_templateparser.php"
#line 514 "smarty_internal_templateparser.y"
    function yy_r163(){$this->_retvalue = '||';    }
#line 2504 "smarty_internal_templateparser.php"
#line 515 "smarty_internal_templateparser.y"
    function yy_r164(){$this->_retvalue = ' XOR ';    }
#line 2507 "smarty_internal_templateparser.php"
#line 520 "smarty_internal_templateparser.y"
    function yy_r165(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2510 "smarty_internal_templateparser.php"
#line 522 "smarty_internal_templateparser.y"
    function yy_r167(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2513 "smarty_internal_templateparser.php"
#line 523 "smarty_internal_templateparser.y"
    function yy_r168(){ return;     }
#line 2516 "smarty_internal_templateparser.php"
#line 524 "smarty_internal_templateparser.y"
    function yy_r169(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2519 "smarty_internal_templateparser.php"
#line 525 "smarty_internal_templateparser.y"
    function yy_r170(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2522 "smarty_internal_templateparser.php"
#line 534 "smarty_internal_templateparser.y"
    function yy_r174(){$this->_retvalue = '".'.$this->yystack[$this->yyidx + -1]->minor.'."'; $this->compiler->has_variable_string = true;    }
#line 2525 "smarty_internal_templateparser.php"
#line 535 "smarty_internal_templateparser.y"
    function yy_r175(){$this->_retvalue = '".'.'$_smarty_tpl->getVariable(\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')->value'.'."'; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor,"'"), null, true, false)->nocache; $this->compiler->has_variable_string = true;    }
#line 2528 "smarty_internal_templateparser.php"
#line 537 "smarty_internal_templateparser.y"
    function yy_r177(){ $this->_retvalue = '".('.$this->yystack[$this->yyidx + -1]->minor.')."'; $this->compiler->has_variable_string = true;    }
#line 2531 "smarty_internal_templateparser.php"
#line 538 "smarty_internal_templateparser.y"
    function yy_r178(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '".$_tmp'.$this->prefix_number.'."'; $this->compiler->has_variable_string = true;    }
#line 2534 "smarty_internal_templateparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //TP_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 60 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2652 "smarty_internal_templateparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
#line 52 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    //echo $this->retvalue."\n\n";
#line 2677 "smarty_internal_templateparser.php"
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
?>
