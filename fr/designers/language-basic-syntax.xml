<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
  <chapter id="language.basic.syntax">
   <title>Bases syntaxiques</title>
   <para>
    Toutes les balises Smarty sont entourées de délimiteurs. Par défaut,
    ces délimiteurs sont <literal>{</literal> et
    <literal>}</literal>, mais ils peuvent être modifiés.
   </para>
   <para>
    Pour ces exemples, nous supposons que vous utiliserez leur valeur par défaut.
    Dans Smarty, le contenu qui est situé en dehors des délimiteurs
    est affiché comme contenu statique, inchangé. Lorsque Smarty rencontre
    des balises de template, il tente de les comprendre et en affiche la sortie
    appropriée, en lieu et place.
   </para>

   <sect1 id="language.syntax.comments">
    <title>Commentaires</title>
    <para>
     Les commentaires dans Smarty sont entourés d'asterisques, de cette
     façon : {* voici un commentaire *}
     Les commentaires Smarty ne sont pas affichés dans la sortie finale du
     template.
     Ils sont utilisés pour des notes internes, dans le template, pour aider
     les développeurs à en comprendre le fonctionnement.
    </para>
    <example>
     <title>Commentaires</title>
     <programlisting>
{* Smarty *}

{* Inclusion de l'en tête *}
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{* affiche des listes déroulantes *}
&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
    </example>
   </sect1>

   <sect1 id="language.syntax.functions">
    <title>Fonctions</title>
    <para>
     Les balises Smarty affichent une <link linkend="language.variables">variable</link>
     ou invoquent une fonction. Les fonctions sont appelées
     lorsqu'elles sont entourées, ainsi que leurs paramètres, des délimiteurs Smarty.
     Par exemple : {nomfonction par1="val" par2="val"}.
    </para>
    <example>
     <title>syntaxe des fonctions</title>
     <programlisting>
{config_load file="colors.conf"}

{include file="header.tpl"}

{if $name eq "Fred"}
   Vous êtes admis dans cette zone
{else}
	Bienvenue, &lt;font color="{#fontColor#}"&gt;{$name}!&lt;/font&gt;
{/if}

{include file="footer.tpl"}</programlisting>
    </example>
    <para>
     Les fonctions natives et les fonctions utilisateurs ont toutes deux la même
     syntaxe, dans les templates. Les fonctions natives sont relatives
     au traitement interne de Smarty, comme par exemple <command>if</command>,
     <command>section</command> et <command>strip</command>. Elles ne peuvent
     être modifiées. Les fonctions utilisateurs sont des fonctions additionnelles,
     implémentées par l'intermédiaire de plugins.
     Elles peuvent être modifiées pour correspondre à vos besoins, et vous
     pouvez en créer de nouvelles. <command>html_options</command> et
     <command>html_select_date</command> sont deux exemples de fonctions
     utilisateurs.
    </para>
   </sect1>

   <sect1 id="language.syntax.attributes">
    <title>Paramètres</title>
    <para>
     La plupart des fonctions attendent des paramètres qui régissent leur
     comportement. Les paramètres des fonctions Smarty sont très proches des
     attributs des balises HTML. Les valeurs numériques n'ont pas besoin d'être
     entourées par des guillemets, par contre, ces guillemets sont recommandées lors
     de l'utilisation de chaînes de caractères. Des variables peuvent aussi être
     utilisées en tant que paramètres, et ne doivent pas être entourées de guillemets.
    </para>
    <para>
     Certains paramètres requièrent des valeurs booléennes (true / false).
     Elles peuvent être spécifiées par l'une des valeures suivantes, sans
     guillemet: <literal>true</literal>, <literal>on</literal>, et <literal>yes</literal>,
     ou <literal>false</literal>, <literal>off</literal>, et <literal>no</literal>.
    </para>
    <example>
     <title>Paramètres de fonction, syntaxe</title>
     <programlisting>
{include file="header.tpl"}

{include file=$includeFile}

{include file=#includeFile#}

{html_select_date display_days=yes}

&lt;SELECT name=company&gt;
{html_options values=$vals selected=$selected output=$output}
&lt;/SELECT&gt;</programlisting>
</example>
		</sect1>
   <sect1 id="language.syntax.quotes">
    <title>Variables insérées dans des chaînes de caractères</title>
    <para>
    Smarty est capable d'interpréter les variables insérées à l'intérieur de
    chaînes entre guillemets, du moment que leur nom est exclusivement composé
    de chiffres, lettres, underscores et crochets. Si le nom de la variable
    contient tout autre caractère (point, référence à un objet, etc.)
    la variable doit être entourée d'apostrophes inverses (`).
    </para>
    <example>
     <title>Syntaxe d'insertion de variables dans des chaînes</title>
     <programlisting>
EXEMPLE DE SYNTAXE:
{func var="test $foo test"}       &lt;-- comprends $foo
{func var="test $foo_bar test"}   &lt;-- comprends $foo_bar
{func var="test $foo[0] test"}    &lt;-- comprends $foo[0]
{func var="test $foo[bar] test"}  &lt;-- comprends $foo[bar]
{func var="test $foo.bar test"}   &lt;-- comprends $foo (not $foo.bar)
{func var="test `$foo.bar` test"} &lt;-- comprends $foo.bar

EXEMPLE PRATIQUE:
{include file="subdir/$tpl_name.tpl"} &lt;-- remplace $tpl_name avec la valeur
{cycle values="one,two,`$smarty.config.myval`"} &lt;-- doit comporter les
apostrophes inverses</programlisting>
</example>
		</sect1>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->