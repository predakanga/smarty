<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.14 Maintainer: yannick Status: ready -->

<sect1 id="language.function.section">
 <title>{section},{sectionelse}</title>
 <para>
  Les balises <emphasis>section</emphasis> sont utilisées pour
  parcourir un <emphasis role="bold">tableau de données</emphasis>
  (tout comme <link linkend="language.function.foreach">{foreach}</link>).
  Toutes les balises <emphasis>{section}</emphasis> doivent être utilisées
  de paire avec les balises <emphasis>{/section}</emphasis>. Les paramètres
  requis sont <emphasis>name</emphasis> et <emphasis>loop</emphasis>.
  Le nom de la {section} est, selon votre choix, composé de lettres,
  chiffres et underscores. Les sections peuvent être imbriquées,
  mais leurs noms doivent être uniques. La variable de parcours
  (généralement un tableau de données) détermine le nombre de fois
  que la section sera parcourue. Lorsque l'on affiche une variable
  dans une section, le nom de la section doit précéder
  la variable entre crochets []. <emphasis>{sectionelse}</emphasis>
  est exécuté lorsqu'aucune valeur n'est trouvée dans la variable à
  parcourir.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>name</entry>
     <entry>chaîne de caractère</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>Le nom de la section</entry>
    </row>
    <row>
     <entry>loop</entry>
     <entry>mixed</entry>
     <entry>Oui</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>valeur qui détermine le nombre de fois que la boucle sera exécutée.</entry>
    </row>
    <row>
     <entry>start</entry>
     <entry>entier</entry>
     <entry>Non</entry>
     <entry><emphasis>0</emphasis></entry>
     <entry>La position de l'index ou la section commencera son
      parcours. Si la valeur donnée est négative, la position de
      départ est calculée depuis la fin du tableau. Par exemple,
      s'il existe 7 valeurs dans le tableau à parcourir et que start
      est à -2, l'index de départ sera 5. Les valeurs incorrectes
      (en dehors de la portée du tableau) sont automatiquements
     tronquées à la valeur correcte la plus proche.</entry>
    </row>
    <row>
     <entry>step</entry>
     <entry>entier</entry>
     <entry>Non</entry>
     <entry><emphasis>1</emphasis></entry>
     <entry>La valeur du pas qui sera utilisé pour parcourir le
      tableau.Par exemple, step=2 parcourera les indices
      0,2,4, etc. Si step est négatif, le tableau sera parcouru en sens
     inverse.</entry>
    </row>
    <row>
     <entry>max</entry>
     <entry>entier</entry>
     <entry>Non</entry>
     <entry><emphasis>1</emphasis></entry>
     <entry>Définit le nombre maximum de fois que le tableau sera
     parcouru.</entry>
    </row>
    <row>
     <entry>show</entry>
     <entry>booléen</entry>
     <entry>Non</entry>
     <entry><emphasis>true</emphasis></entry>
     <entry>Détermine s'il est nécessaire d'afficher la
     section ou non.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>

 <example>
  <title>{section}</title>

  <programlisting role="php">
<![CDATA[
<?php

$data = array(1000,1001,1002);
$smarty->assign('custid',$data);

?>
]]>
  </programlisting>
  <programlisting>
 <![CDATA[
{* Cet exemple affiche toutes les valeurs du tableau $custid *}
{section name=customer loop=$custid}
  id: {$custid[customer]}<br />
{/section}
<hr />
{* Affiche toutes les valeurs du tableau $custid dans le sens inverse *}
{section name=foo loop=$custid step=-1}
  {$custid[foo]}<br />
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
id: 1000<br />
id: 1001<br />
id: 1002<br />
<hr />
id: 1002<br />
id: 1001<br />
id: 1000<br />
]]>
  </screen>
  <para>
   Voici d'autres exemples sans tableaux assignés.
  </para>
  <programlisting>
<![CDATA[
{section name=foo start=10 loop=20 step=2}
{$smarty.section.foo.index}
{/section}
<hr />
{section name=bar loop=21 max=6 step=-2}
{$smarty.section.bar.index}
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
10 12 14 16 18
<hr />
20 18 16 14 12 10
]]>
  </screen>
 </example>

 <example>
  <title>{section}, variable de parcours</title>
  <programlisting role="php">
<![CDATA[
<?php

$id = array(1001,1002,1003);
$smarty->assign('custid',$id);

$fullnames = array('John Smith','Jack Jones','Jane Munson');
$smarty->assign('name',$fullnames);

$addr = array('253 N 45th', '417 Mulberry ln', '5605 apple st');
$smarty->assign('address',$addr);

?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
{*
   La variable de parcours détermine uniquement le nombre de fois que nous allons
   rentrer dans la boucle. Vous pouvez accéder à toutes les variables du template
   lorsque vous êtes dans une section. Cet exemple part du principe que
   $idClient, $noms et $adresses sont tous des tableaux qui contiennent
   autant de valeurs les uns que les autres.
*}
{section name=client loop=$idClient}
   id : {$custid[customer]}<br />
   nom : {$name[customer]}<br />
   addresse : {$address[customer]}<br />
  <p>
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
<p>
  id : 1000<br />
  nom : John Smith<br />
  addresse : 253 N 45th
</p>
<p>
  id : 1001<br />
  nom : Jack Jones<br />
  addresse : 417 Mulberry ln
</p>
<p>
  id : 1002<br />
  nom : Jane Munson<br />
  addresse : 5605 apple st
</p>
]]>
  </screen>
 </example>

 <example>
  <title>nom de {section}</title>
  <programlisting>
<![CDATA[
{*
  Le nom de la section peut être ce que vous voulez,
  et est utilisé pour référencer les données depuis la section.
*}
{section name=monTableau loop=$idClient}
<p>
  id: {$idCLient[monTableau]}<br />
  name: {$noms[monTableau]}<br />
  address: {$addresses[monTableau]}
 </p>
{/section}
]]>
  </programlisting>
 </example>

 <example>
  <title>sections imbriquées</title>
  <programlisting role="php">
<![CDATA[
<?php

$id = array(1001,1002,1003);
$smarty->assign('custid',$id);

$fullnames = array('John Smith','Jack Jones','Jane Munson');
$smarty->assign('name',$fullnames);

$addr = array('253 N 45th', '417 Mulberry ln', '5605 apple st');
$smarty->assign('address',$addr);

$types = array(
    array( 'home phone', 'cell phone', 'e-mail'),
    array( 'home phone', 'web'),
    array( 'cell phone')
);
$smarty->assign('contact_type', $types);

$info = array(
    array('555-555-5555', '666-555-5555', 'john@myexample.com'),
    array( '123-456-4', 'www.example.com'),
    array( '0457878')
);
$smarty->assign('contact_info', $info);

?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
{*
   Les sections peuvent être imbriquées à un nombre de niveaux illimité.
   Grâce aux sections imbriquées, vous pouvez accéder à des structures de données
   complexes, comme des tableaux multi-dimentionnels. Dans cet exemple,
   $type_contact[client] est un tableau de type de contact pour le client
   courant.
*}
{section name=client loop=$idClient}
<hr />
  id: {$idClient[client]}<br />
  nom: {$nom[client]}<br />
  addresse: {$addresse[client]}<br />
  {section name=contact loop=$type_contact[client]}
    {$type_contact[client][contact]}: {$info_contact[client][contact]}<br />
  {/section}
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
<hr />
id: 1000<br />
nom: John Smith<br />
addresse: 253 N 45th<br />
telephone: 555-555-5555<br />
telephone portable: 555-555-5555<br />
e-mail: john@myexample.com<br />
<hr />
id: 1001<br />
nom: Jack Jones<br />
addresse: 417 Mulberry ln<br />
telephone: 555-555-5555<br />
telephone portable: 555-555-5555<br />
e-mail: jack@myexample.com<br />
<hr />
id: 1002<br />
nom: Jane Munson<br />
addresse: 5605 apple st<br />
telephone: 555-555-5555<br />
telephone portable: 555-555-5555<br />
e-mail: jane@myexample.com<br />
<hr />
]]>
  </screen>
 </example>

 <example>
  <title>Sections et tableaux associatifs</title>
  <programlisting role="php">
<![CDATA[
<?php

$data = array(
    array('name' => 'John Smith', 'home' => '555-555-5555',
        'cell' => '666-555-5555', 'email' => 'john@myexample.com'),
    array('name' => 'Jack Jones', 'home' => '777-555-5555',
        'cell' => '888-555-5555', 'email' => 'jack@myexample.com'),
    array('name' => 'Jane Munson', 'home' => '000-555-5555',
        'cell' => '123456', 'email' => 'jane@myexample.com')
);
$smarty->assign('contacts',$data);

?>
]]>
  </programlisting>
  <programlisting>
<![CDATA[
{*
   Exemple d'affichage d'un tableau associatif dans une section
*}
{section name=client loop=$contacts}
<p>
  nom: {$contacts[client].name}<br />
  telephone: {$contacts[client].home}<br />
  portable: {$contacts[client].cell}<br />
  e-mail: {$contacts[client].email}
</p>
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
<p>
nom: John Smith<br />
telephone: 555-555-5555<br />
portable: 555-555-5555<br />
e-mail: john@myexample.com
</p>
<p>
nom: Jack Jones<br />
telephone: 555-555-5555<br />
portable: 555-555-5555<br />
e-mail: jack@myexample.com
</p>
<p>
nom: Jane Munson<br />
telephone: 555-555-5555<br />
portable: 555-555-5555<br />
e-mail: jane@myexample.com<p>
</p>
]]>
  </screen>
 </example>

 <para>Exemple avec une base de données (eg. en utilisant Pear ou Adodb)</para>
 <programlisting role="php">
<![CDATA[
<?php

$sql = 'select id, name, home, cell, email from contacts';
$smarty->assign('contacts',$db->getAll($sql) );

?>
]]>
 </programlisting>

 <programlisting>
<![CDATA[
{*
Affiche le résultat de la base de données dans un tableau
*}
<table>
 <tr><th>&nbsp;</th><th>Name></th><th>Home</th><th>Cell</th><th>Email</th></tr>
 {section name=co loop=$contacts}
 <tr>
  <td><a href="view.php?id={$contacts[co].id}">view<a></td>
  <td>{$contacts[co].name}</td>
  <td>{$contacts[co].home}</td>
  <td>{$contacts[co].cell}</td>
  <td>{$contacts[co].email}</td>
 <tr>
 {/section}
</table>
]]>
  </programlisting>

 <example>
  <title>{sectionelse}</title>
  <programlisting>
<![CDATA[
{* sectionelse est exécuté s'il n'existe aucune valeur dans idClient *}
{section name=client loop=$idClient}
  id: {$idClient[client]}<br />
{sectionelse}
  Aucune valeur dans $idClient.
{/section}
]]>
  </programlisting>
 </example>
 <para>
  Les sections ont leur propre variable de gestion des propriétés.
  Elles sont de la forme: 
  <link linkend="language.variables.smarty.loops">{$smarty.section.sectionname.varname}</link>
 </para>
 <para>
  Depuis Smarty 1.5.0, la syntaxe pour les propriétés des sections
  a été changée de {%sectionname.varname%} à
  {$smarty.section.nomSection.nomVariable}. L'ancienne syntaxe est toujours
  supportée, mais vous ne verrez que des exemples avec la nouvelle syntaxe
  dans le manuel.
 </para>

 <sect2 id="section.property.index">
  <title>index</title>
  <para>
   Index est utilisé pour afficher l'index de parcours courant, commence par
   0 (ou l'attribut start s'il est fourni), et s'incrémente de 1 (ou de la valeur
   de l'attribut step s'il est fourni).
  </para>
  <note>
   <title>Note technique</title>
   <para>
    Si les attributs step et start ne sont pas modifiés, alors index
    fonctionne de la même façon que <link
    linkend="section.property.iteration">iteration</link>, à l'exception qu'il commence
    par 0 plutôt que par 1.
   </para>
  </note>
  <example>
   <title>propriété de {section} index</title>
   <programlisting>
<![CDATA[
{* FYI, $custid[customer.index] et $custid[customer] sont identiques *}

{section name=client loop=$idClient}
  {$smarty.section.client.index} id: {$idClient[client]}<br />
{/section}
]]>
  </programlisting>
  <para>
   L'exemple ci-dessus affichera :
  </para>
  <screen>
<![CDATA[
0 id: 1000<br />
1 id: 1001<br />
2 id: 1002<br />
]]>
   </screen>
  </example>
 </sect2>

 <sect2 id="section.property.index.prev">
  <title>index_prev</title>
  <para>
   index_prev est utilisé pour afficher l'index de parcours
   précédent de la boucle. Au premier passage, il vaut -1.
  </para>
 </sect2>

 <sect2 id="section.property.index.next">
  <title>index_next</title>
  <para>
   index_next est utilisé pour afficher la valeur théorique suivante de
   index. Dans la dernière boucle, celà reste la valeur incrémentée,
   qui respecte l'attribut step si donné.
  </para>

  <example>
   <title>propriété de {section} index_next et index_prev</title>
   <programlisting role="php">
<![CDATA[
<?php

$data = array(1001,1002,1003,1004,1005);
$smarty->assign('custid',$data);

?>
]]>
   </programlisting>
   <programlisting>
    <![CDATA[
{* FYI, $custid[cus.index] et $custid[cus] sont identiques *}

<table>
 <tr>
  <th>index</th><th>id</th>
  <th>index_prev</th><th>prev_id</th>
  <th>index_next</th><th>next_id</th>
 </tr>
 {section name=cus loop=$custid}
 <tr>
  <td>{$smarty.section.cus.index}</td><td>{$custid[cus]}</td>
  <td>{$smarty.section.cus.index_prev}</td><td>{$custid[cus.index_prev]}</td>
  <td>{$smarty.section.cus.index_next}</td><td>{$custid[cus.index_next]}</td>
 </tr>
 {/section}
</table>
]]>
   </programlisting>
   <para>
    L'exemple ci-dessus affichera :
   </para>
   <screen>
<![CDATA[
index  id    index_prev prev_id index_next next_id
0      1001  -1                 1          1002
1      1002  0          1001    2          1003
2      1003  1          1002    3          1004
3      1004  2          1003    4          1005
4      1005  3          1004    5
]]>
   </screen>
  </example>
 </sect2>

 <sect2 id="section.property.iteration">
  <title>iteration</title>
  <para>
   iteration est utilisé pour afficher la valeur courante de l'iteration.
  </para>
  <para>
   NOTE: Cette valeur n'est pas affectée par les attributs start, step et
   max, à l'inverse de la propriété <link linkend="section.property.index">index</link>. 
   L'itération commence par
   1 et non par 0 (comme le fait index). <link
   linkend="section.property.rownum">rownum</link> est un alias de iteration,
   ils fonctionnent de la même façon.
  </para>
  <example>
   <title>propriété iteration de {section}</title>
   <programlisting role="php">
<![CDATA[
<?php

// Tableau de 3000 à 3015
$id = range(3000,3015);
$smarty->assign('custid',$id);

?>
]]>
   </programlisting>
   <programlisting>
<![CDATA[
{section name=cu loop=$custid start=5 step=2}
   iteration={$smarty.section.cu.iteration}
   index={$smarty.section.cu.index}
   id={$custid[cu]}<br />
{/section}
]]>
   </programlisting>
   <para>
    L'exemple ci-dessus affichera :
   </para>
   <screen>
<![CDATA[
iteration=1 index=5 id=3005<br />
iteration=2 index=7 id=3007<br />
iteration=3 index=9 id=3009<br />
iteration=4 index=11 id=3011<br />
iteration=5 index=13 id=3013<br />
iteration=6 index=15 id=3015<br />
]]>
   </screen>
   <para>
    Cet exemple utilise la propriété iteration pour afficher
    un block d'en-tête de tableau toutes les cinq lignes
    (utilisez <link linkend="language.function.if">{if}</link>
    avec l'opérateur mod).
   </para>
   <programlisting>
<![CDATA[
<table>
 {section name=co loop=$contacts}
 {if $smarty.section.co.iteration % 5 == 1}
 <tr><th>&nbsp;</th><th>Name></th><th>Home</th><th>Cell</th><th>Email</th></tr>
 {/if}
 <tr>
  <td><a href="view.php?id={$contacts[co].id}">view<a></td>
  <td>{$contacts[co].name}</td>
  <td>{$contacts[co].home}</td>
  <td>{$contacts[co].cell}</td>
  <td>{$contacts[co].email}</td>
 <tr>
 {/section}
</table>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="section.property.first">
  <title>first</title>
  <para>
   first est à true lorsque la section est parcouru pour la première fois.
  </para>
 </sect2>

 <sect2 id="section.property.last">
  <title>last</title>
  <para>
   last est à true lorsque la section est parcourue pour la dernière fois.
  </para>
  <example>
   <title>Propriété last et first de {section}</title>
   <para>
    Cet exemple boucle le tableau $customers ;
    affiche un block d'en-tête lors de la première itération et,
    à la dernière, affiche un block de pied de page
    (utilisation de la propriété <link linkend="section.property.total">total</link>)
   </para>
   <programlisting>
<![CDATA[
{section name=customer loop=$customers}
{if $smarty.section.customer.first}
<table>
 <tr><th>id</th><th>customer</th></tr>
 {/if}

 <tr>
  <td>{$customers[customer].id}}</td>
  <td>{$customers[customer].name}</td>
 </tr>

 {if $smarty.section.customer.last}
 <tr><td></td><td>{$smarty.section.customer.total} customers</td></tr>
</table>
{/if}
{/section}
]]>
  </programlisting>
  </example>
 </sect2>

 <sect2 id="section.property.rownum">
  <title>rownum</title>
  <para>
   rownum, utilisé pour afficher la valeur courante de l'itération,
   commence par 1. C'est un alias de <link
   linkend="section.property.iteration">iteration</link>, ils fonctionnent de façon
   identique.
  </para>
 </sect2>

 <sect2 id="section.property.loop">
  <title>loop</title>
  <para>
   loop est utilisé pour afficher la dernière valeur de index que cette
   section a utilisé. Peut être utilisé dans ou en dehors de la section.
  </para>
  <example>
   <title>Propriété de {section} index</title>
   <programlisting>
<![CDATA[
{section name=client loop=$idClient}
  {$smarty.section.client.index} id: {$idClient[client]}<br />
{/section}

Il y eu {$smarty.section.client.loop} clients d'affichés.
]]>
   </programlisting>
   <para>
    L'exemple ci-dessus affichera :
   </para>
   <screen>
<![CDATA[
0 id: 1000<br />
1 id: 1001<br />
2 id: 1002<br />

Il y eu 3 clients d'affichés.
]]>
   </screen>
  </example>
 </sect2>

 <sect2 id="section.property.show">
  <title>show</title>
  <para>
   <emphasis>show</emphasis> est utilisé comme paramètre de section.
   <emphasis>show</emphasis> est une valeur booléenne, true ou false.
   Si show est à "false", la section ne sera pas affichée. Si un
   {sectionelse} est présent, elle sera affichée.
  </para>
  <example>
   <title>{section}, attribut show</title>
   <programlisting>
<![CDATA[
{*
    $show_client_info a pu être passé par le script PHP,
    pour déterminer si oui ou non on souhaite afficher la section
*}
{section name=client loop=$idClient show=$show_client_info}
  {$smarty.section.client.rownum} id: {$idClient[client]}<br />
{/section}

{if $smarty.section.client.show}
  la section a été affichée.
{else}
  la section n'a pas été affichée.
{/if}
]]>
   </programlisting>
   <para>
    L'exemple ci-dessus affichera :
   </para>
   <screen>
<![CDATA[
1 id: 1000<br />
2 id: 1001<br />
3 id: 1002<br />

la section a été affichée.
]]>
   </screen>
  </example>
 </sect2>

 <sect2 id="section.property.total">
  <title>total</title>
  <para>
   <literal>total</literal> est utilisé pour afficher le nombre d'itération que la section
   va exécuter. Peut être utilisé dans ou en dehors de la section.
  </para>
  <example>
   <title>{section}, propriété <literal>total</literal></title>
   <programlisting>
<![CDATA[
{section name=client loop=$idClient step=2}
   {$smarty.section.client.index} id: {$idClient[client]}<br />
{/section}

Il y eu {$smarty.section.client.total} clients affichés.
]]>
   </programlisting>
   <para>
    L'exemple ci-dessus affichera :
   </para>
   <screen>
<![CDATA[
0 id: 1000<br />
2 id: 1001<br />
4 id: 1002<br />

Il y eu 3 clients affichés.
]]>
   </screen>
  </example>
  <para>
   Voir aussi
   <link linkend="language.function.foreach">{foreach}</link> et
   <link linkend="language.variables.smarty.loops">$smarty.section</link>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->