<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.10 Maintainer: gerald Status: ready -->

<sect1 id="language.function.ldelim">
 <title>{ldelim},{rdelim}</title>
 <para>
  {ldelim} et {rdelim} sont utilisés pour <link linkend="language.escaping">échapper</link>
  les délimiteurs en tant que tels, dans notre cas, "{" et "}". Vous pouvez toujours utiliser <link
  linkend="language.function.literal">{literal}{/literal}</link> pour échapper
  des blocks de texte, e.g. Javascript ou css.
  Voir aussi <link linkend="language.variables.smarty.ldelim">{$smarty.ldelim}</link>.
 </para>
 <example>
  <title>{ldelim}, {rdelim}</title>
  <programlisting>
<![CDATA[
{* Affiche les délimiteurs de template *}

{ldelim}nomFonction{rdelim} est la façon dont sont appelées les fonctions dans Smarty !
]]>
   </programlisting>
   <para>
    Affichera :
   </para>
   <screen>
<![CDATA[
{nomFonction} est la façon dont sont appelées les fonctions dans Smarty !
]]>
   </screen>

   <para>Un autre exemple avec du javascript</para>
   <programlisting>
<![CDATA[
<script language="JavaScript">
 function foo() {ldelim}
   ... code ...
   {rdelim}
</script>
]]>
   </programlisting>
   <para>
    affichera :
   </para>
   <screen>
<![CDATA[
<script language="JavaScript">
 function foo() {
   .... code ...
 }
</script>
]]>
   </screen>

  </example>
  <para>
   Voir aussi la
   <link linkend="language.escaping">désactivation de l'analyse de Smarty</link>.
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->