<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.6 Maintainer: yannick Status: ready -->

<sect1 id="language.function.cycle">
 <title>{cycle}</title>
 <para>
  {cycle} est utilisé pour boucler sur un ensemble de valeurs. Très pratique
  pour alterner entre deux ou plusieurs couleurs dans un tableau,
  ou plus généralement pour boucler sur les valeurs d'un tableau.
 </para>
 <informaltable frame="all">
  <tgroup cols="5">
   <colspec colname="param" align="center" />
   <colspec colname="type" align="center" />
   <colspec colname="required" align="center" />
   <colspec colname="default" align="center" />
   <colspec colname="desc" />
   <thead>
    <row>
     <entry>Nom attribut</entry>
     <entry>Type</entry>
     <entry>Requis</entry>
     <entry>Defaut</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>name</entry>
     <entry>chaîne de caractères</entry>
     <entry>Non</entry>
     <entry><emphasis>default</emphasis></entry>
     <entry>Le nom du cycle</entry>
    </row>
    <row>
     <entry>values</entry>
     <entry>divers</entry>
     <entry>Oui</entry>
     <entry><emphasis>N/A</emphasis></entry>
     <entry>Les valeurs sur lesquelles boucler, soit une liste
      séparée par des virgules, (voir l'attribut delimiter),
     soit un tableau de valeurs.</entry>
    </row>
    <row>
     <entry>print</entry>
     <entry>booléen</entry>
     <entry>Non</entry>
     <entry><emphasis>true</emphasis></entry>
     <entry>S'il faut afficher ou non cette valeur</entry>
    </row>
    <row>
     <entry>advance</entry>
     <entry>booléen</entry>
     <entry>Non</entry>
     <entry><emphasis>true</emphasis></entry>
     <entry>Oui ou non aller à la prochaîne valeur</entry>
    </row>
    <row>
     <entry>delimiter</entry>
     <entry>chaîne de caractères</entry>
     <entry>Non</entry>
     <entry><emphasis>,</emphasis></entry>
     <entry>Le délimiteur à utiliser dans la liste.</entry>
    </row>
    <row>
     <entry>assign</entry>
     <entry>chaîne de caractères</entry>
     <entry>Non</entry>
     <entry><emphasis>n/a</emphasis></entry>
     <entry>La variable de template dans laquelle la sortie
     sera assignée</entry>
    </row>
    <row>
     <entry>reset</entry>
     <entry>booléen</entry>
     <entry>Non</entry>
     <entry><emphasis>false</emphasis></entry>
     <entry>Le cycle sera défini à la première valeur</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  Vous pouvez définir plusieurs {cycle} dans votre template, en leur
  donnant des noms uniques (attribut name).
 </para>
 <para>
  Vous pouvez empêcher la valeur courante de s'afficher en définissant
  l'attribut print à false. Ce procédé peut être utile pour discrètement
  passer outre une valeur de la liste.
 </para>
 <para>
  L'attribut advance est utilisé pour répéter une valeur. Lorsque
  définit à false, le prochain appel de {cycle} ramènera la même valeur.
 </para>
 <para>
  Si vous définissez l'attribut spécial "assign", la sortie de la fonction
  cycle y sera assignée plutôt que d'être directement affichée.
 </para>
 <example>
  <title>{cycle}</title>
  <programlisting>
<![CDATA[
{section name=rows loop=$data}
<tr bgcolor="{cycle values="#eeeeee,#d0d0d0"}">
   <td>{$data[rows]}</td>
</tr>
{/section}
]]>
  </programlisting>
  <screen>
<![CDATA[
<tr bgcolor="#eeeeee">
   <td>1</td>
</tr>
<tr bgcolor="#d0d0d0">
   <td>2</td>
</tr>
<tr bgcolor="#eeeeee">
   <td>3</td>
</tr>
]]>
  </screen>
 </example>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->